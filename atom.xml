<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The Pragmatic Programmer</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://eclatant.io/"/>
  <updated>2018-09-20T14:01:50.923Z</updated>
  <id>https://eclatant.io/</id>
  
  <author>
    <name>Jeewhan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>코드스피츠 3기 함수와 OOP - 3강</title>
    <link href="https://eclatant.io/2018/09/20/CodeSpitz-3-3/"/>
    <id>https://eclatant.io/2018/09/20/CodeSpitz-3-3/</id>
    <published>2018-09-19T15:00:00.000Z</published>
    <updated>2018-09-20T14:01:50.923Z</updated>
    
    <content type="html"><![CDATA[<p>어플리케이션을 짤 때, 대부분의 경우는 인식하여 구조화해서 프로그래밍 해야 하는 경우가 대부분</p><p>HTML 파서를 짤려면 HTML 을 보고 구조적으로 분석해야 함</p><p>구조화를 무한히 하면 무한한 케이스가 될 뿐, 구조화의 목표는 단순한 원리의 조합이나 창발을 통해서 설명할 수 있고자 하는 것</p><p>A = <tag>BODY</tag></p><p>B = <tag></tag></p><p>C = TEXT</p><p>BODY = (A | B | C)N</p><p>위와 같이 간단한 원리로 압축하여 그것의 창발로 현상을 설명할 수 있어야, 알고리즘도 간단한 만큼만 구현할 수 있다</p><p>HTML 을 장황하게 설명하면, 장황함을 커버하는 알고리즘을 짜야 한다</p><p>현상을 보고 구조적이고 재귀적인 형태의 파악을 할 수 있는가? 데이터 구조를 만들어 낼 수 있는가? 가 핵심이다</p><p>내부 구성요소로부터 응용 구성요소로 확장하는 것을 BNF 정의방식이라고 함</p><p>A 는 BODY 를 가지고 있는데 BODY 는 A 를 가지고 있을 수 있으므로 재귀가 시작됨</p><p>재귀적인 센스가 없다면 위와 같이 사물을 바라보기가 어렵다</p><p>재귀적으로 짜지 않으면 모든 케이스를 다 처리하기 위한 조건문이 필요해진다</p><p>재귀적으로 처리하는 과제를 수행해보게 되면, 그 다음부터는 해당 계열의 문제를 해결할 수 있고 그러면 사물을 그렇게 바라볼 수 있게 되고, 그렇게 되면 많은 부분들을 개발할 수 있게 됨</p><p>케이스가 확정적인 것만 구현할 수 있다면 초급개발자, 케이스가 재귀적이면서 복합적인 상황들을 처리할 수 있다면 중급개발자</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parser = <span class="function"><span class="params">input</span> =&gt;</span> &#123;</span><br><span class="line">  input = input.trim();</span><br><span class="line">  <span class="keyword">const</span> result = &#123; <span class="attr">name</span>: <span class="string">"ROOT"</span>, <span class="attr">type</span>: <span class="string">"node"</span>, <span class="attr">children</span>: [] &#125;;</span><br><span class="line">  <span class="keyword">const</span> stack = [&#123; <span class="attr">tag</span>: result &#125;];</span><br><span class="line">  <span class="keyword">let</span> curr,</span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    j = input.length;</span><br><span class="line">  <span class="keyword">while</span> ((curr = stack.pop())) &#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>함수를 디자인할 때는 인풋값과 리턴값을 디자인하는 것입니다</p><p>이 함수가 무엇을 하는지는 어떤 시그니처를 가지고 있느냐에 달려있습니다</p><p>parser 가 동작하는 방향은 children 을 어떻게 채우느냐에 달려있습니다</p><p>텍스트 덩어리는 구조적인 객체화를 시켜서 리턴하고 싶습니다</p><p>일차원 루프로는 순환적인 문제를 풀 수 없습니다</p><p>스택 수준을 오갈 수 있어야지만 일관된 루프로 처리할 수 있습니다</p><p>대상을 처리하는 것은 하나의 알고리즘이지만, 대상을 바꾸려면 스택을 오가야 하기 때문입니다</p><p>그래서 스택 구조가 바깥에 있고, 안에 알고리즘 구조가 있는 식으로 구현되어있습니다</p><p>현재 처리중인 스택을 curr 라고 부르기로 합니다</p><p>stack 은 전체 stack 루프를 위한 것입니다</p><p>tag 라는 것은 가상의 DOM 객체를 의미합니다</p><p>동적으로 루프가 변하는 루프를 짜봐야 합니다</p><p>안에 있는 이너루프는 j 값이 확정적입니다, 이 루프는 중간에 변하지 않습니다</p><p>그에 비해서 스택 루프는 루프회수가 얼마나 될지 결정되지 않았습니다</p><p>이너루프에서 스택에 변하면 루프회수가 늘어나거나 줄어듭니다, 따라서 동적 계획에 따른 루프입니다</p><p>계획되지 않은 루프는 위험하다고 생각하시면 안 됩니다</p><p>고급루프는 모두 런타임에서 루프회수가 변합니다</p><p>input 값에 따라 루프회수가 변합니다</p><p>동적 계획에 따른 루프 : 루프를 결정하는 요인이 이너루프를 돌면서 변할 수 있는 루프</p><p>중급 이상에서는 오히려 이런 루프가 기본입니다</p><p>루프를 돌 때, 무한루프가 될 수 있으니 안정적으로 확정루프가 될 수 있는지 확인하고 루프를 쓰라는 것은 모두 주니어들만을 위한 이야기입니다</p><p>실제로 루프회수가 얼마나 될지는 루프를 돌다가 깨닫는 경우가 많습니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parser = <span class="function"><span class="params">input</span> =&gt;</span> &#123;</span><br><span class="line">  input = input.trim();</span><br><span class="line">  <span class="keyword">const</span> result = &#123; <span class="attr">name</span>: <span class="string">"ROOT"</span>, <span class="attr">type</span>: <span class="string">"node"</span>, <span class="attr">children</span>: [] &#125;;</span><br><span class="line">  <span class="keyword">const</span> stack = [&#123; <span class="attr">tag</span>: result &#125;];</span><br><span class="line">  <span class="keyword">let</span> curr,</span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    j = input.length;</span><br><span class="line">  <span class="keyword">while</span> ((curr = stack.pop())) &#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">      <span class="keyword">const</span> cursor = i;</span><br><span class="line">      <span class="keyword">if</span> (input[cursor] === <span class="string">"&lt;"</span>) &#123;</span><br><span class="line">        <span class="comment">// A, B의 경우</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// C의 경우</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>처음부터 끝까지 쭉 훑는 것을 스캐너라고 부른다</p><p>이너루프는 받아온 문자열을 처음부터 끝까지 도는 것이니 스캐너이다</p><p>이너루프안에서 로직계산시에 i 를 건들일 수 있는데 i 는 루프를 결정하는 것이므로 위험하므로 i 를 cursor 에 대입함</p><p>&lt;로 시작하면 태그로 볼 수 있다, 태그가 아니라면 C 즉 TEXT 타입이다</p><p>C 가 더 쉬우니 TEXT 처리부터 진행한다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parser = <span class="function"><span class="params">input</span> =&gt;</span> &#123;</span><br><span class="line">  input = input.trim();</span><br><span class="line">  <span class="keyword">const</span> result = &#123; <span class="attr">name</span>: <span class="string">"ROOT"</span>, <span class="attr">type</span>: <span class="string">"node"</span>, <span class="attr">children</span>: [] &#125;;</span><br><span class="line">  <span class="keyword">const</span> stack = [&#123; <span class="attr">tag</span>: result &#125;];</span><br><span class="line">  <span class="keyword">let</span> curr,</span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    j = input.length;</span><br><span class="line">  <span class="keyword">while</span> ((curr = stack.pop())) &#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">      <span class="keyword">const</span> cursor = i;</span><br><span class="line">      <span class="keyword">if</span> (input[cursor] === <span class="string">"&lt;"</span>) &#123;</span><br><span class="line">        <span class="comment">// A, B의 경우</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> idx = input.indexOf(<span class="string">"&lt;"</span>, cursor);</span><br><span class="line">        curr.tag.children.push(&#123;</span><br><span class="line">          type: <span class="string">"text"</span>,</span><br><span class="line">          text: input.substring(cursor, idx)</span><br><span class="line">        &#125;);</span><br><span class="line">        i = idx;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  a</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span>&gt;</span>b<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  c</span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span>/&gt;</span></span><br><span class="line">  d</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><div> 뒤부터 <a> 앞까지는 모두 텍스트로 볼 수 있다</a></div></p><p>현재 바라보고 있는 스택에 있는 tag 의 자식에 텍스트 노드를 집어넣는다</p><p>그리고 그것을 처리해준 뒤 시점으로 i 를 이동시킨다</p><p>읽기에도 사용하고 쓰기에도 사용하면 혼란스러울 수 있으니<br>읽기 즉 조회 용도로 cursor 를 만들어서 알고리즘에서 사용하고,<br>실제로 인덱스를 옮겨야 하는 이벤트 시점에만 i 를 업데이트한다</p><p>코드가 별 것 아닐 때 역할을 인식해야 한다</p><p>이 역할은 독립적인가?</p><p>&lt;를 찾기 직전까지를 묶어서 텍스트 노드로 만들어서 현재 스택의 자식으로 넣어준다 라는 알고리즘이 역할상 독립적입니다</p><p>그렇다면 즉시 함수화 시킨다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> textNode = <span class="function">(<span class="params">input, cursor, curr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> idx = input.indexOf(<span class="string">"&lt;"</span>, cursor);</span><br><span class="line">  curr.tag.children.push(&#123;</span><br><span class="line">    type: <span class="string">"text"</span>,</span><br><span class="line">    text: input.substring(cursor, idx)</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> idx;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>역할이 분리된 순간 즉시 함수로 간다, 코드 관리를 위해서</p><p>나중에 텍스트 노드에 더 많은 기능을 넣고 싶으면 함수만 수정하면 된다</p><p>단 cursor 나 curr 는 지역변수가 아니다, 그렇기에 인자로 받을 수 밖에 없다</p><p>코드를 그대로 보내고 모자란 것들을 인자로 만든다</p><p>바깥 쪽에 있는 프리미티브 변수를 갱신해야 할 때는 return 을 사용하여 바깥 쪽에서 갱신하도록 함</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> textNode = <span class="function">(<span class="params">input, cursor, curr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> idx = input.indexOf(<span class="string">"&lt;"</span>, cursor);</span><br><span class="line">  curr.tag.children.push(&#123;</span><br><span class="line">    type: <span class="string">"text"</span>,</span><br><span class="line">    text: input.substring(cursor, idx)</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> idx;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parser = <span class="function"><span class="params">input</span> =&gt;</span> &#123;</span><br><span class="line">  input = input.trim();</span><br><span class="line">  <span class="keyword">const</span> result = &#123; <span class="attr">name</span>: <span class="string">"ROOT"</span>, <span class="attr">type</span>: <span class="string">"node"</span>, <span class="attr">children</span>: [] &#125;;</span><br><span class="line">  <span class="keyword">const</span> stack = [&#123; <span class="attr">tag</span>: result &#125;];</span><br><span class="line">  <span class="keyword">let</span> curr,</span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    j = input.length;</span><br><span class="line">  <span class="keyword">while</span> ((curr = stack.pop())) &#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">      <span class="keyword">const</span> cursor = i;</span><br><span class="line">      <span class="keyword">if</span> (input[cursor] === <span class="string">"&lt;"</span>) &#123;</span><br><span class="line">        <span class="comment">// A, B의 경우</span></span><br><span class="line">      &#125; <span class="keyword">else</span> i = textNode(input, cursor, curr);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>역할을 인식한 순간 함수화를 하지 못하면 끝장이다, 겉잡을 수 없게 된다</p><p>이 시점에 분리해야지만 가능하다, 나중에 뜯어서 분리하려고 하면 새로 짜는 수 밖에 없다</p><p>이미 너무 많이 오염되어있을 것, 인식하자마자 바꿔야 한다</p><p>input 과 cursor 는 값에 의한 복사니까 문제없지만 curr 는 객체이니 나쁜 것은 아닌가?</p><p>나쁘다, 그러나 방지하려면 curr 를 받지 않고 idx 와 텍스트 노드 객체를 함께 담아 배열로 리턴하여 바깥 쪽에서 하나는 i 를, 하나는 curr 를 수정하는 식으로 구현할 수도 있다</p><p>코드는 응집성을 가지면서 결합도를 낮춰야 한다, 그 밸런스를 맞춰야 한다, 둘 모두를 추구할 수는 없다</p><p>여기서는 응집성을 추구한 것, 항상 선택의 기로에 서게 됩니다</p><p>만약 위처럼 curr 를 받지 않으면 응집성과 의존성 모두 낮아진다</p><p>항상 의사결정을 할 수 밖에 없습니다,</p><p>밸런스를 어떻게 지킬 것이냐는 상황에 따라 다르기 때문에 그 센스를 갖기가 어려워서 좋은 개발자가 되기 힘든 것이다</p><p>실무에서는 정답을 하나로 정할 수 없습니다, 항상 밸런스 문제가 있습니다</p><p>&lt; 라는 weak 한 것에 의존하여 분기처리를 해도 되는가? HTML 도 그렇다</p><p>그래서 &lt;으로 이스케이프하지 않으면 &lt;를 발동 트리거로 쓸 수 없다</p><p>닫는 태그(&gt;)는 발동 트리거가 아니기 때문에 무관하다</p><p>이런 parser 들을 구현하다보면 separator 혹은 token 이라고 불리는 문자열들이 만들어지기 마련이다</p><p>얘네들은 값으로 쓰고 싶다면 이스케이프 처리가 필요하다</p><p>중요한 요령은 무조건 쉬운 것부터 처리한다는 것</p><p>왜 그런가? 쉬운 코드는 의존성이 낮고 독립된 기능일 가능성이 높습니다</p><p>쉬운 것부터 구현해야 그것을 의존하는 다른 코드를 짜기가 수월합니다</p><p>복잡한 것부터 짜면 자기 것인줄 알았던 부분이 공유되어야 하는 부분도 크고,</p><p>남에게 의존할 것이 있었는데 자기가 처리하게 되면서 중복도 생겨나곤 합니다</p><p>되도록이면 쉬운 것부터 짜야 합니다</p><p>그래야지 더 견고하고 의존성이 낮은 모듈로부터 의존성 높은 모듈을 짜나갈 수 있습니다</p><p>항상 쉬운 것부터 짜세요</p><p>&lt; 로 발동되는 케이스는 열린 태그, 닫힌 태그, self 종료 태그(<img>) 세 가지로 나눌 수 있습니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> textNode = <span class="function">(<span class="params">input, cursor, curr</span>) =&gt;</span> &#123;...&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parser = <span class="function"><span class="params">input</span> =&gt;</span> &#123;</span><br><span class="line">  input = input.trim();</span><br><span class="line">  <span class="keyword">const</span> result = &#123; <span class="attr">name</span>: <span class="string">"ROOT"</span>, <span class="attr">type</span>: <span class="string">"node"</span>, <span class="attr">children</span>: [] &#125;;</span><br><span class="line">  <span class="keyword">const</span> stack = [&#123; <span class="attr">tag</span>: result &#125;];</span><br><span class="line">  <span class="keyword">let</span> curr,</span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    j = input.length;</span><br><span class="line">  <span class="keyword">while</span> ((curr = stack.pop())) &#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">      <span class="keyword">const</span> cursor = i;</span><br><span class="line">      <span class="keyword">if</span> (input[cursor] === <span class="string">"&lt;"</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> idx = input.indexOf(<span class="string">'&gt;'</span>, cursor);</span><br><span class="line">        i = idx + <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> i = textNode(input, cursor, curr);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>indexOf 의 두 번째 인자를 주지 않으면 우리가 의도한 곳을 찾지 못할 것입니다</p><p>세 가지 케이스 중에 무엇인지와 무관하게 그 다음 번 i 가 무엇인지는 확정지을 수 있습니다</p><p>A 와 B 케이스의 공통점은 &lt;로 시작해서 &gt;로 끝난다는 것, 즉 태그이다</p><p>코드를 잘 짜면 코드를 읽을 수 있습니다</p><p>케이스의 공통점을 찾아서 먼저 처리해준다, 코드가 중복되지 않도록</p><p>이렇게 바라보지 않으면 똑같은 행동을 세 번 처리하게 되고 나중에 중복을 제거하기가 어려워진다</p><p>그럴 것이면 미리 눈을 훈련해서 공통점을 추출할 수 있도록 하는 수 밖에 없습니다</p><p>가볍게 보지 말고, 함부로 보지 말고, 더 깊게 바라보세요</p><p>얘네들은 분명 친척일거야 라는 관점으로-</p><p>똑같은 애들부터 찾아서 처리해야 합니다</p><p>남들이 짠 코드에도 많은 고민과 의도가 숨겨져있을 것이라 생각하고 바라보셔야 합니다</p><p>오픈소스나 프로개발자들이 짠 코드에는 굉장히 많은 메타포가 숨어있습니다</p><p>언어 사용에 익숙한 사람들에게는 그것이 읽힙니다</p><p>한국어로 다양하게 노란색을 표현해도 뉘앙스를 느끼시듯이 언어에 익숙해지면 코드를 보고 뉘앙스를 느낍니다 똑같이</p><p>그러려면 여러분들이 뉘앙스를 표현할만큼 언어를 깊이 써야 합니다</p><p>코드에 다 의도가 있습니다</p><p><div> 와 <img>는 태그를 연다는 공통점이 있습니다, 는 외톨이</div></p><p>태그를 열면 어떤 일이 일어나야 하는가? 태그가 닫힐 때까지의 그 이후 내용들은 모두 해당 태그의 자식이 되어야 함</p><p>물론 <img>는 열리자마자 닫혀서 그 이후 태그들에게 내용들이 향해야 곳에 주지 않지만, 열어서 새로운 태그를 만들어냈다는 점은 동일</p><p>사물을 보고 데이터 애널리시스를 하는데 추상화된 공통점과 재귀적인 로직을 발견하는 것이 우리의 몫입니다</p><p>그것을 못하면 코드는 계속 길어지고 if 로 분기만 하게 됩니다</p><p>단위테스트를 만들거나 TDD 를 해도 나쁜 개발자는 나쁜 데이터 애널리시스를 하고 나쁜 로직을 짰기 때문에</p><p>테스트 케이스를 100 개 만들면 100 개의 케이스가 통과한 것만 증명하지, 101 번째 케이스에 문제가 없다는 것을 증명하지 못합니다</p><p>원래 코드가 나쁘거나 설계가 잘못 되었으면 TDD 를 해도 소용이 없다</p><p>TDD 를 도입하는 것과 데이터를 바라보거나 추상적인 로직을 이해하는 것은 별개의 문제이다</p><p>어차피 데이터 애널리시스를 잘못하면 무엇을 해도 나쁜 코드가 나온다</p><p>좋은 코드를 짜는 비밀은 TDD 에 있는 것이 아니라 데이터를 이해하고 재귀적인 로직을 찾아내거나 추상화된 공통점을 찾아낼 수 있는지 역할을 이해하는지 여부에 달려있다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> textNode = <span class="function">(<span class="params">input, cursor, curr</span>) =&gt;</span> &#123;...&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parser = <span class="function"><span class="params">input</span> =&gt;</span> &#123;</span><br><span class="line">  input = input.trim();</span><br><span class="line">  <span class="keyword">const</span> result = &#123; <span class="attr">name</span>: <span class="string">"ROOT"</span>, <span class="attr">type</span>: <span class="string">"node"</span>, <span class="attr">children</span>: [] &#125;;</span><br><span class="line">  <span class="keyword">const</span> stack = [&#123; <span class="attr">tag</span>: result &#125;];</span><br><span class="line">  <span class="keyword">let</span> curr,</span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    j = input.length;</span><br><span class="line">  <span class="keyword">while</span> ((curr = stack.pop())) &#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">      <span class="keyword">const</span> cursor = i;</span><br><span class="line">      <span class="keyword">if</span> (input[cursor] === <span class="string">"&lt;"</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> idx = input.indexOf(<span class="string">'&gt;'</span>, cursor);</span><br><span class="line">        i = idx + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (input[cursor + <span class="number">1</span>] === <span class="string">'/'</span>) &#123;&#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (input[idx - <span class="number">1</span>] === <span class="string">'/'</span>) &#123;&#125;</span><br><span class="line">          <span class="keyword">else</span> &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> i = textNode(input, cursor, curr);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>input[cursor + 1] === &#39;/&#39;</code>는  케이스</p><p>그 뒤에 <code>input[idx - 1] === &#39;/&#39;</code> 여부로 <img> (true)와 <div> (false)를 나눈다</div></p><p>멘탈 모델이 그려지면, 코드로도 똑같이 표현되는 것이 정상이에요, 그래야 유지보수를 할 수 있습니다</p><p>그렇기 때문에 주석이 불필요합니다</p><p>그럼에도 주석이 필요하다고 느낀다면 개발자를 그만 둘 때입니다</p><p>여는 태그는 닫는 태그를 알아야 하고, 닫는 태그는 여는 태그를 알아야 하니, <img>부터 구현하도록 합니다</p><p>현실 세계를 인식해서 그 현실 세계를 해결할 코드를 짠다면 반대로 현실 세계에 대입해도 코드가 정확히 매핑되어야 합니다</p><p>바른 데이터 애널리시스를 했다면 코드는 거의 매핑이다, 어렵지 않습니다</p><p>여러분들이 알고리즘을 짜는데 어려움을 겪거나 애플리케이션을 못 만들어내겠다면 데이터 애널리시스에 실패한 것입니다</p><p>데이터 애널리시스를 잘 했으면 바로 매핑됩니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> textNode = <span class="function">(<span class="params">input, cursor, curr</span>) =&gt;</span> &#123;...&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parser = <span class="function"><span class="params">input</span> =&gt;</span> &#123;</span><br><span class="line">  input = input.trim();</span><br><span class="line">  <span class="keyword">const</span> result = &#123; <span class="attr">name</span>: <span class="string">"ROOT"</span>, <span class="attr">type</span>: <span class="string">"node"</span>, <span class="attr">children</span>: [] &#125;;</span><br><span class="line">  <span class="keyword">const</span> stack = [&#123; <span class="attr">tag</span>: result &#125;];</span><br><span class="line">  <span class="keyword">let</span> curr,</span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    j = input.length;</span><br><span class="line">  <span class="keyword">while</span> ((curr = stack.pop())) &#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">      <span class="keyword">const</span> cursor = i;</span><br><span class="line">      <span class="keyword">if</span> (input[cursor] === <span class="string">"&lt;"</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> idx = input.indexOf(<span class="string">'&gt;'</span>, cursor);</span><br><span class="line">        i = idx + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (input[cursor + <span class="number">1</span>] === <span class="string">'/'</span>) &#123;&#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> name, isClose;</span><br><span class="line">          <span class="keyword">if</span> (input[idx - <span class="number">1</span>] === <span class="string">'/'</span>) &#123;</span><br><span class="line">            name = input.substring(cursor + <span class="number">1</span>, idx - <span class="number">1</span>), isClose = <span class="literal">true</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            name = input.substring(cursor + <span class="number">1</span>, idx), isClose = <span class="literal">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> i = textNode(input, cursor, curr);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>대응되도록 똑같은 쌍을 만들어줍니다, 느껴지는 차이를 그대로 코드로 옮겨온 것입니다, 한국어를 코드로 번역하는 과정</p><p>정확하게 한국어로 상황을 인식할 수 있다면 코드는 그냥 번역하면 됩니다</p><p>번역할 때 뉘앙스를 줘라, if else 라는 두 가지 이지선다를 주고 이지선다가 똑같이 동형으로 똑같은 리듬이 느껴지는 것을 원했습니다</p><p>조건에 따라 약간의 차이가 존재한다는 뉘앙스가 전달되어야 합니다</p><p>문학적인 표현이 필요한게 아니라, 데이터 애널리시스에 대한 관점을 정확하게 표현하는 것은 유지보수를 위해 항상 필요합니다</p><p>섬세하다고 느껴지시면 맞습니다, 고급 개발자들은 언어에 익숙하기 때문에 섬세하게 짭니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> idx = input.indexOf(<span class="string">"&gt;"</span>, cursor);</span><br><span class="line">i = idx + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (input[cursor + <span class="number">1</span>] === <span class="string">"/"</span>) &#123;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> name, isClose;</span><br><span class="line">  <span class="keyword">if</span> (input[idx - <span class="number">1</span>] === <span class="string">"/"</span>) &#123;</span><br><span class="line">    (name = input.substring(cursor + <span class="number">1</span>, idx - <span class="number">1</span>)), (isClose = <span class="literal">true</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    (name = input.substring(cursor + <span class="number">1</span>, idx)), (isClose = <span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> tag = &#123; name, <span class="attr">type</span>: <span class="string">"node"</span>, <span class="attr">children</span>: [] &#125;;</span><br><span class="line">  curr.tag.children.push(tag);</span><br><span class="line">  <span class="keyword">if</span> (!isClose) &#123;</span><br><span class="line">    stack.push(&#123; tag, <span class="attr">back</span>: curr &#125;);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>차이점을 처리했다면 더이상 차이를 케이스로 인식하지 않아도 됩니다</p><p>원래 케이스였던 것을 값으로 흡수한 뒤에는 더이상 케이스를 인식하지 않고 값을 사용하는 일반화된 알고리즘이 나옵니다</p><p>메모리와 연산은 교환됩니다</p><p>차이를 일으키는 연산을 메모리로 흡수한 다음에, 메모리를 가리키는 하나의 연산만 기술하면 됩니다</p><p>name 을 화이트리스트라고 부릅니다, 함수의 인자를 필터링해서 안정적인 조건을 만든다든지 서버에서 내려준 JSON 을 View 가 소비하기 좋게 바꾼다는지 등</p><p>알고리즘은 그러한 복잡성을 모두 제거하고 복잡성이 모두 제거되어 안정화된 상태에서 화이트리스트를 가지고 알고리즘을 하나만 구현하는 것이 제일 최선이다</p><p>알고리즘으로 함부로 돌입하지 말고, 화이트리스트 작성에 굉장히 공을 많이 들인 다음에 완전히 정제되어있는 화이트리스트용 알고리즘만 하나 구현하시는 것이 최선입니다, 가장 유지보수도 수월합니다</p><p>번역층을 거치면 화이트리스트를 기반으로 이 알고리즘은 잘 동작할 것이라고 보장됩니다</p><p>stack 에 push 후 break 를 하는 것은 마치 함수를 호출할 때 리턴포인트를 알고 끝나면 그곳으로 돌아가는 것의 수동 버전과 같습니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> elementNode = <span class="function">(<span class="params">input, cursor, idx, curr, stack</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> name, isClose;</span><br><span class="line">  <span class="keyword">if</span> (input[idx - <span class="number">1</span>] === <span class="string">'/'</span>) &#123;</span><br><span class="line">    name = input.substring(cursor + <span class="number">1</span>, idx - <span class="number">1</span>), isClose = <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    name = input.substring(cursor + <span class="number">1</span>, idx), isClose = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> tag = &#123;name, <span class="attr">type</span>: <span class="string">'node'</span>, <span class="attr">children</span>: []&#125;;</span><br><span class="line">  curr.tag.children.push(tag);</span><br><span class="line">  <span class="keyword">if</span> (!isClose) &#123;</span><br><span class="line">    stack.push(&#123; tag, <span class="attr">back</span>: curr &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> textNode = <span class="function">(<span class="params">input, cursor, curr</span>) =&gt;</span> &#123;...&#125;;</span><br><span class="line"><span class="keyword">const</span> parser = <span class="function"><span class="params">input</span> =&gt;</span> &#123;</span><br><span class="line">  input = input.trim();</span><br><span class="line">  <span class="keyword">const</span> result = &#123; <span class="attr">name</span>: <span class="string">'ROOT'</span>, <span class="attr">type</span>: <span class="string">'node'</span>, <span class="attr">children</span>: [] &#125;, stack = [];</span><br><span class="line">  <span class="keyword">let</span> curr = &#123; <span class="attr">tag</span>: result &#125;, i = <span class="number">0</span>, j = input.length;</span><br><span class="line">  <span class="keyword">while</span> (curr = stack.pop()) &#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">      <span class="keyword">const</span> cursor = i;</span><br><span class="line">      <span class="keyword">if</span> (input[cursor] === <span class="string">'&lt;'</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> idx = input.indexOf(<span class="string">'&gt;'</span>, cursor);</span><br><span class="line">        i = idx + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (input[cursor + <span class="number">1</span>] === <span class="string">'/'</span>) &#123;</span><br><span class="line">          curr = curr.back;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (elementNode(input, cursor, idx, curr, stack)) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> i = textNode(input, cursor, curr);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>break 는 외부 제어 통제이므로 elementNode 함수 안에서 통제할 수 없으므로 flag 변수로 리턴해줍니다</p><p>코드의 가독성은 어떻게 확보하는가?</p><p>변수명, 코드컨벤션 등으로 가독성이 확보되지 않습니다</p><p>알고리즘, 수학적 함수, 연산 등은 어렵습니다</p><p>컴퓨터가 연산해야 할 것을 머리속으로 생각하면서 읽어야 하기 때문입니다</p><p>어떤 코드가 읽기 쉬운가? 역할에게 위임하는 코드</p><p>역할을 인식해서 역할에게 위임하는 코드를 짜야 합니다, 오직 그것만이 쉽게 합니다</p><p>알고리즘 등은 원래 무조건 어렵습니다</p><p>적절한 역할모델로 위임되어서 그것들간의 통신과 협업만 볼 수 있는 코드가 가독성 높은 코드입니다</p><p>console.log(parser(<code>&lt;div&gt;a&lt;a&gt;b&lt;/a&gt;c&lt;img/&gt;d&lt;/div&gt;</code>));</p><p>HTML 에서 태그간 엔터만 쳐도 텍스트노드가 생성됩니다</p><p>HTML 압축은 DOM 의 렌더링 대상을 줄여줄 수 있게 됩니다</p><p>CSS, JS 압축보다 HTML 압축을 하면 생성되는 노드수를 줄일 수 있다, 브라우저 부하를 줄일 수 있습니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> elementNode = <span class="function">(<span class="params">input, cursor, idx, curr, stack</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> isClose = input[idx - <span class="number">1</span>] === <span class="string">"/"</span>;</span><br><span class="line">  <span class="keyword">const</span> tag = &#123;</span><br><span class="line">    name: input.substring(cursor + <span class="number">1</span>, idx - (isClose ? <span class="number">1</span> : <span class="number">0</span>)),</span><br><span class="line">    type: <span class="string">"node"</span>,</span><br><span class="line">    children: []</span><br><span class="line">  &#125;;</span><br><span class="line">  curr.tag.children.push(tag);</span><br><span class="line">  <span class="keyword">if</span> (!isClose) &#123;</span><br><span class="line">    stack.push(&#123; tag, <span class="attr">back</span>: curr &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>중복된 코드를 줄이는 수준은 우리의 수준에 달려있어요</p><p>켄트벡이 말하길, 중복은 제거하는게 아니라 발견하는 것이라 했습니다</p><p>프로그래머의 수준에 따라서 코드 수준의 중복, 아키텍처 수준의 중복, 데이터 상의 중복 등을 깨닫게 됩니다</p><p>궁극적으로 개발 중복을 다 인식하게 되면, 개발을 모두 직접 짜는 행위가 없어지고 솔루션화 됩니다</p><p>처음에는 케이스 바이 케이스로 코드로 만들다가 공통되는 부분들이 자동으로 처리되다가 나중에는 코드로 구현할 것이 하나도 없이 명령만으로 다 되게끔 바뀝니다</p><p>코드를 이따금씩 바라보면서 중복이 보일 때마다 내 실력이 올라갔구나 라고 느끼시면 됩니다</p><p>코드 수준의 중복을 바라보는 것과 아키텍처 수준의 중복을 발견해내는 것이 동시에 올라가는 것이 아니라 따로 따로 훈련해야 올라가게 되어있습니다</p><p>코드 수준의 중복에 대한 이해는 언어에 대한 바른 이해와 문법적인 해박한 사용방법에 대해 이해할수록 높일 수 있습니다</p><p>의미를 훼손하지 않고 줄였음에도 초보자들에게는 암호처럼 보일 수 있습니다</p><p>왜냐하면 초보자들은 언어를 네이티브처럼 쓰지 않기 때문입니다</p><p>아키텍처 레벨은 역할 관계를 인식하고, 책임이 어디까지 닿아있는지, 얼마나 확장가능성이 있는지 등을 보는 눈에서부터 어디가 중복이고 어디를 레이어로 나눌지에 대한 눈이 생겨야 합니다</p><p>데이터 중복은 전통적인 RDB 에 있는 정규화를 비롯해서 다양한 데이터에 대한 중복을 제거하는 안정적인 로직들이 많이 있습니다</p><p>제가 코드를 인정하는 기준은 딱 하나에요, 컴퓨터가 인정하면 나도 인정</p><p>여러분들이 남의 코드를 바라보면서 스트레스를 받는 이유는, 자꾸 비이성적인 것들이 프레임처럼 작용해서 가로막고 있어서 코드를 못 읽게 만들기 때문입니다</p><p>심리적인 장벽이 힘들게 만듭니다</p><p>남의 코드를 바라보면서 내가 원하는 스타일이 아니면 힘들게 여기는 것입니다</p><p>심리적인 장벽을 없애고 선입견을 내려놓고 바라보면 그냥 보입니다</p><p>사람들은 자기 코드를 인정해주고 잘 돌아가지 않는 부분에 대해서 조언을 해주거나 더 좋은 코드가 되기 위한 알고리즘을 제안해주는 사람을 따르기 마련입니다</p><p>여러분들이 선입견을 버리지 않으면 그렇지 못한 사람이 될 것입니다</p><p>코드는 잘 동작하고 바른 로직으로 되어있으면 다 바른 코드입니다</p><p>스타일은 별로 중요하지 않습니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parser = <span class="function"><span class="params">input</span> =&gt;</span> &#123;</span><br><span class="line">  input = input.trim();</span><br><span class="line">  <span class="keyword">const</span> result = &#123; <span class="attr">name</span>: <span class="string">"ROOT"</span>, <span class="attr">type</span>: <span class="string">"node"</span>, <span class="attr">children</span>: [] &#125;,</span><br><span class="line">    stack = [];</span><br><span class="line">  <span class="keyword">let</span> curr = &#123; <span class="attr">tag</span>: result &#125;,</span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    j = input.length;</span><br><span class="line">  <span class="keyword">while</span> ((curr = stack.pop())) &#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">      <span class="keyword">const</span> cursor = i;</span><br><span class="line">      <span class="keyword">if</span> (input[cursor] === <span class="string">"&lt;"</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> idx = input.indexOf(<span class="string">"&gt;"</span>, cursor);</span><br><span class="line">        i = idx + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (input[cursor + <span class="number">1</span>] === <span class="string">"/"</span>) &#123;</span><br><span class="line">          curr = curr.back;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (elementNode(input, cursor, idx, curr, stack)) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> i = textNode(input, cursor, curr);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>HTML 은 멀티 스택 상황이 발생하지 않습니다, 컨텍스트가 동시에 두 개가 진행되지 않습니다, 이런 경우에는 스택 배열이 필요없고 하나의 변수에서만 교체해주면 됩니다, 하지만 많은 경우에는 여러 개를 동시에 유지하면서 따로 따로 주기를 가지고 컨텍스트가 교체되곤 합니다, 지금은 curr 하나만 가지고 있으면 됩니다</p><p>코드를 만드는데 차이는 디테일에서 생겨납니다, 오늘까지 해서 함수를 배우신 것입니다, 게다가 함수형 프로그래밍은 다루지 않았고, 루틴을 다루는 방법만 배운 것입니다, 루틴에 먼저 익숙해지는 것이야말로 중급개발자로 가는 기본이고, 루틴에 익숙하지 않은 사람은 객체구조를 만들어도 어차피 엉망으로 만들게 되어있습니다</p><p>Q0. 위 구조를 꼬리물기 최적화되는 재귀로 바꿀 수는 없는가? (위를 2 단 루프로 구성한 것은 stack point 를 인식해서 재귀함수로 만들기 더 쉬우시라는 의미였다, 이너루프만 함수로 만들면 되기 때문에)</p><p>Q1. stack 을 벗어날 때는 바깥 쪽 stack 으로 나가지 않으면서 왜 stack 을 추가할 때는 바깥 쪽 stack 으로 나갔다가 들어오지? stack 구조를 모두 지우고 curr 를 교체하는 것만으로 구현할 수 있지 않은가?</p><p>Q2. JSON 문자열을 받아 JSON Object 를 리턴해주는 JSON Parser, HTML 에서의 C 타입에 해당하는 것이 string, integer, boolean, null 인 것, 그리고 object 시작하면 object 닫아야 하고, array 시작했으면 array 닫아야 함, “ 안에 중괄호나 대괄호가 있으면 그저 문자입니다, HTML 와 달리 이스케이프를 지원해주어야 합니다</p><p>Q3. 속성이 포함된 html 을 파싱하기 <code>&lt;div style=&quot;background:red&quot; class=&quot;test&quot;&gt;...&lt;/div&gt;</code> 이런 식으로 태그 안의 여러 속성을 각 노드에서 attribute 라는 별도의 배열에 저장하기</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;어플리케이션을 짤 때, 대부분의 경우는 인식하여 구조화해서 프로그래밍 해야 하는 경우가 대부분&lt;/p&gt;
&lt;p&gt;HTML 파서를 짤려면 HTML 을 보고 구조적으로 분석해야 함&lt;/p&gt;
&lt;p&gt;구조화를 무한히 하면 무한한 케이스가 될 뿐, 구조화의 목표는
      
    
    </summary>
    
      <category term="Dev" scheme="https://eclatant.io/categories/Dev/"/>
    
    
      <category term="Dev" scheme="https://eclatant.io/tags/Dev/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 교과서</title>
    <link href="https://eclatant.io/2018/08/12/NodeJS-TextBook/"/>
    <id>https://eclatant.io/2018/08/12/NodeJS-TextBook/</id>
    <published>2018-08-11T15:00:00.000Z</published>
    <updated>2018-08-12T14:30:24.927Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1장-Node-js-시작하기"><a href="#1장-Node-js-시작하기" class="headerlink" title="1장 Node.js 시작하기"></a>1장 Node.js 시작하기</h2><h3 id="1-1-핵심-개념이해하기"><a href="#1-1-핵심-개념이해하기" class="headerlink" title="1.1 핵심 개념이해하기"></a>1.1 핵심 개념이해하기</h3><p>Node.js란 무엇인가?</p><p>Node.js, JavaScript Runtime Environment</p><p>런타임은 특정 언어로 만든 프로그램들을 실행할 수 있는 환경</p><p>따라서 는 자바스크립트를 웹 브라우저 밖에서 실행할 수 있게 해주는 환경</p><p>Node.js는 두 가지 버전 체계를 운영함, LTS(Long Term Support) / Current</p><p>LTS의 대상이 되는 버전은 짝수버전이며, LTS 스케쥴은 여기에서 확인할 수 있다 <a href="https://github.com/nodejs/Release#release-schedule" target="_blank" rel="noopener">Link</a></p><p>Node.js 설치 방법은 다양하나, 여러 가지 버전을 동시에 관리해야 한다면 <a href="https://github.com/nodenv/nodenv" target="_blank" rel="noopener">nodenv</a> 를 추천함</p><p>Node.js 내부 구조는 Node.js Core Library, Node.js Bindings, V8(자바스크립트 엔진), libuv(비동기 I/O) 로 되어있다고 함</p><p>Node.js는 libuv 라이브러리를 통해 이벤트 기반, 논 블록킹 I/O 모델을 차용했다고 하는데, 두 가지는 각각 어떤 의미인가?</p><hr><p>이후 책의 설명을 보기 전에, Blocking, NonBlocking, Sync, Async 에 대해 살펴보자</p><p>Blocking에 대한 요구사항은 내가 만들고자 하는 애플리케이션이 속한 업계마다 다를 것, 전화통화를 처리해야 한다면 Blocking에 대한 요구사항이 대단히 높을 것, 이 외에도 브라우저는 5초 등 OS 레벨에서 제한을 두는 경우도 있다, Blocking 시에는 멈춰져있지만 OS에서 제어하는 영역 내에서 실행되는 코드들은 OS가 강제 중단이 얼마든지 가능하다, 스마트폰에서 전화가 오면 그 어떤 동작보다 우선할 수 있는 것도 동일한 원리, Window에서 blue screen이 뜨는 것은 애플리케이션을 잘못 만든 경우인 것이 다반사이고, MacOS에서는 OS에서 제어할 수 있는 영역만 쓸 수 있게 하므로 권한이 제한되어있어 그런 경우가 없어 보이는 것일 뿐이다</p><p>Blocking Function 여부는 우리가 함수에 어떤 인자를 전달하느냐에 따라 블록킹 현상이 심해지느냐에 달려있다</p><p>weakset 자료구조를 사용하면 담겨있는 값의 개수와 무관하게 값이 담겨있는지 여부를 확인하는데 소요되는 비용이 같으므로 이런 식의 접근 방법이 필요할 것</p><p>일부가 Blocking Function인 것만으로도 애플리케이션 전체가 Blocking에 빠질 수 있다, Blocking의 조합으로 인한 결과는 예측할 수 없다</p><p>안타깝게도 우리가 짜는 대부분의 로직은 흔히 Blocking이기 마련이다</p><p>엔터프라이즈 레벨을 지향한다는 것의 첫 걸음은 하나의 함수를 짤 때라도 Blocking Function이 아니도록 하는 것</p><p>배열 순회, 정렬은 배열 크기에 따라, DOM 순회는 DOM의 하위구조에 따라, 이미지 프로세싱은 이미지 크기에 따라 Blocking을 유발할 것</p><p>개발자가 되기 위해 6년에 걸쳐서 의사가 된다는 마음가짐으로 임한다면 함부로 Blocking Function을 짜지 못할 것</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="params">v</span> =&gt;</span> other(something(v), v * <span class="number">2</span>); f(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>위와 같은 코드가 있을 때, Blocking 여부를 예측할 수 있는가?</p><p>Blocking으로 인한 에러는 로그를 찍어보기도 전에 애플리케이션이 죽기 때문에 파악하기도 대단히 어려울 것</p><p>Blocking 회피방법</p><ul><li>시분한 운영체제의 동시 실행 : 순차적인 실행에 비해 컨텍스트 스위칭으로 인해 훨씬 오래 걸림</li><li>자바스크립트 쓰레드<ul><li>자바스크립트는 싱글 쓰레드라고 알려져있지만 그렇지 않다, UI와 자바스크립트를 처리하는 쓰레드가 싱글일 뿐, 하지만 현대의 대부분 OS는 UI를 변경하거나 메인 스크립트를 구동하는 쓰레드를 싱글 쓰레드로 제약한다, 그리고 그 해당 쓰레드를 감시한다</li><li>HTML5 스펙에는 우리가 직접 Background로 사용할 수 있는 Web Worker Thread가 존재함</li><li>자바스크립트 쓰레드는 무한루프를 돌고 있고 배열을 바라보고 있다, 해당 배열에 쌓이는 명령들에 언제 실행되어야 할지에 대한 프레임이 붙는다, 루프가 한 번 돌 때마다 1틱이 진행된다, 그러므로 메인 쓰레드는 명령큐에 있는 프레임들을 실행할 뿐이고, 그 외 쓰레드들에서 명령큐에 명령들을 프레임에 따라 담아둔다, 이러한 패턴을 서스펜션 패턴이라고 부른다, 다수의 공급자 쓰레드와 소비자 쓰레드를 나누어 중간에 명령큐와 같은 쿠션층을 만들어서 공급자는 쓰기만 하고 소비자는 해당하는 프레임마다 꺼내서 읽기(소비 및 명령 수행)만 한다, 따라서 메인 쓰레드가 하나의 명령을 꺼내서 처리하는 시간이 5초 이내여야 한다, 자바스크립트에서는 기본적으로 회피방식은 타임슬라이싱을 통해 여러 쓰레드에 스프레드시키는 것</li></ul></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1장-Node-js-시작하기&quot;&gt;&lt;a href=&quot;#1장-Node-js-시작하기&quot; class=&quot;headerlink&quot; title=&quot;1장 Node.js 시작하기&quot;&gt;&lt;/a&gt;1장 Node.js 시작하기&lt;/h2&gt;&lt;h3 id=&quot;1-1-핵심-개념이해하기
      
    
    </summary>
    
      <category term="node" scheme="https://eclatant.io/categories/node/"/>
    
    
      <category term="node" scheme="https://eclatant.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>실용적인 함수형 자바스크립트 Intro</title>
    <link href="https://eclatant.io/2018/07/09/Functional-Programming-Intro/"/>
    <id>https://eclatant.io/2018/07/09/Functional-Programming-Intro/</id>
    <published>2018-07-08T15:00:00.000Z</published>
    <updated>2018-08-20T04:28:37.749Z</updated>
    
    <content type="html"><![CDATA[<h1>자바스크립트로 알아보는 함수형 프로그래밍</h1><h2>함수형 프로그래밍 개요</h2><h3>함수형 프로그래밍 정의, 순수함수</h3><p>성공적인 프로그래밍이란?</p><ul><li>좋은 프로그램을 만드는 일<ul><li>사용성, 성능, 확장성, 기획 변경에 대한 대응력이 좋은 것</li></ul></li><li>위 사항들을 효율적이고 생산적으로 이루어지는 것이 성공적인 프로그래밍</li></ul><p>함수형 프로그래밍은 성공적인 프로그래밍을 위해 부수효과를 미워하고 조합성을 강조하는 프로그래밍 패러다임</p><ul><li>부수효과를 미워한다 =&gt; 순수함수를 만든다<ul><li>순수함수란?<ul><li>부수효과가 없음<ul><li>외부의 대상에 영향을 끼치지 않음</li><li>인자를 변경하지 않음</li><li>리턴 값 외에는 외부와 소통하는 것이 없음</li></ul></li><li>수학적 함수</li><li>인자가 동일하면 동일한 결과를 반환</li><li>상수적 자유변수를 참조할 수 없다는 것은 아님</li></ul></li><li>오류는 적고 안정성은 높다</li></ul></li></ul><ul><li>조합성을 강조한다 =&gt; 모듈화 수준을 높인다<ul><li>순수함수의 조합으로 프로그래밍 진행</li><li>모듈화 수준이 높다 = 생산성을 높인다<ul><li>모듈화 수준이 높다는 것은 성공적인 프로그래밍의 척도</li><li>재사용성이 높고 팀웍도 좋고 기획 변경에 대한 대응력이 높음</li></ul></li></ul></li></ul><p>순수함수란?</p><ul><li>인자가 동일하면 동일한 결과를 반환<ul><li>평가 시점이 중요하지 않음<ul><li>평가시점을 개발자가 다룰 수 있음<ul><li>다양한 로직과 이점을 취할 수 있음</li></ul></li><li>항상 동일한 결과를 리턴할 것이기에 안전하고 다루기 쉬운 함수이고 따라서 조합성을 강조시킬 수 있음<ul><li>다른 함수의 인자로 넘겨주거나, 전혀 다른 곳에서 함수를 평가시켜도 항상 동일한 결과를 리턴</li></ul></li><li>그렇지 않은 함수들은 평가 시점에 따라 결과가 달라지게 됨</li></ul></li></ul></li></ul><ul><li>부수효과가 없음<ul><li>리턴 외의 출력이 없음</li><li>인자를 변경하지 않음<ul><li>원하는 부분이 변형된 새로운 값을 만들어 리턴하는 방식으로 진행</li></ul></li></ul></li></ul><hr><h3>일급함수, add_maker, 함수로 함수 실행하기</h3><p>일급함수</p><ul><li>함수를 값으로 다룰 수 있음<ul><li>변수에 담을 수 있음</li><li>인자로 넘겨줄 수 있음</li></ul></li><li>런타임에서 언제든 정의할 수 있다</li><li>원할 때 평가할 수 있다<ul><li>다른 함수가 실행하도록 할 수 있음</li></ul></li></ul><p>일급함수 개념과 순수함수 특징을 이용해서 함수의 조합성을 높여나가는 것이 함수형 프로그래밍</p><p>평가 시점에서 자유로운 순수함수들을 만들고, 순수함수들을 값으로 가지고 다니면서 적절한 시점마다 평가를 하는 다양한 로직을 만들어나가는 것이 함수형 프로그래밍</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add_maker</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add10 = add_maker(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( add10(<span class="number">20</span>) ); <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><p>순수함수, 일급함수와 클로저가 함께 사용되는 예제</p><ul><li>내부함수는 자신의 입장에선 a를 변경하지 않고, 늘 같은 a를 바라보고 있는 순수함수</li><li>내부함수는 a를 참조하는 클로저</li><li>add_maker(10)의 결과를 add10에 담을 수 있는 것은 일급함수의 성질</li></ul><p>내 나름대로의 클로저 정의</p><ul><li>자유변수를 참조하는 함수</li><li>스코프</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f4</span>(<span class="params">f1, f2, f3</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> f3(f1() + f2());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  f4(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123; <span class="keyword">return</span> a * a; &#125;</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>함수가 어떤 함수들을 인자로 받아서 그 함수가 원하는 로직대로 원하는 시점에 원하는 인자를 적용하면서 프로그램을 완성해나가는 것이 함수형 프로그래밍</p><p>순수함수들을 조합하고, 최종적으로 어떠한 결과를 만들어가는 것</p><p>순수함수를 만들고 조합하는 평가시점과 방법, 어떤 로직 사이에서 평가를 할 것인지 결정하면서 큰 로직을 구성</p><p>비동기, 동시성을 확보할 수 있도록 원하는 시점까지 값으로 함수를 가지고 다니다가 원하는 시점 또는 필요한 부분에서 받아둔 함수를 여러 번 실행하는 등의 로직을 구현 가능</p><hr><h3>요즘 개발 이야기, 함수형 프로그래밍 정의</h3><p>요즘 개발 이야기</p><ul><li>재미/실시간성 : 라이브 방송, 실시간 댓글, 협업, 메신저</li><li>독창성/완성도 : 애니메이션, 무한스크롤, Masonry</li><li>더 많아져야하는 동시성 : 비동기 I/O, CSP, Actor, STM</li><li>더 빨라야하는 반응성/고가용성 : ELB, Auto Scailing, OTP Supervisor</li><li>대용량/정확성/병렬성 : MapReduce, Clojure Reducers</li><li>복잡도/MSA/… : 많아지고 세밀해지는 도구들</li></ul><p>스멀스멀 다가오는 FP</p><ul><li>좋아지는 하드웨어 성능과 컴파일러, 함수형 프로그래밍 기술, 좋아지는 분산/리액티브 환경, 동시성 + 병렬성 관련 기술, 성공적인 적용 사례와 영향</li></ul><p>마이클 포거스</p><ul><li>함수형 프로그래밍은 애플리케이션, 함수의 구성요소, 더 나아가서 언어 자체를 함수처럼 여기도록 만들고, 이러한 함수 개념을 가장 우선순위에 놓는다.</li><li>함수형 사고방식은 문제의 해결 방법을 동사(함수)들로 구성(조합)하는 것</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 데이터(객체) 기준</span></span><br><span class="line">duck.moveLeft();</span><br><span class="line">duck.moveRight();</span><br><span class="line">dog.moveLeft();</span><br><span class="line">dog.moveRight();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수 기준</span></span><br><span class="line">moveLeft(dog);</span><br><span class="line">moveRight(duck);</span><br><span class="line">moveLeft(&#123; <span class="attr">x</span>: <span class="number">5</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;);</span><br><span class="line">moveRight(dog);</span><br></pre></td></tr></table></figure><p>함수가 먼저 나오느냐, 객체가 먼저 나오느냐 (FP, OOP)</p><ul><li>객체지향에서는 데이터를 먼저 디자인하고, 그 데이터에 맞는 메소드를 만드는 방식으로 진행하고, 함수형은 함수를 만들고 함수에 맞게 데이터셋을 구성하는 방식으로 진행한다 (데이터의 형태를 함수를 사용할 수 있도록 디자인)</li></ul><p>왜? 보다는 어떻게!를 다루겠다고 하셨음, 어떻게를 알려면 어떻게 전환하는가? 전환해왔는가? 를 아는 것이 중요함</p><hr><h2>함수형으로 전환하기</h2><h3>회원 목록, map, filter</h3><p>응용형 함수, 콜렉션을 다루는 함수</p><p>함수형 프로그래밍에서는 원래 있는 값을 직접 변경하지 않고 변형된 새로운 값을 리턴합니다</p><p>중복을 제거하거나 추상화할 때 함수를 이용해서 프로그래밍하는 것이 함수형 프로그래밍</p><p>조건을 인자로 올 함수에게 위임</p><p>응용형 함수, 응용형 프로그래밍, 적용형 프로그래밍</p><ul><li>함수가 함수를 받아서 원하는 시점에 인자를 적용하는 형식으로 프로그래밍</li></ul><p>고차함수</p><ul><li>함수를 받거나, 함수를 리턴하거나, 인자로 받은 함수를 실행</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tempUsers = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; users.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (users[i].age &gt;= <span class="number">30</span>) &#123;</span><br><span class="line">    tempUsers.push(users[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tempUsers);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 프로그래머가 _filter 함수를 호출할 때, 어떤 데이터가 넘어가는지와 처리하고자 하는 조건에 대해 인지하고 있기에 재활용성이 매우 높은 함수가 되었음</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// users -&gt; list로 일반화 가능</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_filter</span>(<span class="params">users, predicate</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newList = [];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; users.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (predicate(users[i])) &#123;</span><br><span class="line">      newList.push(users[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> newList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> names = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; tempUsers.length; i++) &#123;</span><br><span class="line">  names.push(tempUsers[i].name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(names);</span><br><span class="line"></span><br><span class="line"><span class="comment">// list : 어떤 배열이든 무관, mapper : 어떤 데이터를 수집할지 위임</span></span><br><span class="line"><span class="comment">// 다형성이 높고, 데이터가 구체적으로 어떻게 생겼는지 보이지 않음 -&gt; 관심사의 분리</span></span><br><span class="line"><span class="comment">// mapper 예시 : user =&gt; user.name</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_map</span>(<span class="params">list, mapper</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newList = [];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">    newList.push(mapper(list[i]));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> newList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  _map(</span><br><span class="line">    _filter(users, <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123; <span class="keyword">return</span> user.age &gt;= <span class="number">30</span>; &#125;),</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123; <span class="keyword">return</span> user.name; &#125;</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 현재 동일한 Loop를 두 번 도는 중복이 존재합니다</span></span><br></pre></td></tr></table></figure><p>함수형 프로그래밍에서는 대입문을 많이 사용하지 않음</p><p>값을 만들어놓고 문장을 내려가면서 변형해가는 것이 아니라, 함수를 통과해가면서 한 번에 값을 새롭게 만들어가는 방식으로 함수형 프로그래밍이 진행됨</p><p>대입문이 없으면 보다 간결한 코드를 만들 수 있습니다</p><hr><h3>each</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Loop를 돌면서 적용할 로직에 대해선 인자에 올 함수에게 위임</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_each</span>(<span class="params">list, iterate</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">    iterate(list[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_map</span>(<span class="params">list, mapper</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newList = [];</span><br><span class="line">  </span><br><span class="line">  _each(list, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    newList.push(mapper(val));</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> newList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_filter</span>(<span class="params">list, predicate</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newList = [];</span><br><span class="line">  </span><br><span class="line">  _each(list, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (predicate(val)) newList.push(val);</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> newList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>코드가 점점 간결해지고, 명령적인 코드가 숨고 선언적인 코드표현, 단순해지고 오류가 줄어들고 보다 정확하게 코딩을 하고 있다는 확신을 쉽게 느낄 수 있음</p><hr><h3>다형성</h3><p>이미 자바스크립트에는 map, filter와 같은 함수들이 구현되어있는데, 우리는 왜 또다시 구현했을까?</p><p>자바스크립트에 이미 있는 그것들은 함수가 아니라 메소드이다 (순수함수 X, 객체의 상태에 따라 결과가 달라지는)</p><p>메소드는 해당 클래스의 인스턴스에서만 사용가능 (jQuery 객체나 document.querySelectorAll 의 결과인 array-like에서는 array method 사용불가) 다형성을 지원하기 어려움</p><p>함수가 기준이 되는 함수형 프로그래밍에서는 함수를 먼저 만들고 그 함수에 맞는 데이터를 구성하여 함수에게 전달하는 식으로 프로그래밍하므로 높은 다형성을 만들어내고 유용하고 실용적일 수 있게 된다</p><p>배열이 아니더라도 length property가 숫자이면 map이나 each 모두 사용가능하게 됨</p><p>함수가 먼저 나오는 프로그래밍 VS 데이터가 먼저 나오는 프로그래밍<br>(데이터가 먼저 나오는 프로그래밍은 데이터가 있어야만 메소드가 생길 수 있다, 그래서 객체지향에서는 평가의 순서가 대단히 중요해진다, 해당 객체가 있어야만 기능 수행 가능)</p><p>함수가 먼저 나오는 프로그래밍은 평가시점에 있어 훨씬 유연해질 수 있다 =&gt; 더 높은 조합성<br>(함수가 먼저 나오는 프로그래밍은 함수가 우선 먼저 홀로 존재하기 때문에 데이터가 없더라도 평가 시점이 상대적으로 훨씬 유연해진다)</p><p>응용형 함수의 장점</p><p>함수형 프로그래밍에서는 보조함수가 어떤 역할을 하느냐에 따라 굉장히 다양한 이름을 갖게 되는 점이 중요합니다</p><p>콜백함수는 어떤 일들을 수행한 뒤에 맨 끝에서 다시 돌려주는 함수만을 뜻함</p><p>predicate : 조건을 리턴하는 함수</p><p>iteratee : Loop를 돌면서 반복적으로 실행되는 함수</p><p>mapper : 무엇과 무엇을 매핑하는 함수</p><p>각각의 역할에 맞게 보조함수를 지칭해줄 것, 그렇게 할 때 다양한 좋은 응용형 고차함수들을 만들어 낼 수 있을 것</p><p>내부 다형성</p><p>외부의 다형성 (array-like도 돌릴 수 있게 되는 것)은 _map과 같은 고차함수가 어떻게 구현되었는지에 따라 만들어지지만, 배열 안에 어떤 값이 담겨있든 수행할 수 있도록 만들어주는 내부의 다형성은 보조함수(predi, iter, mapper)가 만들어낸다</p><p>개발자가 함수에 넘겨줄 데이터에 대한 이해를 바탕으로 보조함수를 결정할 수 있고, 고차함수에서는 데이터에 대해 언급하는 코드 없이 보조함수에게 위임하기 때문에 데이터 형에 있어서 굉장히 자유롭고 다형성을 높이는데 유리합니다</p><blockquote><p>명령형 코드인 for, if 등을 대체하는 것으로 출발해서, 메서드 내부 구현을 함수형으로 해나가는 것이 충분히 가능합니다, 또한 배열 형태의 데이터를 유사배열 객체로 디자인해서 다루거나, 클래스 내부의 본체 객체들을 함수형으로 다루는 것도 충분히 가능하며, 자바스크립트에서는 객체 지향과 함수 지향 조합이 충분히 편리합니다.</p><p>객체지향은 상태 변화가 문제가 아니라 객체지향의 해법이기 때문에 어느지점까지를 함수형으로 할지에 대한 선택이 필요하다고 생각합니다.</p><p>상태를 변경하는 일이 특정 함수나 동작의 마지막 즈음에서만 이러난다면,<br>좀 더 상태를 다루기 쉽지 않으실까 생각됩니다. 반대 되는 경우를 설명해보자면 객체의 특정 값을 변경해둔 상태에 의존해서 다음 메서드가 실행되어 그것에 따라 달리 동작하도록 하는식으로 코딩한다면 상대적으로 거미줄 처럼 전체 코드들이 엮이면서 관리가 어려워지기 시작합니다.</p><p>함수형과 조합할 때는 뷰를 갱신하기위한 최종 상태만 변경하는 식으로 코딩하는 것이 유리합니다. 하나씩 해보시면 감이 오실거라 생각이 됩니다.</p></blockquote><hr><h3>커링, curry, curryr</h3><p>커링은 함수와 인자를 다루는 기법, 함수에 인자를 하나씩 저장해나가다가 필요한 인자가 모두 채워지면 함수의 본체를 실행하는 기법, 일급함수가 지원되고 평가시점를 자유롭게 다룰 수 있으므로 구현 가능하다</p><p>커링 함수는 인자로 함수를 받고, 함수를 리턴합니다, 해당 함수는 첫 번째 인자를 받고 또 다시 함수를 리턴합니다, 인자를 모두 받으면 받았던 인자들을 함수 본체에 넘겨주면서 실행합니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_curry</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2>컬렉션 중심 프로그래밍</h2><h2>자바스크립트에서의 지연 평가</h2><h2>실전코드조각 1</h2><h2>실전코드조각 2</h2><h2>비동기</h2><hr><h2>특강</h2><ul><li>부수효과가 나쁜 것이 아니라, 결론에 해당함 (Just Side Effect, Not 부작용)<ul><li>다만 디테일하게 쫒아가면서 다루지 않으면, 에러를 유발하기가 매우 쉬움</li><li>부원인, 부작용</li><li>부수효과를 일으키는 대상을 리턴하도록 짜면 조합성을 높이는데 큰 도움이 됨</li></ul></li><li>참조 투명성</li><li>일급함수와 클로저가 함수형 프로그래밍을 지탱하는 두 축<ul><li>일급함수<ul><li>함수를 변수, 인자, 리턴, 평가(=실행)</li></ul></li><li>클로저<ul><li>값과 변수, 함수를 통칭해서 클로저라고 함</li><li>호출하여 할당함으로서 클로저가 됨</li><li>메모리에서 자유변수를 유지시켜야만 클로저</li><li>함수를 하나의 스택으로 보고, 자유변수에 대한 참조를 유지시키느냐 여부가 중요</li><li>클로저를 만들어두고 계속해서 사용하는 패턴이 함수형 프로그래밍에서 흔함</li></ul></li></ul></li></ul><p>순수함수</p><p>부수효과</p><p>필수 부수효과</p><p>새로운 값을 리턴하는 순수함수</p><p>고차함수(함수를 값으로 다루는 함수)</p><ul><li><p>함수를 리턴해주는 함수</p></li><li><p>함수를 인자로 받아서 안에서 실행하는 함수 (응용형 프로그래밍)</p><ul><li>function repeat(count, fn) { var i = 0; while (count–) fn(i++); }</li><li>var i = -1; while (++i &lt; count) fn(i);</li></ul></li></ul><p>어떻게 동작하느냐(명령형 프로그래밍)가 아니라 이렇게 되도록 하는 것을 선언형 프로그래밍(함수형 프로그래밍 포함)</p><p>부수효과를 어떻게 다루느냐가 함수형 프로그래밍의 성향 (언어에 따라 부수효과를 모나드로 관리하기도 함)</p><p>브라우저 또는 DB를 조작해야 하므로 자바스크립트에서는 부수효과가 없는 프로그래밍은 불가능할 것 (로직 과정에선 없을 수 있음)</p><p>5종류 함수를 적절히 조합, 문보다는 함수(표현식)를 위주로 프로그래밍, 변수 사용을 줄이고 값을 변경하지 않는다, 꼭 필요한 부수 효과 함수를 제외하고는 부수 효과를 로직에 이용하지 않는다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>함수형 프로그래밍</p><ul><li>결과를 리턴해주는 식으로 외부와 소통한다</li><li>기존 값을 수정하지 않고, 새로운 값을 만들어서 리턴한다</li><li>조건을 함수로 추상화하여 인자로 받는다<ul><li>predicate(products[i]) : 로직을 완전히 위임</li><li>while (++i &lt; l) predicate(list[i]) &amp;&amp; new_list.push(list[i]))</li></ul></li><li>추상화의 단위가 함수<ul><li>객체지향은 객체 또는 메소드 단위</li></ul></li><li>표현식만으로 코딩하는 습관</li><li>데이터가 먼저인 프로그래밍은 다형성이 낮을 수 밖에 없음, 특정 데이터에 종속됨<ul><li>함수형은 함수를 먼저 만들고 함수에 맞는 형태의 데이터를 전달</li><li>외부의 값에 대한 다형성을 높이고, 내부 값에 대한 다형성은 보조 함수로 커버</li></ul></li></ul><p>함수 이름은 자세히 써주고, 변수는 한 글자 수준으로 축약하곤 함, k key l length v value f func</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add_all</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>, l = list.length, memo = list[i++];</span><br><span class="line">  <span class="keyword">while</span> (i &lt; l) memo = add(memo, list[i++]);</span><br><span class="line">  <span class="keyword">return</span> memo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>reduce란 순회하면서 보조함수로 축약하는 것</p><ul><li>reduce([1,2,3,4], add)</li><li>function add_all(list) { return reduce(list, add); }</li></ul><p>고차함수를 만들고 적용가능한 보조함수를 전달하여 새로운 값을 만들어가는 것</p><p>상수인 변수와 함수를 가지고 새로운 상수를 만들어냄</p><p>reduce도 클로저 위에 쌓여있음</p><p>순수함수이기에 내가 원하는 기능을 한다면 얼마든지 가져다써도 괜찮고, 필요한 경우에만 만들어가면서 쓰면 될 것</p><p>자바스크립트는 Array-Like에 지원하는 함수가 많다는 것이 조금 부족한 점 (엘릭서 등은 모든 데이터셋에 지원)</p><p>함수형 프로그래밍에서 사용하는 기본 함수들은 직접 만들어보는 것이 피가 되고 살이 됨</p><p>가능한 데이터가 함수 내에서 보이지 않을 정도로 추상화해볼 것</p><p>숫자들에서 숫자로 축약하는 것은 reduce로 충분하지만, 그것이 아니면 시작하는 외부 값을 지정해줄 수 있어야 함 (더 다형성이 높은 함수가 되기 위해서)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reduce</span>(<span class="params">list, fn, memo</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>, l = list.length, memo = memo === <span class="literal">undefined</span> ? list[i++] : memo;</span><br><span class="line">  <span class="comment">// while (i &lt; l) &#123; memo = fn(memo)&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>은닉은 도구이고 취향이지, 목적이 아니다</p><p>실용적인 클로져들을 만드는 것이 함수형 프로그래밍</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pipe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> fns = <span class="built_in">arguments</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> reduce(fns, <span class="function"><span class="keyword">function</span>(<span class="params">arg, f</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> f(arg);</span><br><span class="line">    &#125;, arg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">go</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> reduce(<span class="built_in">arguments</span>, )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calr</span>(<span class="params">arg, f</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> f(arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>표현식만으로 코딩하면 라인이 없어서 어려운데, go를 통해 라인을 만들 수 있음</p><p>커링 : 함수의 인자를 부분적으로 적용</p><p>함수가 함수를 만들고, 함수가 다른 함수에 적용되는 함수 등을 만들어가는 함수형 프로그래밍</p><p>for, while은 코드의 모양이 익숙한 것이지, 코드의 로직이 익숙한 것이 아님</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> filter = curryr(<span class="function">(<span class="params">list, predicate</span>) =&gt;</span> reduce(list, (new_list, val) =&gt; predicate(val) ? append(new_list, val) : new_list ))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params">list, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> list.push(val), list; <span class="comment">// 좌측이 실행된 뒤에 우측이 리턴됨</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>함수 + 파이프라인적 사고로 진행하는 것이 중요합니다</p><p>go가 reduce로 만들어진 함수</p><p>chaining은 monad의 일종이에요, chaing은 메소드를 바꿔가면서, curry는 하나의 함수로 도달하기 위해서 인자를 하나씩 전달해주다가 인자가 전부 차면 그때 실행하는 것 (실행을 미루기 위해 쓰임)</p><p>프론트엔드에서의 비동기 : 성능과 사용성, 브라우저 렌더링이 비동기와 대단히 연관되어있음 (네이티브처럼 만들 수 있음)</p><p>백엔드에서의 비동기 : 과거의 쓰레드를 사용했었는데 500개 이상은 어려웠는데 Node.js는 2만 개까지 처리 가능함, 쓰레드는 하나만 쓰고, 비동기적으로 함수를 동시다발적으로 실행하면 됨, 과거에 비해 스케일이 커지고 다이나믹해지다보니 비동기에 대한 니즈가 급증함</p><p>비동기 상황 잘 다루기</p><ul><li>리턴 값으로 소통하기</li><li>원하는 순서대로 함수 실행을 나열하는 법 연습</li><li>표현식 만으로 코딩하는 연습 =&gt; 꼬리 함수 호출 최적화</li><li>재귀 함수 연습</li></ul><p>기본기</p><ul><li>비동기와 무관하게 내가 원하는 로직을 일렬로 나열할 수 있도록 하는 것이 제어의 첫 걸음</li><li>비동기라는 것은 함수 단위로 일어납니다, 단 결국은 재귀로 돌아가는 것 (+ 추상화를 얼마나 더 하느냐)</li></ul><p>연속적으로 내가 원하는 함수를 나열하고, 원할 때 호출</p><p>reduce를 재귀 + 유명 함수를 이용하여 Promise 제어</p><p>표현식만 남긴다, 즉시 실행함수로 담으면 문이어도 함수로 만들 수 있음</p><p>프라미스 : 비동기의 결과가 값으로 다뤄질 수 있도록 함</p><p>go, pipe, map, filter</p><p>map, map (동시성)</p><p>console.time, console.timeEnd</p><p>비동기를 동기처럼 만든다 의 한 수 위가 둘을 적절히 다룬다</p><p>FP는 램은 많이 쓰되, CPU는 적게 쓰는 편</p><p>OOP와 FP는 대척점에 있지 않다, 랩을 잘 하는게 멋있는 것, 모두 현대 프로그래밍에서 필요함, DOM 조작은 모두 객체를 다뤄야 함, 프로그래밍 언어 자체보다 더 중요한 것은 멀티플 패러다임을 잘 이해하는 개발자가 되는 것, 그러면 적절한 도구를 필요할 때 쓸 수 있게 됨, 객체 지향이 없었다면 Promise가 있을 수 없었음, FP가 비동기를 지탱하는 기술임에도 함수 기법 자체는 가볍게 훑어지는 경향이 있는데 그것을 잘 다루면 더 나은 프로그래밍을 할 수 있음</p><p>네이밍 컨벤션에 카멜 케이스를 쓰지 않는 것도 함수형과 유관? =&gt; DB의 명칭과 통일</p><p>arguments는 this와 달리, 부원인이 아니라 매개변수와 동등하게 보시는지? =&gt; 외부에 변화를 주지 않는다면 부원인이 아니다</p><p>ES6는 학습자를 배려해서 의도적으로 배제? (rest parameter, Promise.all) =&gt; 그것이기도 하지만, Promise는 모든 로직을 비동기로 처리하기에 적절한 조합을 할 수 없음</p><p>_each의 가치를 언어에서 기본적으로 지원해주는 map, call, apply, Array.from에 대항하여 어떻게 내세울 수 있을지 (_go : method chaining) =&gt; forEach는 return 이 undefined라는 큰 차이가 존재하며, 리습 계열의 컨벤션은 언어에 부족한 점이 있다면 개발자가 보완하는 방향</p><p>언어에서 기본적으로 제공해주는 것에 비해, 로직 즉 탈언어적 요소 위주의 방향으로 코딩하는 것이 우선적인 지향점으로 더 좋을지 =&gt; 그게 실력향상에도 좋음</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;자바스크립트로 알아보는 함수형 프로그래밍&lt;/h1&gt;
&lt;h2&gt;함수형 프로그래밍 개요&lt;/h2&gt;
&lt;h3&gt;함수형 프로그래밍 정의, 순수함수&lt;/h3&gt;
&lt;p&gt;성공적인 프로그래밍이란?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;좋은 프로그램을 만드는 일
&lt;ul&gt;
&lt;li&gt;사용성,
      
    
    </summary>
    
    
      <category term="FP" scheme="https://eclatant.io/tags/FP/"/>
    
  </entry>
  
  <entry>
    <title>실용적인 아티클 1</title>
    <link href="https://eclatant.io/2018/06/24/Awesome-Article1/"/>
    <id>https://eclatant.io/2018/06/24/Awesome-Article1/</id>
    <published>2018-06-23T15:00:00.000Z</published>
    <updated>2018-06-24T16:15:27.463Z</updated>
    
    <content type="html"><![CDATA[<p>평소에 읽은 아티클들을 주변 사람들에게 자주 공유하곤 하는데, 아래처럼 요약이나 추천 사유를 함께 정리하여 나누면 좋겠다는 생각을 했었다.</p><p><a href="https://blog.outsider.ne.kr/1383" target="_blank" rel="noopener">기술 뉴스 #104 : 18-06-16</a></p><p><a href="https://blog.cometkim.kr/posts/stars-last-week/2018-03-31/" target="_blank" rel="noopener">주간 GitHub Stars (~ 2018/03/31)</a></p><p><a href="https://medium.com/steady-study/2018%EB%85%84-5%EC%9B%94-%EC%9D%BD%EA%B3%A0-%EA%B3%B5%EB%B6%80%ED%95%9C-%EA%B2%83%EB%93%A4-549e802dc3c7" target="_blank" rel="noopener">2018년 5월, 읽고 공부한 것들</a></p><p>오늘은 첫 번째로 그간 프론트엔드 프로젝트형 스터디에서 공유되었었던 아티클들을 정리해보도록 하겠다.</p><h3><a href="http://jojoldu.tistory.com/284" target="_blank" rel="noopener">4) 3번째 직장에 오기까지 - 4. 두번째직장 #1</a></h3><p>지금은 우아한 형제들에 계신 이동욱님의 이직기를 자세히 다룬 시리즈이다.</p><p>프로그래밍 공부는 어느 정도 했지만, 아직 취업에 이르지 못했던 때에 대체 어느 정도 실력이 있어야 취업을 할 수 있는 것인지, 어떤 방향으로 노력을 해야 하는 것인지 등 너무 궁금한 것이 많은데 주변에 물어볼 수 있는 사람도 없는 시기도 있었다. ( 마치 <a href="https://www.facebook.com/hee072794/posts/605474039817221" target="_blank" rel="noopener">Link</a> 에 나오는 질문들처럼 ) 그럴 때 참고하기 정말 좋은 글이었다.</p><p>취준생 입장에선 정말 대단해보이는 개발자도 저렇게나 많은 고생을 했었고, 그 과정에서 어떤 노력들을 했었다는 것들을 자세히 알 수 있어서 취준생이나 장차 이직을 준비하실 분들에게 꼭 추천하고 싶은 시리즈이다.</p><p>위 에피소드를 포함한 전체 시리즈 목록은 다음과 같다.</p><ul><li><a href="http://jojoldu.tistory.com/277" target="_blank" rel="noopener">1) 3번째 직장에 오기까지 - 1. 국비교육기간</a></li><li><a href="http://jojoldu.tistory.com/278" target="_blank" rel="noopener">2) 3번째 직장에 오기까지 - 2. 취업준비기간</a></li><li><a href="http://jojoldu.tistory.com/279" target="_blank" rel="noopener">3) 3번째 직장에 오기까지 - 3. 첫 직장, 첫번째 이직</a></li><li><a href="http://jojoldu.tistory.com/284" target="_blank" rel="noopener">4) 3번째 직장에 오기까지 - 4. 두번째직장 #1</a></li><li><a href="http://jojoldu.tistory.com/302" target="_blank" rel="noopener">5) 3번째 직장에 오기까지 - 5. 두번째 직장 #2</a></li></ul><h3><a href="https://soojin.ro/blog/naming-boolean-variables" target="_blank" rel="noopener">Bool 변수 이름 제대로 짓기 위한 최소한의 영어 문법</a></h3><p>필자는 영어를 정말 못한다, 그래서 영어를 잘 하는 분들께는 필요가 없을 수 있는 위와 같은 글들도 대단히 많은 도움이 된다.</p><p>비슷한 종류로는 아래와 같은 글이 있다.</p><p><a href="https://engineering.huiseoul.com/%EC%98%81%EB%AC%B8-%EA%B0%9C%EB%B0%9C%EB%AC%B8%EC%84%9C-%EB%B3%BC-%EB%95%8C-%EB%8F%84%EC%9B%80%EB%90%98%EB%8A%94-%EC%9A%A9%EC%96%B4%EB%93%A4-9305daed1fb1" target="_blank" rel="noopener">영문 개발문서 볼 때 도움되는 용어들</a></p><p>부디 위와 같은 글들이 더 많아졌으면 좋겠고, 영어를 지금보다 잘 하게 되면 꼭 작성해보아야겠다.</p><h3><a href="http://www.itworld.co.kr/news/108939" target="_blank" rel="noopener">좋은 코드를 작성하고 있다는 징후 11가지</a></h3><p>이런 종류의 글들은 사실 실행에는 큰 도움이 안 되지만, 인지에는 도움이 된다고 생각한다. 그래도 다 좋은 얘기들이며 이 중에 가장 와닿는 한 가지만이라도 흡수하면 그 자체로 가치는 충분하다고 생각한다. ( 어떤 책이나 글을 읽을 때 개인적으로 취하는 자세는 다음과 비슷하다, <a href="http://1boon.kakao.com/bookclub/whatreadingnow4" target="_blank" rel="noopener">Link</a> )</p><h3><a href="https://post.naver.com/viewer/postView.nhn?volumeNo=8431285&amp;memberNo=34176766" target="_blank" rel="noopener">브라우저는 웹페이지를 어떻게 그리나요? - Critical Rendering Path</a></h3><p>웹개발자에겐 브라우저가 곧 OS나 다름없을 것이다. 그런 면에서 한글로 쓰였고, 상대적으로 이해하기 쉬운 너무나 귀한 글이다!</p><h3><a href="https://martinfowler.com/bliki/BeckDesignRules.html" target="_blank" rel="noopener">BeckDesignRules</a></h3><p><a href="https://www.facebook.com/gyuwon.yi/posts/1731573160219233" target="_blank" rel="noopener">Link</a> 를 통해 접했던 글이다.</p><p>TDD, Design 등에 관심이 있다면 꼭 팔로우하시길 추천드리고 싶은 페이스북 계정이다.</p><p>나 또한 여전히 포스팅에서 말하는 초보에서 아직도 벗어나지 못했고, 테스트 코드도 없이 어설프게 중복코드를 제거하고는 문제 생기면 부랴부랴 다시 가서 고치는 신세다. 😢</p><p>납기에 쫓기거나 귀찮거나 번거롭더라도 꼭 테스트 코드를 먼저 작성해보는 습관을 들여야겠다는 다짐을 다시 한 번!</p><h3><a href="https://github.com/JaeYeopHan/Interview_Question_for_Beginner" target="_blank" rel="noopener">Technical Interview Guidelines for beginners</a></h3><p>면접 준비할 때, 내가 무엇을 모르는지 알고자 확인할 때 유용하다고 생각된다.</p><p>관련하여 아래와 같은 여러 레퍼런스들이 존재한다.</p><ul><li><p><a href="https://github.com/yangshun/front-end-interview-handbook/blob/master/Translations/Korean/README.md" target="_blank" rel="noopener">프론트엔드 인터뷰 핸드북</a></p></li><li><p><a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Korean" target="_blank" rel="noopener">프론트엔드 면접 문제 은행</a></p></li><li><p><a href="https://github.com/MaximAbramchuck/awesome-interview-questions" target="_blank" rel="noopener">Awesome Interviews</a></p></li><li><p><a href="https://github.com/kesuskim/Front-End-Checklist/blob/master/README.md" target="_blank" rel="noopener">프론트엔드 체크리스트</a></p></li></ul><h3><a href="https://medium.com/@Jbee_/%EC%8B%A0%EC%9E%85-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EB%A0%A4%EB%A9%B4-%EB%AC%B4%EC%97%87%EC%9D%84-%ED%95%99%EC%8A%B5%ED%95%B4%EC%95%BC-%ED%95%98%EB%82%98%EC%9A%94-1dd59a14e084" target="_blank" rel="noopener">신입 프론트엔드 개발자가 되려면 무엇을 학습해야 하나요?</a></h3><p>사실 어떤 분야의 개발자가 되고 싶다고 생각을 했거나, 또는 정하지 못 하고 있을 때 정확히 해당 분야의 개발자가 되기 위해 무엇 무엇을 공부해야 하는지, 한다면 어떤 순서로 공부해야 하는지 잘 알기 어려운 때가 많다. 그럴 때 참고하기 참 좋은 글이다.</p><p>위 글 외에도 아래와 같은 레퍼런스도 있다.</p><ul><li><a href="https://github.com/kamranahmedse/developer-roadmap" target="_blank" rel="noopener">Web Developer Roadmap</a></li></ul><p>또한 실제적으로 따라할 수 있도록 직접적인 가이드가 제시된 너무나 좋은 레퍼런스도 있다!</p><ul><li><a href="https://github.com/Knowre-Dev/WebDevCurriculum" target="_blank" rel="noopener">Knowre web development curriculum 2018</a></li></ul><h3><a href="http://meetup.toast.com/posts/106" target="_blank" rel="noopener">좋은 git 커밋 메시지를 작성하기 위한 7가지 약속</a></h3><p>하루에도 여러 차례 변수명과 더불어 명명이 얼마나 어려운 것인가를 느끼게 해주는 과정이 커밋이다.</p><p>누군가에게 커밋 메시지를 어떻게 잘 쓸 수 있냐고 질문하면 유명한 오픈소스를 분석해보라는 답변을 받을 때가 있는데, 그 옥석을 가리는 것이 저를 포함하여 누구에게나 가능하다고 생각하지는 않고, 잘 정리된 글을 보고 참고하고 싶은 분들에게 추천하고 싶은 글들이다.</p><ul><li><p><a href="https://tech.ssut.me/2015/06/24/write-a-good-git-commit-message/" target="_blank" rel="noopener">좋은 깃(Git) 커밋 메시지 작성하기</a></p></li><li><p><a href="https://conventionalcommits.org/" target="_blank" rel="noopener">Conventional Commits 1.0.0-beta.2</a></p></li></ul><h3><a href="https://medium.com/@Jbee_/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EB%A5%BC-%EB%A7%88%EC%B9%98%EB%A9%B0-%ED%9A%8C%EA%B3%A0%ED%95%9C-%EA%B2%BD%ED%97%98-14d37e066d1c" target="_blank" rel="noopener">프로젝트를 마치며 회고한 경험</a></h3><p>늘 회고의 중요성에 대해서 생각했지만, 어떻게? 에 대한 뚜렷한 답이 없었다. 그에 관해 다른 사람들의 경험을 들어보고 싶을 때가 많았는데 큰 도움이 되었던 정말 좋은 글이다.</p><p>타임라인이나 KPT 등이 가능하려면 진행하는 날마다 간단한 회고를 통해 기록을 남겨두어야 할 것 같다.</p><hr><p><a href="https://medium.com/@ljs0705/%EC%B9%B4%EC%B9%B4%EC%98%A4%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%9B%B9-react-%ED%8F%AC%ED%8C%85-%ED%9B%84%EA%B8%B0-76402cc5e031" target="_blank" rel="noopener">https://medium.com/@ljs0705/카카오페이지-웹-react-포팅-후기-76402cc5e031</a></p><p><a href="http://d2.naver.com/helloworld/3259111" target="_blank" rel="noopener">http://d2.naver.com/helloworld/3259111</a></p><p><a href="https://krasimir.gitbooks.io/react-in-patterns/content/" target="_blank" rel="noopener">https://krasimir.gitbooks.io/react-in-patterns/content/</a></p><p><a href="https://medium.com/netscape/whats-new-in-react-16-1608390ffe39" target="_blank" rel="noopener">https://medium.com/netscape/whats-new-in-react-16-1608390ffe39</a></p><p><a href="https://brunch.co.kr/@nerf-this/111" target="_blank" rel="noopener">https://brunch.co.kr/@nerf-this/111</a></p><p><a href="https://www.youtube.com/watch?v=fHyTA-UIcqs" target="_blank" rel="noopener">https://www.youtube.com/watch?v=fHyTA-UIcqs</a></p><p><a href="http://meetup.toast.com/posts/54" target="_blank" rel="noopener">http://meetup.toast.com/posts/54</a></p><p><a href="http://meetup.toast.com/posts/53" target="_blank" rel="noopener">http://meetup.toast.com/posts/53</a></p><p><a href="https://www.slideshare.net/mobile/jayjin0427/feat-95042760" target="_blank" rel="noopener">https://www.slideshare.net/mobile/jayjin0427/feat-95042760</a></p><p><a href="https://milooy.wordpress.com/2018/02/07/moving-job/" target="_blank" rel="noopener">https://milooy.wordpress.com/2018/02/07/moving-job/</a></p><p><a href="https://slides.com/jeonghwan/fe-tdd" target="_blank" rel="noopener">https://slides.com/jeonghwan/fe-tdd</a></p><p><a href="https://www.haruair.com/blog/3116" target="_blank" rel="noopener">https://www.haruair.com/blog/3116</a></p><p><a href="https://lab.github.com/courses/introduction-to-github" target="_blank" rel="noopener">https://lab.github.com/courses/introduction-to-github</a></p><p><a href="https://github.com/code-squad/codesquad-docs/blob/master/codereview/README.md" target="_blank" rel="noopener">https://github.com/code-squad/codesquad-docs/blob/master/codereview/README.md</a></p><p><a href="http://www.inven.co.kr/webzine/news/?news=198238" target="_blank" rel="noopener">http://www.inven.co.kr/webzine/news/?news=198238</a></p><p><a href="https://www.facebook.com/drawthebook/videos/803788546477026/" target="_blank" rel="noopener">https://www.facebook.com/drawthebook/videos/803788546477026/</a></p><p><a href="https://www.prettyawesomelists.com/" target="_blank" rel="noopener">https://www.prettyawesomelists.com/</a></p><p><a href="https://www.holaxprogramming.com/2018/04/15/react-optimizing-virtual-dom-explained/" target="_blank" rel="noopener">https://www.holaxprogramming.com/2018/04/15/react-optimizing-virtual-dom-explained/</a></p><p><a href="https://www.slideshare.net/awskorea/tag/aws-summit-seoul-2018" target="_blank" rel="noopener">https://www.slideshare.net/awskorea/tag/aws-summit-seoul-2018</a></p><p><a href="https://github.com/Myeongjoon/coding-interview-university/blob/master/translations/README-ko.md" target="_blank" rel="noopener">https://github.com/Myeongjoon/coding-interview-university/blob/master/translations/README-ko.md</a></p><p><a href="http://blog.kivol.net/post/173442457743/%EC%A2%8B%EC%9D%80-%EA%B8%B0%EC%88%A0-%EC%9D%B8%ED%84%B0%EB%B7%B0-%EC%A7%88%EB%AC%B8%EC%9D%80-%EC%96%B4%EB%96%A4-%EC%A7%88%EB%AC%B8%EC%9D%B8%EA%B0%80" target="_blank" rel="noopener">http://blog.kivol.net/post/173442457743/좋은-기술-인터뷰-질문은-어떤-질문인가</a></p><p><a href="https://blog.naver.com/skabin/221261551265" target="_blank" rel="noopener">https://blog.naver.com/skabin/221261551265</a></p><p><a href="https://okky.kr/article/461670" target="_blank" rel="noopener">https://okky.kr/article/461670</a></p><p><a href="http://channy.creation.net/blog/1186" target="_blank" rel="noopener">http://channy.creation.net/blog/1186</a></p><p><a href="https://rhostem.github.io/posts/2016-12-19-A-Study-Plan-To-Cure-JavaScript-Fatigue/" target="_blank" rel="noopener">https://rhostem.github.io/posts/2016-12-19-A-Study-Plan-To-Cure-JavaScript-Fatigue/</a></p><p><a href="http://www.jidum.com/jidums/view.do?jidumId=979" target="_blank" rel="noopener">http://www.jidum.com/jidums/view.do?jidumId=979</a></p><p><a href="https://engineering.huiseoul.com/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94%EA%B0%80-%EC%97%94%EC%A7%84-%EB%9F%B0%ED%83%80%EC%9E%84-%EC%BD%9C%EC%8A%A4%ED%83%9D-%EA%B0%9C%EA%B4%80-ea47917c8442" target="_blank" rel="noopener">https://engineering.huiseoul.com/자바스크립트는-어떻게-작동하는가-엔진-런타임-콜스택-개관-ea47917c8442</a></p><p><a href="https://blog.gaerae.com/2018/05/github-pages-custom-domains-https.html" target="_blank" rel="noopener">https://blog.gaerae.com/2018/05/github-pages-custom-domains-https.html</a></p><p><a href="http://ahnheejong.name/articles/becoming-better-programmer/" target="_blank" rel="noopener">http://ahnheejong.name/articles/becoming-better-programmer/</a></p><p><a href="http://www.edwith.org/boostcourse-web/lecture/23925" target="_blank" rel="noopener">http://www.edwith.org/boostcourse-web/lecture/23925</a></p><p><a href="https://www.bsidesoft.com/6195" target="_blank" rel="noopener">https://www.bsidesoft.com/6195</a></p><p><a href="https://brunch.co.kr/@younghakjang/1" target="_blank" rel="noopener">https://brunch.co.kr/@younghakjang/1</a></p><p><a href="http://osinside.net/osinside/osinside.htm" target="_blank" rel="noopener">http://osinside.net/osinside/osinside.htm</a></p><p><a href="https://medium.freecodecamp.org/how-to-increase-your-chances-of-landing-a-development-job-acb6759c66da" target="_blank" rel="noopener">https://medium.freecodecamp.org/how-to-increase-your-chances-of-landing-a-development-job-acb6759c66da</a></p><p><a href="https://brunch.co.kr/@zalhanilll/229" target="_blank" rel="noopener">https://brunch.co.kr/@zalhanilll/229</a></p><p><a href="https://medium.com/@jungil.han/%EC%82%AC%EC%9D%B4%EB%93%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-10%EB%85%84%EC%9D%98-%EA%B8%B0%EB%A1%9D-%ED%8C%8C%ED%8A%B8-1-63bc25f8dcfc" target="_blank" rel="noopener">https://medium.com/@jungil.han/사이드-프로젝트-10년의-기록-파트-1-63bc25f8dcfc</a></p><p><a href="https://medium.com/@jungil.han/%EA%B4%9C%EC%B0%AE%EC%9D%80-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EB%90%98%EA%B8%B0-%ED%81%B4%EB%A6%B0-%EC%BD%94%EB%8D%94%EB%A5%BC-%EC%9D%BD%EA%B3%A0-c8bcf91c2c76" target="_blank" rel="noopener">https://medium.com/@jungil.han/괜찮은-개발자-되기-클린-코더를-읽고-c8bcf91c2c76</a></p><p><a href="http://ppss.kr/archives/107897" target="_blank" rel="noopener">http://ppss.kr/archives/107897</a></p><p><a href="https://brunch.co.kr/@springboot/35" target="_blank" rel="noopener">https://brunch.co.kr/@springboot/35</a></p><p><a href="https://medium.com/@kpak/%ED%9B%8C%EB%A5%AD%ED%95%9C-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EC%97%94%EC%A7%80%EB%8B%88%EC%96%B4%EB%9E%80-%EB%8B%B5-%EC%B9%B4%EB%A9%9C%EB%A0%88%EC%98%A8-%EA%B0%9C%EB%B0%9C%EC%9E%90-b73502a63016" target="_blank" rel="noopener">https://medium.com/@kpak/훌륭한-소프트웨어-엔지니어란-답-카멜레온-개발자-b73502a63016</a></p><p><a href="https://www.vobour.com/%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%B2%98%EB%9F%BC-%EC%83%9D%EA%B0%81%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0%EC%9D%98-%EA%B5%90%ED%9B%88-how-to-think-l" target="_blank" rel="noopener">https://www.vobour.com/개발자처럼-생각하는-방법-문제-해결의-교훈-how-to-think-l</a></p><p><a href="https://brunch.co.kr/@supims/302" target="_blank" rel="noopener">https://brunch.co.kr/@supims/302</a></p><p><a href="http://blog.sonim1.com/224" target="_blank" rel="noopener">http://blog.sonim1.com/224</a></p><p><a href="https://github.com/AllThingsSmitty/css-protips/blob/master/translations/ko-KR/readme.md" target="_blank" rel="noopener">https://github.com/AllThingsSmitty/css-protips/blob/master/translations/ko-KR/readme.md</a></p><p><a href="http://wit.nts-corp.com/2017/09/25/4903" target="_blank" rel="noopener">http://wit.nts-corp.com/2017/09/25/4903</a></p><p><a href="https://medium.com/steady-study/%EB%B2%88%EC%97%AD-%EC%95%84%EC%A3%BC-%EA%B1%B0%EB%8C%80%ED%95%9C-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%84-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0-3aa37fc45122" target="_blank" rel="noopener">https://medium.com/steady-study/번역-아주-거대한-자바스크립트-어플리케이션을-구축하기-3aa37fc45122</a></p><p><a href="https://youtu.be/rquI6w4gLIs" target="_blank" rel="noopener">https://youtu.be/rquI6w4gLIs</a></p><p><a href="https://github.com/karan/Projects" target="_blank" rel="noopener">https://github.com/karan/Projects</a></p><p><a href="https://okky.kr/article/470785" target="_blank" rel="noopener">https://okky.kr/article/470785</a></p><p><a href="http://ppss.kr/archives/116610" target="_blank" rel="noopener">http://ppss.kr/archives/116610</a></p><p><a href="https://brunch.co.kr/@heracul/7" target="_blank" rel="noopener">https://brunch.co.kr/@heracul/7</a></p><p><a href="http://platum.kr/archives/101349" target="_blank" rel="noopener">http://platum.kr/archives/101349</a></p><p><a href="https://github.com/purpleworks/coding_test/blob/master/Frontend/Test2/README.md" target="_blank" rel="noopener">https://github.com/purpleworks/coding_test/blob/master/Frontend/Test2/README.md</a></p><p><a href="https://drive.google.com/file/d/1rJtH-PjEO_9qv2_1UmjcXdpI-SUyPugU/view" target="_blank" rel="noopener">https://drive.google.com/file/d/1rJtH-PjEO_9qv2_1UmjcXdpI-SUyPugU/view</a></p><p><a href="https://www.slideshare.net/watchncompass/freedom-responsibility-culture" target="_blank" rel="noopener">https://www.slideshare.net/watchncompass/freedom-responsibility-culture</a></p><p><a href="https://www.slideshare.net/alleciel/work-rules-korean-ver" target="_blank" rel="noopener">https://www.slideshare.net/alleciel/work-rules-korean-ver</a></p><p><a href="https://okky.kr/article/476113" target="_blank" rel="noopener">https://okky.kr/article/476113</a></p><p><a href="https://d2.naver.com/helloworld/5644368" target="_blank" rel="noopener">https://d2.naver.com/helloworld/5644368</a></p><p><a href="https://medium.com/steady-study/%EB%94%94%EB%B2%84%EA%B7%B8%EB%A5%BC-%EB%94%94%EB%B2%84%EA%B9%85%ED%95%98%EA%B8%B0-%EB%8B%A8%EA%B3%84%EC%A0%81-%EB%94%94%EB%B2%84%EA%B9%85-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%ED%85%9C%ED%94%8C%EB%A6%BF-d3d4a9882adb" target="_blank" rel="noopener">https://medium.com/steady-study/디버그를-디버깅하기-단계적-디버깅-프로세스-템플릿-d3d4a9882adb</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;평소에 읽은 아티클들을 주변 사람들에게 자주 공유하곤 하는데, 아래처럼 요약이나 추천 사유를 함께 정리하여 나누면 좋겠다는 생각을 했었다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.outsider.ne.kr/1383&quot; target=&quot;_
      
    
    </summary>
    
      <category term="Article" scheme="https://eclatant.io/categories/Article/"/>
    
    
      <category term="Article" scheme="https://eclatant.io/tags/Article/"/>
    
  </entry>
  
  <entry>
    <title>루비 곡괭이 3장 클래스, 객체, 변수</title>
    <link href="https://eclatant.io/2018/05/27/Ruby-Pickaxe-chapter3/"/>
    <id>https://eclatant.io/2018/05/27/Ruby-Pickaxe-chapter3/</id>
    <published>2018-05-26T15:00:00.000Z</published>
    <updated>2018-06-02T01:11:48.775Z</updated>
    
    <content type="html"><![CDATA[<p>루비에서 다루는 모든 것은 객체이며, 클래스에서 직간접적으로 생성할 수 있다, 이번 장에서는 클래스를 만들고 다루는 법을 살펴본다</p><p>객체지향 시스템을 설계할 때 항상 제일 먼저 해야 하는 일은 다루고자 하는 대상들의 특징을 파악하는 것이다<br>일반적으로 다루고자 하는 대상들이 속하는 형식(type)은 클래스로 만들어진다, 그리고 각 대상은 이 클래스의 인스턴스가 된다</p><p>헌책방 관리를 위한 클래스를 만들어보자</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInStock</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(isbn, price)</span></span></span><br><span class="line">    @isbn = isbn</span><br><span class="line">    @price = Float(price)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">to_s</span></span></span><br><span class="line">    <span class="string">"ISBN: <span class="subst">#&#123;@isbn&#125;</span>, price: <span class="subst">#&#123;@price&#125;</span>"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">b1 = BookInStock.new(<span class="string">'isbn1'</span>, <span class="number">3</span>)</span><br><span class="line">p b1 <span class="comment"># #&lt;BookInStock:0x00007f93fa9acf78 <span class="doctag">@isbn</span>="isbn1", <span class="doctag">@price</span>=3.0&gt;</span></span><br><span class="line">puts b1 <span class="comment"># ISBN: isbn1, price: 3.0</span></span><br><span class="line"></span><br><span class="line">b2 = BookInStock.new(<span class="string">'isbn2'</span>, <span class="number">3.14</span>)</span><br><span class="line">p b2 <span class="comment"># #&lt;BookInStock:0x00007f93fa997c90 <span class="doctag">@isbn</span>="isbn2", <span class="doctag">@price</span>=3.14&gt;</span></span><br><span class="line">puts b2 <span class="comment"># ISBN: isbn2, price: 3.14</span></span><br><span class="line"></span><br><span class="line">b3 = BookInStock.new(<span class="string">'isbn3'</span>, <span class="string">'5.67'</span>)</span><br><span class="line">p b3 <span class="comment"># #&lt;BookInStock:0x00007f93fa986738 <span class="doctag">@isbn</span>="isbn3", <span class="doctag">@price</span>=5.67&gt;</span></span><br><span class="line">puts b3 <span class="comment"># ISBN: isbn3, price: 5.67</span></span><br></pre></td></tr></table></figure><p>initialize 메서드는 객체의 환경을 초기화해서 이를 사용 가능한 상태로 만들어두어야 한다, 그러면 다른 메서드들에서는 이 상태를 사용한다</p><p>매개변수는 지역변수와 동일한 스코프이므로 initialize 메서드가 끝나면 함께 사라져버린다, 따라서 필요한 정보를 인스턴스 변수에 저장해야 한다 (@를 붙이면 인스턴스 변수가 된다)</p><p>p는 객체의 상태를 보여주고 자기 자신을 리턴하는 것에 비해 puts는 단순히 프로그램의 표준 출력에 문자열을 출력하고 nil을 반환할 뿐이다, puts에 객체를 인자로 넘겨주면 가장 간단한 방법으로 처리한다, <code>#&lt;객체의 이름:16진수로 된 고유 번호&gt;</code> 하지만 만약 클래스에 to_s가 정의되어 있다면 해당 결과를 출력한다</p><p>인스턴스 변수는 각 인스턴스에 저장되며, 해당 클래스에 정의되는 모든 인스턴스 메소드에서 참조 가능하다</p><hr><h2 id="3-1-객체와-속성"><a href="#3-1-객체와-속성" class="headerlink" title="3.1 객체와 속성"></a>3.1 객체와 속성</h2><p>위의 코드대로라면 객체의 내부 상태는 각 객체 내부에 저장된 정보로 다른 객체에서는 접근할 수 없다, 일반적으로 객체의 일관성을 지키기 위한 책임이 하나의 객체에 전적으로 맡겨진다는 것은 좋은 의미이다</p><p>그러나 객체의 정보가 완전히 감춰진다면 아무 의미도 없으므로, 일반적으로 객체 외부에서 객체 상태에 접근하거나 조작하는 메서드를 별도로 정의해서 외부에서도 객체 상태에 접근 가능하도록 만들어 준다, 이렇게 노출되는 내부 부분을 객체의 속성, attribute라고 한다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInStock</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(isbn, price)</span></span></span><br><span class="line">    @isbn = isbn</span><br><span class="line">    @price = Float(price)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isbn</span></span></span><br><span class="line">    @isbn</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">price</span></span></span><br><span class="line">    @price</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">book = BookInStock.new(<span class="string">"isbn1"</span>, <span class="number">12.34</span>)</span><br><span class="line">puts <span class="string">"ISBN = <span class="subst">#&#123;book.isbn&#125;</span>"</span> <span class="comment"># ISBN = isbn1</span></span><br><span class="line">puts <span class="string">"Price = <span class="subst">#&#123;book.price&#125;</span>"</span> <span class="comment"># Price = 12.34</span></span><br></pre></td></tr></table></figure><p>위와 같은 접근자 메서드는 매우 자주 사용되므로 루비에서는 편의 메서드를 제공한다 (루비는 메서드 마지막에 평가된 표현식의 평가 결과를 반환한다, 여기서는 인스턴스 변수의 값을 반환할 것이다)</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInStock</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:isbn</span>, <span class="symbol">:price</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(isbn, price)</span></span></span><br><span class="line">    @isbn = isbn</span><br><span class="line">    @price = Float(price)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">book = BookInStock.new(<span class="string">"isbn1"</span>, <span class="number">12.34</span>)</span><br><span class="line">puts <span class="string">"ISBN = <span class="subst">#&#123;book.isbn&#125;</span>"</span> <span class="comment"># ISBN = isbn1</span></span><br><span class="line">puts <span class="string">"Price = <span class="subst">#&#123;book.price&#125;</span>"</span> <span class="comment"># Price = 12.34</span></span><br></pre></td></tr></table></figure><p>attr_reader는 접근자 메서드를 대신 생성해준다</p><p>:isbn 에서 심볼 표현을 볼 수 있는데, 심볼은 이름을 참조할 때 사용하기 좋다, :이 있다면 isbn이라는 이름을, :이 없다면 변수의 값 자체를 의미한다, :isbn에 대응하는 접근자 메서드에서 반환할 인스턴스 변수는 당연히 @isbn이다</p><p>루비에서 인스턴스 변수와 접근자 메서드는 분리되어 있다, attr_reader는 인스턴스 변수를 쉽게 선언할 수 있도록 만들어진 선언문이 아니다</p><h4 id="쓰기-가능한-속성"><a href="#쓰기-가능한-속성" class="headerlink" title="쓰기 가능한 속성"></a>쓰기 가능한 속성</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInStock</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:isbn</span>, <span class="symbol">:price</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(isbn, price)</span></span> @isbn = isbn</span><br><span class="line">    @price = Float(price)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">price=</span><span class="params">(new_price)</span></span></span><br><span class="line">    @price = new_price</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">book = BookInStock.new(<span class="string">"isbn1"</span>, <span class="number">33.80</span>)</span><br><span class="line">puts <span class="string">"ISBN = <span class="subst">#&#123;book.isbn&#125;</span>"</span> <span class="comment"># ISBN = isbn1</span></span><br><span class="line">puts <span class="string">"Price = <span class="subst">#&#123;book.price&#125;</span>"</span> <span class="comment"># Price = 33.8</span></span><br><span class="line">book.price = book.price * <span class="number">0</span>.<span class="number">75</span> <span class="comment"># 할인가격</span></span><br><span class="line">puts <span class="string">"New price = <span class="subst">#&#123;book.price&#125;</span>"</span> <span class="comment"># New price = 25.349999999999998</span></span><br></pre></td></tr></table></figure><p>setter 메서드는 위와 같은 형식으로 선언되어야 하는데, 값을 대입하는 메서드만 만들고 싶다면, attr_writer를 사용하면 된다, 하지만 이런 경우는 매우 드물기 때문에 인스턴스 변수의 값을 속성으로 읽는 것과 대입하는 것 모두를 한 번에 정의해주는 attr_accessor를 제공한다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInStock</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:isbn</span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:price</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(isbn, price)</span></span></span><br><span class="line">    @isbn = isbn</span><br><span class="line">    @price = Float(price)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">book = BookInStock.new(<span class="string">"isbn1"</span>, <span class="number">33.80</span>)</span><br><span class="line">puts <span class="string">"ISBN = <span class="subst">#&#123;book.isbn&#125;</span>"</span> <span class="comment"># ISBN = isbn1</span></span><br><span class="line">puts <span class="string">"Price = <span class="subst">#&#123;book.price&#125;</span>"</span> <span class="comment"># Price = 33.8</span></span><br><span class="line">book.price = book.price * <span class="number">0</span>.<span class="number">75</span></span><br><span class="line">puts <span class="string">"New price = <span class="subst">#&#123;book.price&#125;</span>"</span> <span class="comment"># New price = 25.349999999999998</span></span><br></pre></td></tr></table></figure><p>속성과 관련한 메서드가 단순히 인스턴스 변수를 읽거나 대입만 하는 간단한 메서드일 필요는 없다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInStock</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:isbn</span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:price</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(isbn, price)</span></span></span><br><span class="line">    @isbn = isbn</span><br><span class="line">    @price = Float(price)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">price_in_cents</span></span></span><br><span class="line">    Integer(price*<span class="number">100</span> + <span class="number">0</span>.<span class="number">5</span>) <span class="comment"># 0.5를 더한 뒤 정수로 변환하여 반올림된 실제 값에 가까운 정수를 얻기 위함</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">price_in_cents=</span><span class="params">(cents)</span></span></span><br><span class="line">    @price = cents / <span class="number">100.0</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">book = BookInStock.new(<span class="string">"isbn1"</span>, <span class="number">33.80</span>)</span><br><span class="line">puts <span class="string">"Price = <span class="subst">#&#123;book.price&#125;</span>"</span> <span class="comment"># Price = 33.8</span></span><br><span class="line">puts <span class="string">"Price in cents = <span class="subst">#&#123;book.price_in_cents&#125;</span>"</span> <span class="comment">#  Price in cents = 3380</span></span><br><span class="line">book.price_in_cents = <span class="number">1234</span></span><br><span class="line">puts <span class="string">"Price = <span class="subst">#&#123;book.price&#125;</span>"</span> <span class="comment"># Price = 12.34</span></span><br><span class="line">puts <span class="string">"Price in cents = <span class="subst">#&#123;book.price_in_cents&#125;</span>"</span> <span class="comment"># Price in cents = 1234</span></span><br></pre></td></tr></table></figure><p>price_in_cents는 객체 밖에서는 객체의 속성(attribute)로 보이지만, 내부적으로 저 속성에 대응하는 인스턴스 변수는 존재하지 않는다</p><p>인스턴스 변수와 계산된 값의 차이를 숨겨서, 클래스 구현에서 내부를 보호할 수 있는 방법을 제공할 수 있다, 이는 단일 접근 법칙과 관련이 있다</p><h4 id="속성-인스턴스-변수-메서드"><a href="#속성-인스턴스-변수-메서드" class="headerlink" title="속성, 인스턴스 변수, 메서드"></a>속성, 인스턴스 변수, 메서드</h4><p>속성과 메서드의 차이는 무엇인가?</p><p>속성은 단지 메서드일 뿐이다. 속성은 getter이기도, computed value를 반환하기도, 또는 setter의 역할을 하기도 한다, 어디까지가 속성이고 어디서부터가 일반 메서드인가? 속성을 일반 메서드와 구분 짓는 차이점은 무엇일까? 사실 적당히 취향대로 골라잡으면 되지만, 아래와 같이 생각해볼 수 있다</p><p>클래스를 설계할 때는 내부적으로 어떤 상태를 가지고, 이 상태를 외부(그 클래스의 사용자)에 어떤 모습으로 노출할지 결정해야 한다, 여기서 내부 상태는 인스턴스 변수에 저장한다, 외부에 보이는 상태는 속성(attribute)이라고 부르는 메서드를 통해야만 한다, 그 밖에 클래스가 할 수 있는 모든 행동은 일반 메서드를 통해야만 한다, 이런 구분법이 아주 중요한 것은 아니지만, 그래도 객체의 외부 상태를 속성이라고 부른다면 클래스를 사용하는 사람이 우리가 만든 클래스를 어떻게 봐야 하는지에 대한 힌트를 줄 수 있을 것이다</p><hr><h2 id="3-2-다른-클래스와-함께-사용하기"><a href="#3-2-다른-클래스와-함께-사용하기" class="headerlink" title="3.2 다른 클래스와 함께 사용하기"></a>3.2 다른 클래스와 함께 사용하기</h2><p>객체지향 설계에서는 외부의 대상을 파악하고 이를 코드를 통해 클래스로 만든다, 하지만 설계상에서 클래스의 대상이 되는 또 다른 대상이 있다, 이는 외부가 아닌 내부 코드 자체에 대응하는 클래스다</p><p>예를 들어 헌책방의 CSV 데이터를 읽어 들여 여러 가지 보고서를 만들어야 한다면, CSV 데이터를 읽어 들여 통계를 내고 요약해야 한다</p><p>어떻게 통계를 내고 요약할지에 따라서 설계 방향이 결정된다, 그리고 그 답은 CSV 리더에 있다 (각각의 CSV 데이터가 어떻게 생겼을지는 앞의 BookInStock에서 정의했다)</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># book_in_stock.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInStock</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:isbn</span>, <span class="symbol">:price</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(isbn, price)</span></span></span><br><span class="line">    @isbn = isbn</span><br><span class="line">    @price = Float(price)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># csv_reaedr.rb</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'csv'</span></span><br><span class="line">require_relative <span class="string">'book_in_stock'</span> <span class="comment"># require_relative을 사용하는 것은 로드하려는 파일의 위치가 로드하는 파일을 기준으로 상대 위치에 있기 때문이다. 여기서 두 파일은 모두 같은 위치에 있다</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CsvReader</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></span><br><span class="line">    @books_in_stock = []</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">read_in_csv_data</span><span class="params">(csv_file_name)</span></span></span><br><span class="line">    CSV.foreach(csv_file_name, <span class="symbol">headers:</span> <span class="literal">true</span>) <span class="keyword">do</span> <span class="params">|row|</span></span><br><span class="line">      @books_in_stock &lt;&lt; BookInStock.new(row[<span class="string">"ISBN"</span>], row[<span class="string">"Price"</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">total_value_in_stock</span></span></span><br><span class="line">    sum = <span class="number">0</span>.<span class="number">0</span></span><br><span class="line">    @books_in_stock.each &#123;<span class="params">|book|</span> sum += book.price&#125;</span><br><span class="line">    sum</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">number_of_each_isbn</span></span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stock_stats.rb</span></span><br><span class="line">require_relative <span class="string">'csv_reader'</span></span><br><span class="line"></span><br><span class="line">reader = CsvReader.new ARGV.each <span class="keyword">do</span> <span class="params">|csv_file_name|</span></span><br><span class="line">  STDERR.puts <span class="string">"Processing <span class="subst">#&#123;csv_file_name&#125;</span>"</span></span><br><span class="line">  reader.read_in_csv_data(csv_file_name)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">"Total value = <span class="subst">#&#123;reader.total_value_in_stock&#125;</span>"</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-3-접근-제어"><a href="#3-3-접근-제어" class="headerlink" title="3.3 접근 제어"></a>3.3 접근 제어</h2><p>클래스 인터페이스를 설계할 때, 클래스를 외부에 어느 정도까지 노출할지 결정하는 것은 중요한 일이다</p><p>클래스에 너무 깊이 접근하도록 허용하면 각 요소 간의 결합도가 높아질 우려가 있다, 다시 말해 이 클래스의 사용자 코드는 클래스 내부 구현의 세세한 부분에까지 종속적이 되기 쉽다는 것이다</p><p>루비에서 객체 상태를 변경하는 방법은 메서드를 호출하는 것일 뿐이므로 메서드에 대한 접근을 적절히 설정하면 객체에 대한 접근을 제어할 수 있다, 경험적으로 볼 때 객체의 상태를 망가뜨릴 수 있는 메서드는 노출해서는 안 된다</p><p>루비의 세 가지 보호 단계는 다음과 같다</p><ul><li>public : 접근 제어가 없음, 메서드는 기본적으로 public (단, initialize는 예외적으로 항상 private)</li><li>protected : 이 메서드는 그 객체를 정의한 클래스와 하위 클래스에서만 호출할 수 있다</li><li>private : 메서드는 수신자를 지정해서 호출할 수 없다, 오직 현재 객체에서만 호출 가능</li></ul><ul><li style="list-style: none"><input type="checkbox"> 루비는 접근 제어가 동적으로 결정된다, 따라서 접근 위반 예외는 제한된 메서드를 실제로 호출한 그 때에만 발생한다</li></ul><h3 id="접근-제어-기술하기"><a href="#접근-제어-기술하기" class="headerlink" title="접근 제어 기술하기"></a>접근 제어 기술하기</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:balance</span></span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(balance)</span></span></span><br><span class="line">    @balance = balance</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Transaction</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(account_a, account_b)</span></span></span><br><span class="line">    @account_a = account_a</span><br><span class="line">    @account_b = account_b</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">transfer</span><span class="params">(amount)</span></span></span><br><span class="line">    debit(@account_a, amount)</span><br><span class="line">    credit(@account_b, amount)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">  private</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">debit</span><span class="params">(account, amount)</span></span></span><br><span class="line">    account.balance -= amount</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">credit</span><span class="params">(account, amount)</span></span></span><br><span class="line">    account.balance += amount</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">savings = Account.new(<span class="number">100</span>)</span><br><span class="line">checking = Account.new(<span class="number">200</span>)</span><br><span class="line">trans = Transaction.new(checking, savings)</span><br><span class="line">trans.transfer(<span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>protected 접근은 객체가 같은 클래스에서 생성된 다른 객체의 상태에 접근할 필요가 있을 때 사용한다. 예를 들어 각각의 Account 객체의 결산 잔액을 비교 하고 싶은데, 잔액 자체는 (아마 다른 형식으로 보여주고자 하기 때문에) 외부에 보여주고 싶지는 않은 경우를 보자.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:cleared_balance</span> <span class="comment"># 접근자 메서드 'cleared_balance'를 만든다.</span></span><br><span class="line">  protected <span class="symbol">:cleared_balance</span> <span class="comment"># 접근자 메서드를 protected 메서드로 설정한다.</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">greater_balance_than?</span><span class="params">(other)</span></span></span><br><span class="line">    @cleared_balance &gt; other.cleared_balance</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-4-변수"><a href="#3-4-변수" class="headerlink" title="3.4 변수"></a>3.4 변수</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">person = <span class="string">"Tim"</span></span><br><span class="line">puts <span class="string">"The object in 'person' is a <span class="subst">#&#123;person.<span class="keyword">class</span>&#125;</span>"</span> <span class="comment"># The object in 'person' is a String</span></span><br><span class="line">puts <span class="string">"The object has an id of <span class="subst">#&#123;person.object_id&#125;</span>"</span> <span class="comment"># The object has an id of 70264079641280</span></span><br><span class="line">puts <span class="string">"and a value of '<span class="subst">#&#123;person&#125;</span>'"</span> <span class="comment"># and a value of 'Tim'</span></span><br></pre></td></tr></table></figure><p>변수는 객체가 아니라 객체에 대한 참조를 가지고 있을 뿐이다, 힙 메모리에 있는 객체를 변수가 가리키고 있다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">person1 = <span class="string">"Tim"</span></span><br><span class="line">person2 = person1</span><br><span class="line">person1[<span class="number">0</span>] = <span class="string">'J'</span></span><br><span class="line">puts <span class="string">"person1 is <span class="subst">#&#123;person1&#125;</span>"</span> <span class="comment"># person1 is Jim</span></span><br><span class="line">puts <span class="string">"person2 is <span class="subst">#&#123;person2&#125;</span>"</span> <span class="comment"># person2 is Jim</span></span><br></pre></td></tr></table></figure><p>person2에 person1을 대입해도 새로운 객체는 생성되지 않으며, 단지 person1 객체에 대한 참조를 person2에 복사해서 같은 객체를 참조하도록 만들 뿐이다</p><p>대입은 객체의 별명을 늘려서 결과적으로 여러 개의 변수가 하나의 객체를 참조하도록 한다</p><p>dup 메서드를 사용한다면 같은 내용을 담은 객체를 새로 생성한다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">person1 = <span class="string">"Tim"</span></span><br><span class="line">person2 = person1.dup person1[<span class="number">0</span>] = <span class="string">"J"</span></span><br><span class="line">puts <span class="string">"person1 is <span class="subst">#&#123;person1&#125;</span>"</span> <span class="comment"># person1 is Jim</span></span><br><span class="line">puts <span class="string">"person2 is <span class="subst">#&#123;person2&#125;</span>"</span> <span class="comment"># person2 is Tim</span></span><br></pre></td></tr></table></figure><p>객체를 동결해서 객체의 상태를 변경할 수 없도록 할 수도 있다, 동결된 객체를 수정하려고 하면 루비는 RuntimeError 예외를 발생시킨다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">person1 = <span class="string">"Tim"</span></span><br><span class="line">person2 = person1</span><br><span class="line">person1.freeze <span class="comment"># 객체 수정을 막는다.</span></span><br><span class="line">person2[<span class="number">0</span>] = <span class="string">"J"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 실행 결과:</span></span><br><span class="line"><span class="comment"># from prog.rb:4:in `&lt;main&gt;'</span></span><br><span class="line"><span class="comment"># prog.rb:4:in `[]=': can't modify frozen String (RuntimeError)</span></span><br></pre></td></tr></table></figure><p>클래스 메서드, 믹스인, 상속 등의 개념은 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;루비에서 다루는 모든 것은 객체이며, 클래스에서 직간접적으로 생성할 수 있다, 이번 장에서는 클래스를 만들고 다루는 법을 살펴본다&lt;/p&gt;
&lt;p&gt;객체지향 시스템을 설계할 때 항상 제일 먼저 해야 하는 일은 다루고자 하는 대상들의 특징을 파악하는 것
      
    
    </summary>
    
      <category term="Ruby" scheme="https://eclatant.io/categories/Ruby/"/>
    
    
      <category term="Ruby" scheme="https://eclatant.io/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>루비 곡괭이 2장 Ruby.new</title>
    <link href="https://eclatant.io/2018/05/13/Ruby-Pickaxe-chapter2/"/>
    <id>https://eclatant.io/2018/05/13/Ruby-Pickaxe-chapter2/</id>
    <published>2018-05-12T15:00:00.000Z</published>
    <updated>2018-05-27T14:56:10.045Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2-1-객체-지향-언어-루비"><a href="#2-1-객체-지향-언어-루비" class="headerlink" title="2.1 객체 지향 언어 루비"></a>2.1 객체 지향 언어 루비</h3><p>메서드 호출을 메시지라고 표현하고, 메시지에는 메서드 이름과 매개 변수들이 포함됨</p><p>절대값을 구해야 할 때, <code>-1234.abs</code> 와 같이 숫자 객체에 abs 메시지를 보내서 처리하도록 요청하면 된다</p><p>모든 루비 객체가 위와 같은 형식으로 동작하며, 언어 자체가 객체 지향적 구현이 잘 되어있다고 볼 수 있다</p><hr><h3 id="2-2-루비-기초"><a href="#2-2-루비-기초" class="headerlink" title="2.2 루비 기초"></a>2.2 루비 기초</h3><p>한 줄에 하나의 표현식만 쓴다면 ;가 필요없다</p><p>주석은 # 로 시작한다</p><p>들여쓰기가 파이썬과 같이 강제이진 않지만, 가독성을 위해 2칸 들여쓰기를 해준다</p><p>메서드 정의에는 def 키워드를 사용하며, {} 가 아닌 아래와 같은 형식으로 표현한다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 괄호가 없어도 되나, 함수 선언시 ()를 사용하는 것을 권장한다</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_goodnight</span><span class="params">(name)</span></span></span><br><span class="line">  result = <span class="string">'Good night, '</span> + name</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts(say_goodnight(<span class="string">'John-Boy'</span>))</span><br><span class="line">puts say_goodnight(<span class="string">'John-Boy'</span>)</span><br><span class="line">puts say_goodnight <span class="string">'John-Boy'</span></span><br></pre></td></tr></table></figure><p>루비는 동적 타이핑 언어이므로 변수 할당시 타입에 대한 명시없이 할당하면 바로 선언이 이루어진다</p><p>괄호없이 호출이 가능하다, 하지만 특정 매개변수를 어떤 메서드 호출에 보내야 할지 우선순위를 판단하기 어려울 수 있으므로, 간단한 경우를 제외하고는 괄호를 권장한다</p><p>루비에서는 ‘’ 와 “”도 차이가 존재한다</p><p>‘’는 몇 가지 예외를 제외하고는 입력값이 곧 문자열의 값이 된다</p><p>“”는 \n을 줄 바꿈 문자로 변경하고, 문자열 안에 #{expression}가 있을 시 평가한 값으로 변환한다</p><p>또한 루비 메서드에서는 마지막으로 실행된 표현식의 결괏값이 반환된다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 괄호가 없어도 되나, 함수 선언시 ()를 사용하는 것을 권장한다</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_goodnight</span><span class="params">(name)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">"Good night, <span class="subst">#&#123;name.capitalize&#125;</span>"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts say_goodnight(<span class="string">'uncle'</span>)</span><br></pre></td></tr></table></figure><p>지역 변수, 메서드 매개 변수, 메서드 이름은 모두 소문자 또는 _로 시작해야 한다</p><p>전역변수는 $로, 인스턴스 변수는 @, 클래스 변수는 @@로 시작한다</p><p>인스턴스 변수는 snake_case, 클래스명은 MixedCase와 같이 PascalCase Convention을 사용한다</p><p>또한 메서드명은 ?, !, = 로 끝날 수 있다</p><hr><h3 id="2-3-배열과-해시"><a href="#2-3-배열과-해시" class="headerlink" title="2.3 배열과 해시"></a>2.3 배열과 해시</h3><p>배열과 해시는 키를 이용하여 접근할 수 있는 객체 모음이다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">1</span>, <span class="string">'cat'</span>, <span class="number">3.14</span>]</span><br><span class="line">puts <span class="string">"The first element <span class="subst">#&#123;arr[<span class="number">0</span>]&#125;</span>"</span> <span class="comment"># The first element is 1</span></span><br><span class="line">arr[<span class="number">2</span>] = <span class="literal">nil</span></span><br><span class="line">puts <span class="string">"The first element <span class="subst">#&#123;arr.inspect&#125;</span>"</span> <span class="comment"># The array is now [1, "cat", nil]</span></span><br></pre></td></tr></table></figure><p>inspect는 자기 자신을 string으로 변환한 결과값을 반환하는 메서드이다</p><p>많은 언어에서는 nil(또는 null)이 아무 객체도 아님을 의미하지만, 루비에서는 아무것도 아님을 표현하는 하나의 객체이다</p><p>단어의 배열을 만드는 또 다른 방법도 있다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr = <span class="string">%w&#123; ant bee cat dog elk &#125;</span> <span class="comment"># ["ant", "bee", "cat", "dog", "elk"]</span></span><br><span class="line">arr[<span class="number">0</span>] <span class="comment"># "ant"</span></span><br><span class="line">arr[<span class="number">3</span>] <span class="comment"># "dog"</span></span><br></pre></td></tr></table></figure><p>해시는 아래와 같다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">inst_section1 = &#123;</span><br><span class="line">  <span class="string">'cello'</span> =&gt; <span class="string">'string'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;"cello"=&gt;"string"&#125;</span></span><br><span class="line"></span><br><span class="line">inst_section2 = &#123;</span><br><span class="line">  <span class="symbol">:cello</span> =&gt; <span class="string">'string'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;:cello=&gt;"string"&#125;</span></span><br><span class="line"></span><br><span class="line">inst_section3 = &#123;</span><br><span class="line">  <span class="string">'cello'</span>: <span class="string">'string'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;:cello=&gt;"string"&#125;</span></span><br><span class="line"></span><br><span class="line">p inst_section1[<span class="string">'cello'</span>] <span class="comment"># "string"</span></span><br><span class="line">p inst_section1[<span class="symbol">:cello</span>] <span class="comment"># nil</span></span><br><span class="line"></span><br><span class="line">p inst_section2[<span class="string">'cello'</span>] <span class="comment"># nil</span></span><br><span class="line">p inst_section2[<span class="symbol">:cello</span>] <span class="comment"># "string"</span></span><br><span class="line"></span><br><span class="line">p inst_section3[<span class="string">'cello'</span>] <span class="comment"># nil</span></span><br><span class="line">p inst_section3[<span class="symbol">:cello</span>] <span class="comment"># "string"</span></span><br></pre></td></tr></table></figure><p>p 메서드는 객체의 값을 화면에 출력한다 (nil과 같은 객체도 명시적으로 출력)</p><p>:cello와 같이 생긴, 심볼이라는 것이 무엇인지는 다음 챕터에서 다루도록 할테니 우선은 특수한 문자열이라고 생각하고 진행하자</p><p><a href="https://github.com/dalzony/ruby-style-guide/blob/master/README-koKR.md#symbols-as-keys" target="_blank" rel="noopener">해시 키는 문자열 보다 심볼을 사용하는 것이 좋다.</a>, <a href="https://github.com/dalzony/ruby-style-guide/blob/master/README-koKR.md#no-mutable-keys" target="_blank" rel="noopener">변경 가능한 객체를 해시 키로 사용하지 마라.</a>,  <a href="https://github.com/dalzony/ruby-style-guide/blob/master/README-koKR.md#hash-literals" target="_blank" rel="noopener">해시 키가 심볼인 경우 루비 1.9 해시 리터럴을 사용하라.</a> 를 참고하면 객체 선언시 inst_section3과 같은 방식으로 하는 것이 선호됨을 알 수 있다</p><p>해시에서 키와 값에는 어떠한 객체가 와도 상관없다</p><p>없는 값을 참조하면 위와 같이 nil을 반환한다</p><p>루비에서는 nil이 거짓을 의미하기에 조건문에서 활용하기 좋다</p><p>그러나 예를 들어, 기본값을 0으로 바꾸는 것이 필요하다면 아래와 같이 하면 된다<br>(단어를 셀 때, 키가 있는지 확인하지 않아도, 그저 값을 1 올려주면 된다)</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">histogram = Hash.new(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">histogram[<span class="symbol">:ruby</span>] = <span class="number">0</span></span><br><span class="line">histogram[<span class="symbol">:ruby</span>] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">p histogram[<span class="symbol">:ruby</span>] <span class="comment"># 1</span></span><br><span class="line">p histogram[<span class="string">"ruby"</span>] <span class="comment"># 0</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-4-심볼"><a href="#2-4-심볼" class="headerlink" title="2.4 심볼"></a>2.4 심볼</h3><p>심볼이란 미리 정의할 필요가 없는 동시에 유일한 값이 보장되는 상수명이다</p><p>:로 시작하며 그 다음에 이름이 온다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">inst_section = &#123;</span><br><span class="line">  <span class="symbol">cello:</span> <span class="string">'string'</span>,</span><br><span class="line">  <span class="symbol">clarinet:</span> <span class="string">'woodwind'</span>,</span><br><span class="line">  <span class="symbol">drum:</span> <span class="string">'percussion'</span>,</span><br><span class="line">  <span class="symbol">oboe:</span> <span class="string">'woodwind'</span>,</span><br><span class="line">  <span class="symbol">trumpet:</span> <span class="string">'brass'</span>,</span><br><span class="line">  <span class="symbol">violin:</span> <span class="string">'string'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">puts <span class="string">"An oboe is a <span class="subst">#&#123;inst_section[<span class="symbol">:oboe</span>]&#125;</span> instrument"</span></span><br><span class="line"><span class="comment"># An oboe is a woodwind instrument</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-5-제어-구조"><a href="#2-5-제어-구조" class="headerlink" title="2.5 제어 구조"></a>2.5 제어 구조</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">today = Time.now</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> today.saturday?</span><br><span class="line">  puts <span class="string">'Do chores around the horse'</span></span><br><span class="line"><span class="keyword">elsif</span> today.sunday?</span><br><span class="line">  puts <span class="string">'Relax'</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  puts <span class="string">'Go tto work'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Go to work</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> radiation &gt; <span class="number">3000</span></span><br><span class="line">  puts <span class="string">'Danger, Will Robinson'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 위를 한 줄로 줄이면, 아래와 같이 된다</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">'Danger, Will Robinson'</span> <span class="keyword">if</span> radiation &gt; <span class="number">3000</span></span><br><span class="line"></span><br><span class="line">square = <span class="number">4</span></span><br><span class="line"><span class="keyword">while</span> square &lt; <span class="number">1000</span></span><br><span class="line">  square *= square</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 위를 한 줄로 줄이면, 아래와 같이 된다</span></span><br><span class="line"></span><br><span class="line">square = <span class="number">4</span></span><br><span class="line">square *= square <span class="keyword">while</span> square &lt; <span class="number">1000</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-6-정규-표현식"><a href="#2-6-정규-표현식" class="headerlink" title="2.6 정규 표현식"></a>2.6 정규 표현식</h3><p>정규 표현식은 문자열에 매치되는 패턴을 기술하는 방법이며, 루비에서는 역시 객체이다</p><p>루비에서는 슬래시 사이에 패턴을 적으면 정규 표현식을 의미한다 <code>/pattern/</code></p><p>Perl이나 Python을 포함하는 문자열을 찾기 위해서는 다음과 같다 <code>/Perl|Python/</code></p><p>다음과 같이 할 수도 있다 <code>/P(erl|ython)/</code></p><p><code>/ab+c/</code> 는 a가 하나 오고, 1개 이상의 b가 오고, 이어서 c가 오는 문자열을 뜻한다</p><p>/\d\d:\d\d:\d\d/ # 12:34:56 형태의 시간</p><p>/Perl.*Python/ # Perl, 0 개 이상의 문자들 , 그리고 Python</p><p>/Perl Python/ # Perl, 공백 , Python</p><p>/Perl *Python/ # Perl, 0 개 이상의 공백 , 그리고 Python</p><p>/Perl +Python/ # Perl, 1 개 이상의 공백 , 그리고 Python</p><p>/Perl\s+Python/ # Perl, 1 개 이상의 공백 문자 , 그리고 Python</p><p>/Ruby (Perl|Python)/ # Ruby, 공백 , 그리고 Perl 이나 Python</p><p>매치 연산자 =~ 는 문자열에서 패턴이 발견되면 첫 위치, 그렇지 않으면 nil을 반환한다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">line = gets</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> line =~ <span class="regexp">/Perl|Python/</span></span><br><span class="line">  puts <span class="string">"Scripting language mentioned: <span class="subst">#&#123;line&#125;</span>"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>정규 표현식을 활용해 치환할 수도 있다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">line = gets</span><br><span class="line"></span><br><span class="line">newline = line.sub(<span class="regexp">/Perl/</span>, <span class="string">'Ruby'</span>) <span class="comment"># 처음 나오는 'Perl'을 'Ruby'로 바꾼다</span></span><br><span class="line">newerline = newline.gsub(<span class="regexp">/Python/</span>, <span class="string">'Ruby'</span>) <span class="comment"># 모든 'Python'을 'Ruby'로 바꾼다</span></span><br><span class="line">newestline = line.gsub(<span class="regexp">/Perl|Python/</span>, <span class="string">'Ruby'</span>) <span class="comment"># 모든 'Perl', 'Python'을 'Ruby'로 바꾼다</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-7-블록과-반복자"><a href="#2-7-블록과-반복자" class="headerlink" title="2.7 블록과 반복자"></a>2.7 블록과 반복자</h3><p>블록은 마치 매개 변수처럼 메서드 호출과 결합할 수 있는 기능이다</p><p>콜백을 구현할 수도 있고, 코드의 일부를 함수에 넘겨주거나 반복자를 구현할 수도 있다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123; puts <span class="string">'Hello'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  club.enroll(person)</span><br><span class="line">  person.socialize</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>중괄호는 do/end 쌍보다 연산자 우선순위가 높다</p><p>한 줄의 블록은 중괄호로, 여러 줄의 블록은 do/end를 사용한다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">greet &#123; puts <span class="string">'Hi'</span> &#125;</span><br><span class="line"></span><br><span class="line">verbose_greet(<span class="string">'Dave'</span>, <span class="string">'loyal customer'</span>) &#123; puts <span class="string">'Hi'</span> &#125;</span><br></pre></td></tr></table></figure><p>메서드에서 yield 문을 이용하여 블록을 여러 차례 실행할 수 있다, yield 문은 yield를 포함하는 메서드에 연관된 블록을 호출하는 메서드 호출로 생각해도 무방하다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call_back</span></span></span><br><span class="line">  puts <span class="string">'Start of method'</span> <span class="comment"># Start of method</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="comment"># In the block</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="comment"># In the block</span></span><br><span class="line">  puts <span class="string">'End of method'</span> <span class="comment"># End of method</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">call_back &#123; puts <span class="string">'In the block'</span> &#125;</span><br></pre></td></tr></table></figure><p>블록을 메서드에 결합시키는 것은 인자를 넘겨주는 것보다는 블록과 메서드 사이에서 제어권을 주고받는 코루틴으로 보아야 한다</p><p>yield 문에 인자를 적으면 블록에 매개 변수로 전달된다, 블록에서는 |params|와 같이 매개 변수의 이름을 정의한다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">who_says_what</span></span></span><br><span class="line">  <span class="keyword">yield</span>(<span class="string">'Dave'</span>, <span class="string">'hello'</span>) <span class="comment"># Dave says hello</span></span><br><span class="line">  <span class="keyword">yield</span>(<span class="string">'Andy'</span>, <span class="string">'goodbye'</span>) <span class="comment"># Andy says goodbye</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">who_says_what &#123; <span class="params">|person, phrase|</span> puts <span class="string">"<span class="subst">#&#123;person&#125;</span> says <span class="subst">#&#123;phrase&#125;</span>"</span> &#125;</span><br></pre></td></tr></table></figure><p>반복자 구현에도 쓰이는데, 반복자란 배열 등의 집합에서 구성 요소를 하나씩 반환해주는 함수이다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">animals = <span class="string">%w( ant bee cat dog )</span></span><br><span class="line">animals.each &#123; <span class="params">|animal|</span> puts animal &#125;</span><br><span class="line"><span class="comment"># ant</span></span><br><span class="line"><span class="comment"># bee</span></span><br><span class="line"><span class="comment"># cat</span></span><br><span class="line"><span class="comment"># dog</span></span><br><span class="line"></span><br><span class="line">[ <span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'horse'</span> ].each &#123; <span class="params">|name|</span> print name, <span class="string">" "</span> &#125;</span><br><span class="line"><span class="number">5</span>.times &#123; print <span class="string">"*"</span> &#125;</span><br><span class="line"><span class="number">3</span>.upto(<span class="number">6</span>) &#123;<span class="params">|i|</span> print i &#125;</span><br><span class="line"><span class="number">4</span>.(<span class="string">'a'</span>..<span class="string">'e'</span>).each &#123;<span class="params">|char|</span> print char &#125;</span><br><span class="line"><span class="number">5</span>.puts</span><br><span class="line"></span><br><span class="line"><span class="comment"># cat dog horse *****3456abcde</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-8-읽기와-쓰기"><a href="#2-8-읽기와-쓰기" class="headerlink" title="2.8 읽기와 쓰기"></a>2.8 읽기와 쓰기</h3><p>printf는 매개 변수를 특정 형식 문자열에 따라서 제어해 출력해준다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">printf(<span class="string">"Number: %5.2f,\nString: %s\n"</span>, <span class="number">1.23</span>, <span class="string">"hello"</span>)</span><br><span class="line"><span class="comment"># Number: 1.23,</span></span><br><span class="line"><span class="comment"># String: hello</span></span><br></pre></td></tr></table></figure><p>%5.2f 는 다섯 글자로 맞추고, 소수점 아래 두 자리만 표시한다는 의미라고 책에 나와있지만, 숫자를 수정해도 소숫점과 달리 정수 부분은 입력한 그대로 잘 나온다..</p><hr><h3 id="2-9-명령행-인자"><a href="#2-9-명령행-인자" class="headerlink" title="2.9 명령행 인자"></a>2.9 명령행 인자</h3><p>명령행에서 실행할 때 넘어오는 인자에 접근하는 방법은 두 가지이다</p><ol><li>ARGV</li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cmd_line.rb</span></span><br><span class="line">puts <span class="string">"You gave <span class="subst">#&#123;ARGV.size&#125;</span> arguments"</span></span><br><span class="line">p ARGV</span><br><span class="line"></span><br><span class="line"><span class="comment"># $ ruby cmd_line.rb ant bee cat dog</span></span><br><span class="line"><span class="comment"># You gave 4 arguments</span></span><br><span class="line"><span class="comment"># ["ant", "bee", "cat", "dog"]</span></span><br></pre></td></tr></table></figure><ol start="2"><li>ARGF</li></ol><p>ARGF는 명령행에서 넘겨진 이름을 가진 모든 파일의 내용을 가지고 있는 I/O이다</p><hr><h3 id="2-10-루비-시작하기"><a href="#2-10-루비-시작하기" class="headerlink" title="2.10 루비 시작하기"></a>2.10 루비 시작하기</h3><p>이번 장에선 객체, 메서드, 문자열, 컨테이너, 정규 표현식, 제어문, 반복자 에 대해서 학습하였다</p><hr><h2 id="3장-클래스-객체-변수"><a href="#3장-클래스-객체-변수" class="headerlink" title="3장 클래스, 객체, 변수"></a>3장 클래스, 객체, 변수</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;2-1-객체-지향-언어-루비&quot;&gt;&lt;a href=&quot;#2-1-객체-지향-언어-루비&quot; class=&quot;headerlink&quot; title=&quot;2.1 객체 지향 언어 루비&quot;&gt;&lt;/a&gt;2.1 객체 지향 언어 루비&lt;/h3&gt;&lt;p&gt;메서드 호출을 메시지라고 표현하고
      
    
    </summary>
    
      <category term="Ruby" scheme="https://eclatant.io/categories/Ruby/"/>
    
    
      <category term="Ruby" scheme="https://eclatant.io/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>레일즈 기초</title>
    <link href="https://eclatant.io/2018/05/08/Rails-Intro/"/>
    <id>https://eclatant.io/2018/05/08/Rails-Intro/</id>
    <published>2018-05-07T15:00:00.000Z</published>
    <updated>2018-05-08T20:57:17.828Z</updated>
    
    <content type="html"><![CDATA[<h2>Framework?</h2><p>일반적인 의미에서 프레임워크란? 문제를 일반화하고 해결하기 위한 틀</p><p>프로그래밍에서의 프레임워크란, 설계와 재사용이 가능한 클래스를 제공</p><p>라이브러리와의 차이는 <strong>제어역전</strong> (Inversion of Control)</p><p>라이브러리는 사용자 코드에서 호출되어지나 프레임워크는 자신의 라이프 사이클을 직접 관리하며 그 흐름 속에 개발자가 원하는 부분에 사용자 코드를 추가하여 기능을 구현하는 형태</p><p>프레임워크의 장점은 생산성, 유지보수성, 일정한 퀄리티 보장</p><hr><h2>MVC</h2><p><img src="http://adrianmejia.com/images/rails_arch.png" alt="img"></p><p><img src="https://cdn-images-1.medium.com/max/629/1*lFMcocBQ4zF-Q-_SvM8c7Q.jpeg" alt="img"></p><p>Controller : 요청 데이터 처리, 비즈니스 로직 호출, 출력으로 전달</p><p>View : 최종적인 출력 생성</p><p>Model ( 순수한 데이터 원형 ) : 비즈니스 로직, 데이터 조작</p><p>Controller의 책임</p><ol><li>Model 생성</li><li>Model의 옵져버<ul><li>Model과 강하게 바인딩되지 않기 위해서 옵저버 패턴 차용</li><li>Model의 데이터를 가져와서 View를 만드는 것이 목적이므로</li></ul></li><li>View 생성</li><li>View에게 모델을 전달</li><li>View의 액션을 처리</li></ol><p>View의 책임</p><ol><li>모델에 기반하여 렌더링</li><li>입력의 처리를 Controller에게 위임</li></ol><p>MVC, MVP, MVVM 의 차이점은 MV의 관계</p><p>MVC에서는 View가 Model을 알고 있는 것</p><p>Controller는 연결에 대한 책임을 지며, 그림을 그리는 것은 전적으로 View의 책임</p><p>View에서 Model을 직접적으로 수신하지 않는 이유</p><ul><li>View는 전체 공정 중의 일부만 그리게 되어있으므로 Controller가 데이터에 대한 후처리, 컨트롤러의 추가 작업 등을 거친 뒤에 모델을 넘겨준다</li></ul><p>MVC에서의 View는 Model과 Controller를 모두 다 알고 있음</p><ul><li>Model은 렌더링할 데이터</li><li>Controller는 이벤트의 처리를 위임할 대상</li></ul><p>Controller는 App(또는 Router)에 의해 만들어진다</p><p>Model을 상황에 따라서 공급해줄 필요가 있다면 Service도 등장</p><p>위와 같은 형태를 제왕적 Controller 모델이라고 부른다</p><p>문제점은 Controller에게 책임이 너무 많기 때문에 잘 만들기가 대단히 어렵고 그에 따라 문제들이 발생한다는 것이고, 규모가 커질수록 Controller의 책임을 나누기 위해 많은 추상층을 만들어내게 되고 점점 더 복잡해진다</p><hr><h2>Rails의 교리, <a href="https://rubyonrails.org/doctrine/" target="_blank" rel="noopener">The Rails Doctrine</a></h2><ol><li><a href="https://rubyonrails.org/doctrine/#optimize-for-programmer-happiness" target="_blank" rel="noopener">Optimize for programmer happiness</a></li><li><a href="https://rubyonrails.org/doctrine/#convention-over-configuration" target="_blank" rel="noopener">Convention over Configuration</a></li><li><a href="https://rubyonrails.org/doctrine/#omakase" target="_blank" rel="noopener">The menu is omakase</a></li><li><a href="https://rubyonrails.org/doctrine/#no-one-paradigm" target="_blank" rel="noopener">No one paradigm</a></li><li><a href="https://rubyonrails.org/doctrine/#beautiful-code" target="_blank" rel="noopener">Exalt beautiful code</a></li><li><a href="https://rubyonrails.org/doctrine/#provide-sharp-knives" target="_blank" rel="noopener">Provide sharp knives</a></li><li><a href="https://rubyonrails.org/doctrine/#integrated-systems" target="_blank" rel="noopener">Value integrated systems</a></li><li><a href="https://rubyonrails.org/doctrine/#progress-over-stability" target="_blank" rel="noopener">Progress over stability</a></li><li><a href="https://rubyonrails.org/doctrine/#big-tent" target="_blank" rel="noopener">Push up a big tent</a></li></ol><p><a href="https://rubyonrails.org/doctrine/#optimize-for-programmer-happiness" target="_blank" rel="noopener">Optimize for programmer happiness</a></p><ul><li>루비( <code>“Ruby is designed to make programmers happy.”</code> )가 그러하듯, Rails도 프로그래머의 행복을 추구한다는 의미인 듯</li></ul><p><a href="https://rubyonrails.org/doctrine/#convention-over-configuration" target="_blank" rel="noopener">Convention over Configuration</a></p><ul><li>Rails 하면 떠올리는 가장 대표적인 원칙 두 가지 중 하나인 듯 하다 ( 나머지 하나는 <code>Don't Repeat Yourself</code>  )  이 프로덕트에서 변별적 차이가 존재하는 부분을 제외한, 전형적인 부분들은 특정한 컨벤션을 사용하는 것을 통해 생산성을 증대하는 것을 목표로 한다</li></ul><p><a href="https://rubyonrails.org/doctrine/#omakase" target="_blank" rel="noopener">The menu is omakase</a></p><ul><li>프레임워크를 선택하는 이유일 것, 어떤 일을 할 때 무슨 도구가 좋을지 선별할 수 있는 눈이 아직 없다면 프레임워크에서 제공하는 잘 정제된 도구를 활용하여 생산성을 낼 수 있다</li></ul><p><a href="https://rubyonrails.org/doctrine/#no-one-paradigm" target="_blank" rel="noopener">No one paradigm</a></p><ul><li>특정 패러다임에 대한 순수주의를 고집하기 보다는 적절한 조합을 통한 생산성을 추구하는 듯하다</li></ul><p><a href="https://rubyonrails.org/doctrine/#beautiful-code" target="_blank" rel="noopener">Exalt beautiful code</a></p><ul><li>Ruby의 특성과 CoC 등을 활용한 짧으면서도 많은 기능을 해내는 코드를 추구하는 듯하다</li><li>인상적인 예시가 나오는데, <code>if people.include? person</code> 과 <code>if person.in? people</code> 가 있을 때, 초점(Subject)이 무엇이냐에 따라서 어느 코드가 좋은지가 다르다</li></ul><p><a href="https://rubyonrails.org/doctrine/#provide-sharp-knives" target="_blank" rel="noopener">Provide sharp knives</a></p><ul><li>안정성을 추구하기 위해 가능성을 닫아놓기 보다는 보다 많은 자유도를 제공하고자 하는 듯하다 ( 흔히 말하는 <code>Opinionated</code> 와는 상반된 입장 )</li></ul><p><a href="https://rubyonrails.org/doctrine/#integrated-systems" target="_blank" rel="noopener">Value integrated systems</a></p><ul><li>MSA를 추구하는 요즘 트렌드와는 상반된 철학이지만, <code>&quot;What’s worse is when systems are prematurely disintegrated and broken into services or, even worse, microservices.&quot;</code> 이것이 더 나쁘다고 판단하고, Monolithic 의 장점을 보다 높게 본, 그리고 그것이 가능하도록 Rails에서 지원하겠다는 의미로 읽힌다</li></ul><p><a href="https://rubyonrails.org/doctrine/#progress-over-stability" target="_blank" rel="noopener">Progress over stability</a></p><ul><li>사실 이제는 유행을 선도하는 주체라고 보기 어렵지만, 그럼에도 끊임없는 진보를 추구한다는 이 철학이 아직까지 Rails가 살아있도록 한 것 같다</li></ul><p><a href="https://rubyonrails.org/doctrine/#big-tent" target="_blank" rel="noopener">Push up a big tent</a></p><ul><li>초점은 Value integrated systems 등에 맞춰져 있을지라도 API와 같은 다양한 니즈에 대응하려는 노력도 병행하고 있는 듯 하다</li></ul><hr><h2>Rails의 구성 요소, <a href="http://adrianmejia.com/blog/2011/08/11/ruby-on-rails-architectural-design/" target="_blank" rel="noopener">Ruby on Rails Architectural Design</a></h2><p><img src="http://adrianmejia.com/images/dynamic_view.png" alt="img"></p><p><img src="http://adrianmejia.com/images/ror_static_view.png" alt="img"></p><ul><li>Action Pack : MVC의 VC<ul><li>Action Dispatcher : 웹 브라우저 요청의 라우팅, 요청을 파싱하고 쿠키 핸들링, 세션, 요청 메소드 등 HTTP에 대한 처리를 수행</li><li>Action Controller : 모델과 뷰를 제어하기 위한 요청 처리, 상태 관리, 응답 생성 등을 담당, 또한 사용자 세션, 애플리케이션 흐름, 캐싱 기능, 헬퍼 모듈, 사전 필터, during, post processing hooks를 관리</li><li>Action View : Controller에 의해 호출되어 요청된 형식에 해당하는 응답을 생성, 마스터 레이아웃, 템플릭 룩업, 헬퍼 등 제공, 템플릿 스키마는 세 종류가 있는데 rhtml은 erb를 HTML View로 생성, rxml은 XML 문서 구성, rjs는 ajax 기능을 위해 Ruby 코드 내에서 동적인 자바스크립트 코드를 만들도록 함</li></ul></li><li>Active Model : Action Pack과 Active Record 모듈 간 인터페이스, 이름 규칙, 유효성 검사 등 모델과 관련된 규약을 정의</li><li>Active Record<ul><li>아키텍처 패턴으로서, Rails에서는 Class로 ORM을 제공, Instance는 각각의 row를 표현, Class 네이밍, 주키와 외래키 설정 등은 Rails의 관례에 따른다, 비즈니스 로직에 포함되는 Model Class를 생성하고, 테이블과 매핑시키고, getter, setter과 life cycle에 따른 Callback를 제공한다</li></ul></li><li>Active Resource : Model Class와 RESTful 웹 서비스를 매핑할 수 있도록 해준다</li><li>Active Support : Ruby 표준 라이브러리의 확장 ( 국제화, 타임존, 테스팅 등 )</li><li>Action Mailer : Action Controller를 래핑해서 템플릿을 이용한 email 메시지를 만드는 방법 제공</li><li>Railties : Rails의 코어로서 위 모듈들이 잘 조합될 수 있게 하며 코드 생성기를 제공</li></ul><hr><h2>Rails 프로젝트 파악 방법</h2><ul><li>db/schema.rb 를 보면서 데이터베이스 구조 파악</li><li>config/routes.rb를 보면서 요청 경로와 Controller 연결고리 파악</li><li>Gemfile에서 사용하고 있는 라이브러리 파악</li></ul><hr><h2>VC</h2><p>Controller : Action의 집합 (Controller Class Method)</p><p>routes에서 어느 주소이냐에 따라 어떤 Controller의 어느 Method에게 처리를 위임할지 정하게 됨</p><p>action에서 데이터를 처리하고 동일한 이름에 해당하는 View ( <code>action.html.erb</code> ) 에서 결과를 렌더링</p><h2>routes</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Rails.application.routes.draw <span class="keyword">do</span></span><br><span class="line">  root <span class="string">'home#index'</span> <span class="comment"># get + '/'이면 home Controller의 index action이 처리</span></span><br><span class="line">  </span><br><span class="line">  get <span class="string">'/attack'</span>, <span class="symbol">to:</span> <span class="string">'home#attack'</span> <span class="comment"># get 'home/attack' 이라고 적으면 home/attack 로 접속하면 home Controller의 attack action이 처리</span></span><br><span class="line">  get <span class="string">'/defense'</span>, <span class="symbol">to:</span> <span class="string">'home#defense'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>form tag에서 submit을 받으면 input tag의 이름에 따라 각각 params hash에 담겨 action에게 넘어간다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attack</span></span></span><br><span class="line">  @from = params[<span class="symbol">:userA</span>]</span><br><span class="line">  @to = params[<span class="symbol">:userB</span>]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2>CRUD</h2><p>기능 구현 순서 : Controller -&gt; action -&gt; routes -&gt; action.html.erb</p><p><code>rails generate controller home index new create</code></p><p>home Controller ( + index, new, create action )</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># new.html.erb</span></span><br><span class="line">&lt;form action=<span class="string">'/home/create'</span> method=<span class="string">'post'</span>&gt;</span><br><span class="line">  &lt;%= hidden_field_tag <span class="symbol">:authenticity_token</span>, form_authenticity_token %&gt;</span><br><span class="line">  제목 : &lt;input type=<span class="string">'text'</span> name=<span class="string">'post_title'</span>&gt;&lt;br /&gt;</span><br><span class="line">  내용 : &lt;textarea name=<span class="string">'post_content'</span>&gt;&lt;<span class="regexp">/textarea&gt;&lt;br /</span>&gt;</span><br><span class="line">  &lt;input type=<span class="string">'submit'</span> value=<span class="string">'제출'</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h3>Model</h3><p><code>rails g model post title:string content:text</code></p><p><code>db/migrate/20180411092430_create_posts.rb</code> 과 <code>models/post.rb</code>를 생성</p><p>rails db:migrate : migration file을 DB에 반영</p><p>rails db:drop : 테이블 삭제</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span></span></span><br><span class="line">  @post = Post.new</span><br><span class="line">  @post.title = params[<span class="symbol">:post_title</span>]</span><br><span class="line">  @post.content = params[<span class="symbol">:post_content</span>]</span><br><span class="line">  @post.save</span><br><span class="line">  </span><br><span class="line">  redirect_to <span class="string">'home/index'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">  @posts = Post.all</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># index.html.erb</span></span><br><span class="line">&lt;% @posts.each <span class="keyword">do</span> <span class="params">|x|</span> %&gt;</span><br><span class="line">  제목 : &lt;%= x.title %&gt;&lt;br /&gt;</span><br><span class="line">  내용 : &lt;%= x.content %&gt;&lt;br /&gt;</span><br><span class="line">  ---------------------&lt;br /&gt;</span><br><span class="line">&lt;% <span class="keyword">end</span> %&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># destroy.html.erb</span></span><br><span class="line">&lt;% @posts.each <span class="keyword">do</span> <span class="params">|x|</span> %&gt;</span><br><span class="line">  제목 : &lt;%= x.title %&gt;&lt;br /&gt;</span><br><span class="line">  내용 : &lt;%= x.content %&gt;&lt;br /&gt;</span><br><span class="line">  &lt;a href=<span class="string">'/home/destroy/&lt;%=x.id%&gt;'</span>&gt;삭제&lt;<span class="regexp">/a&gt;&lt;br /</span>&gt;</span><br><span class="line">  ---------------------&lt;br /&gt;</span><br><span class="line">  </span><br><span class="line"><span class="comment"># routes.rb</span></span><br><span class="line">get <span class="string">`home/destroy/:post_id' =&gt; 'home#destroy'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def destroy</span></span><br><span class="line"><span class="string">  @post = Post.find(params[:post_id])</span></span><br><span class="line"><span class="string">  @post.destroy</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  redirect_to 'home/index'</span></span><br><span class="line"><span class="string">end</span></span><br></pre></td></tr></table></figure><p>edit == 덮어쓰기</p><p>새 글을 쓰는 것이 빈 테이블을 만들고 내용을 채우는 것이라면, 수정은 채워진 테이블의 내용을 바꾸는 것</p><p>수정 페이지 == 글 쓰기 양식</p><ul><li>edit.html.erb == new.html.erb</li><li>단, 이전 내용 필요</li></ul><p>id는 두 번 필요</p><ul><li>수정하는 양식에 이전 내용을 불러올 때</li><li>이전 글을 수정한 뒤 새로운 내용으로 업데이트 할 때</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># index.html.erb, edit action으로 id 넘기기</span></span><br><span class="line">&lt;% @posts.each <span class="keyword">do</span> <span class="params">|x|</span> %&gt;</span><br><span class="line">  제목 : &lt;%= x.title %&gt;&lt;br /&gt;</span><br><span class="line">  내용 : &lt;%= x.content %&gt;&lt;br /&gt;</span><br><span class="line">  &lt;a href=<span class="string">'/home/destroy/&lt;%=x.id%&gt;'</span>&gt;삭제&lt;<span class="regexp">/a&gt;&lt;br /</span>&gt;</span><br><span class="line">  &lt;a href=<span class="string">'/home/edit/&lt;%=x.id%&gt;'</span>&gt;수정&lt;<span class="regexp">/a&gt;&lt;br /</span>&gt;</span><br><span class="line">  ---------------------&lt;br /&gt;</span><br><span class="line">  </span><br><span class="line"><span class="comment"># routes.rb</span></span><br><span class="line">get <span class="string">`home/edit/:post_id' =&gt; 'home#edit'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def edit</span></span><br><span class="line"><span class="string">  @post = Post.find(params[:post_id])</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;form action='/home/update/&lt;%=@post.id%&gt;' method='post'&gt;</span></span><br><span class="line"><span class="string">  &lt;%= hidden_field_tag :authenticity_token, form_authenticity_token %&gt;</span></span><br><span class="line"><span class="string">  제목 : &lt;input type='text' name='post_title' value='%&lt;=@post.title%&gt;'&gt;&lt;br /&gt;</span></span><br><span class="line"><span class="string">  내용 : &lt;textarea name='post_content'&gt;&lt;%=@post.content%&gt;&lt;/textarea&gt;&lt;br /&gt;</span></span><br><span class="line"><span class="string">  &lt;input type='submit' value='제출'&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">post 'home/update/:post_id' =&gt; 'home#update'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def update</span></span><br><span class="line"><span class="string">  post = Post.find(params[:post_id])</span></span><br><span class="line"><span class="string">  post.title = params[:post_title]</span></span><br><span class="line"><span class="string">  post.content = params[:post_content]</span></span><br><span class="line"><span class="string">  post.save</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  redirect_to '/home/index'</span></span><br><span class="line"><span class="string">end</span></span><br></pre></td></tr></table></figure><hr><h2>View Helper</h2><p><code>&lt;%= link_to '텍스트', URL %&gt;</code></p><p><code>&lt;a href='/posts/destroy/&lt;%=post.id%&gt;'&gt;삭제&lt;/a&gt;</code></p><p><code>&lt;%= link_to '삭제', &quot;/posts/destroy/#{post.id}&quot; %&gt;</code></p><p>&lt;%= 안에 &lt;%= 가 또 들어갈 수는 없으므로 #{} 를 통해 manipulation</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># routes.rb</span></span><br><span class="line">get <span class="string">'/posts/destroy/:post_id'</span> =&gt; <span class="string">'posts#destroy'</span>, <span class="symbol">as:</span> <span class="string">'post_destroy'</span></span><br><span class="line"><span class="comment"># ( =&gt; 대신에 `, to: `도 사용 가능)</span></span><br><span class="line"></span><br><span class="line">&lt;%= link_to <span class="string">'삭제'</span>, post_destroy_path <span class="symbol">post_id:</span> p.id %&gt;</span><br><span class="line"><span class="comment"># post_destroy_path 에게 넘겨줄 값이 하나 뿐이라면 아래와 같이 작성 가능</span></span><br><span class="line">&lt;%= link_to <span class="string">'삭제'</span>, post_destroy_path p.id %&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># a태그를 감싸고 싶을 경우, 위 아래 두 코드는 동일</span></span><br><span class="line">&lt;a href=<span class="string">'/posts/destroy/&lt;%=post.id%&gt;`&gt;</span></span><br><span class="line"><span class="string">  &lt;button&gt;삭제&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;/a&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;%= link_to post_destroy_path post.id do %&gt;</span></span><br><span class="line"><span class="string">  &lt;button&gt;삭제&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;% end %&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;Framework?&lt;/h2&gt;
&lt;p&gt;일반적인 의미에서 프레임워크란? 문제를 일반화하고 해결하기 위한 틀&lt;/p&gt;
&lt;p&gt;프로그래밍에서의 프레임워크란, 설계와 재사용이 가능한 클래스를 제공&lt;/p&gt;
&lt;p&gt;라이브러리와의 차이는 &lt;strong&gt;제어역전&lt;/s
      
    
    </summary>
    
      <category term="Rails" scheme="https://eclatant.io/categories/Rails/"/>
    
    
      <category term="Rails" scheme="https://eclatant.io/tags/Rails/"/>
    
  </entry>
  
  <entry>
    <title>루비 기초</title>
    <link href="https://eclatant.io/2018/05/06/Ruby-Intro2/"/>
    <id>https://eclatant.io/2018/05/06/Ruby-Intro2/</id>
    <published>2018-05-05T15:00:00.000Z</published>
    <updated>2018-05-08T19:56:29.488Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(names)</span></span></span><br><span class="line">  names.each <span class="keyword">do</span> <span class="params">|name|</span> <span class="comment"># like JS forEach</span></span><br><span class="line">    puts <span class="string">"Hello, <span class="subst">#&#123;name.upcase&#125;</span>"</span></span><br><span class="line">      <span class="comment"># puts == print</span></span><br><span class="line">      <span class="comment"># string manipulation을 할 때는 "", 그렇지 않으면 ''</span></span><br><span class="line">      <span class="comment"># </span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">rubies = [<span class="string">'MRI'</span>, <span class="string">'jruby'</span>, <span class="string">'rubinius'</span>] <span class="comment"># 동적 타입이며 변수에 해당하는 타입 명시 또는 선언 키워드 불필요 (like Python)</span></span><br><span class="line"></span><br><span class="line">hello(rubies)</span><br></pre></td></tr></table></figure><ul><li>메소드 정의 <code>def</code></li><li>.each do |name| 은 JS의 forEach, Python의 for-in과 같다</li><li>do…end 의 형태를 block이라고 하며, 함수에게 넘겨줄 수 있는 덩어리이다</li><li>.each {|name| puts “Hello, #{name.upcase}”} 라고 적어도 같은 의미가 된다<ul><li>한 줄이면 {…}를, 여러 줄이면 do…end를 사용한다</li><li>값을 반환하는 식으로 블록을 작성하려면 {…}를, 일련의 처리를 실행하기 위해서는 do…end를 사용한다</li></ul></li><li>puts는 Python의 print이다</li><li>puts는 nil을 return하는데, nil은 JS의 null이나 Python의 None과 같다</li></ul><p>puts는 Python의 print와 같다</p><p>​      # string manipulation을 할 때는 “”, 그렇지 않으면 ‘’</p><p>ipt = gets.chomp</p><p>print : 개행 X</p><p>gets : 개행 포함</p><p>gets.chomp = 개행 포함 X</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">print <span class="string">"input your gender(성별) "</span></span><br><span class="line">gender = gets.chomp</span><br><span class="line"><span class="keyword">if</span> gender == <span class="string">"male"</span></span><br><span class="line">  puts <span class="string">"aha! you are male. right?"</span></span><br><span class="line"><span class="keyword">elsif</span> gender == <span class="string">"female"</span></span><br><span class="line">  puts <span class="string">"aha! you are female. right?"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  puts <span class="string">"please right gender(male or female)"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">print <span class="string">"input your gender(성별) "</span></span><br><span class="line">gender = gets.chomp</span><br><span class="line"><span class="keyword">if</span> gender == <span class="string">"male"</span></span><br><span class="line">  puts <span class="string">"aha! you are male. right?"</span></span><br><span class="line"><span class="keyword">elsif</span> gender == <span class="string">"female"</span></span><br><span class="line">  puts <span class="string">"aha! you are female. right?"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  puts <span class="string">"please right gender(male or female)"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fruit = [<span class="string">"banana"</span>, <span class="string">"apple"</span>, <span class="string">"watermelon"</span>]</span><br><span class="line">fruit &lt;&lt; <span class="string">"peach"</span></span><br><span class="line">fruit &lt;&lt; <span class="string">"pineapple"</span></span><br><span class="line">puts fruit.sample <span class="comment"># 임의의 한 요소</span></span><br><span class="line">puts fruit</span><br><span class="line"></span><br><span class="line">lotto = (<span class="number">1</span>..<span class="number">45</span>).to_a.sample(<span class="number">6</span>)</span><br></pre></td></tr></table></figure><ul><li>루비의 반복문은 12가지 종류, ( <a href="https://www.youtube.com/watch?v=wmJJFR1Qc_Q" target="_blank" rel="noopener">루비 프로그래밍 언어의 다양한 반복문</a> ), 이는 루비의 철학인 <code>More than one way to do things.</code> 과 맞닿아있는 것으로 보인다</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>.times <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">  puts <span class="string">"<span class="subst">#&#123;i&#125;</span> Hello, World!"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">arr = [<span class="string">"배터리"</span>, <span class="string">"비행기"</span>, <span class="string">"자동차"</span>]</span><br><span class="line"></span><br><span class="line">arr.each <span class="keyword">do</span> <span class="params">|x|</span></span><br><span class="line">  puts x</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">arr.each_with_index <span class="keyword">do</span> <span class="params">|x, index|</span></span><br><span class="line">  puts <span class="string">"<span class="subst">#&#123;index + <span class="number">1</span>&#125;</span>. 너는 전생에 <span class="subst">#&#123;x&#125;</span> 였을 수 있어"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">loop <span class="keyword">do</span></span><br><span class="line">  puts <span class="string">"0 to exit"</span></span><br><span class="line">  cmd = gets.chomp</span><br><span class="line">  <span class="keyword">break</span> <span class="keyword">if</span> cmd == <span class="string">"0"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">  <span class="symbol">name:</span> <span class="string">"Lic"</span>,</span><br><span class="line">  <span class="symbol">age:</span> <span class="number">21</span>,</span><br><span class="line">  <span class="symbol">college:</span> <span class="string">"seoul"</span></span><br><span class="line">&#125;</span><br><span class="line">puts student</span><br><span class="line">puts student[<span class="symbol">:name</span>]</span><br><span class="line">puts student[<span class="symbol">:age</span>]</span><br><span class="line">puts student[<span class="symbol">:college</span>]</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line">puts(<span class="string">'Hello '</span>+<span class="string">'world'</span>)</span><br><span class="line">puts(<span class="string">'Hello '</span>*<span class="number">3</span>)</span><br><span class="line">puts(<span class="string">'Hello'</span>[<span class="number">0</span>])</span><br><span class="line">puts(<span class="string">'Hello'</span>[<span class="number">1</span>])</span><br><span class="line">puts(<span class="string">'Hello'</span>[<span class="number">2</span>])</span><br><span class="line">puts(<span class="string">'hello world'</span>.capitalize())</span><br><span class="line">puts(<span class="string">'hello world'</span>.upcase())</span><br><span class="line">puts(<span class="string">'Hello world'</span>.length())</span><br><span class="line">puts(<span class="string">'Hello world'</span>.sub(<span class="string">'world'</span>, <span class="string">'programming'</span>))</span><br><span class="line">puts(<span class="number">10</span>+<span class="number">5</span>)</span><br><span class="line">puts(<span class="string">"10"</span>+<span class="string">"5"</span>)</span><br><span class="line"></span><br><span class="line">al = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>]</span><br><span class="line">puts(al.length) <span class="comment"># 4</span></span><br><span class="line">al.push(<span class="string">'E'</span>)</span><br><span class="line">print(al) <span class="comment"># ["A", "B", "C", "D", "E"]                                                                     </span></span><br><span class="line">al.delete_at(<span class="number">0</span>)</span><br><span class="line">print(al) <span class="comment"># ["B", "C", "D", "E"]</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span> <span class="keyword">do</span></span><br><span class="line">    puts(<span class="string">'puts("Hello world '</span>+(i*<span class="number">9</span>).to_s()+<span class="string">'")'</span>)                                                        </span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">members = [<span class="string">'user1'</span>, <span class="string">'user2'</span>, <span class="string">'user3'</span>]</span><br><span class="line"><span class="keyword">for</span> member <span class="keyword">in</span> members <span class="keyword">do</span></span><br><span class="line">    puts(member)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> (<span class="number">5</span>..<span class="number">10</span>) <span class="keyword">do</span></span><br><span class="line">  puts(item)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Module1</span></span></span><br><span class="line">  module_function()</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'a'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Module2</span></span></span><br><span class="line">  module_function()</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'B'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">require_relative <span class="string">'Module1'</span></span><br><span class="line">require_relative <span class="string">'Module2'</span>                                                                               </span><br><span class="line">puts(module1.a())</span><br><span class="line">puts(module2.a())</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cal</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(v1,v2)</span></span>                                                                                     </span><br><span class="line">    @v1 = v1</span><br><span class="line">    @v2 = v2</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> @v1+@v2</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">subtract</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> @v1-@v2</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">c1 = Cal.new(<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line">p c1.add()</span><br><span class="line">p c1.subtract()</span><br><span class="line">c2 = Cal.new(<span class="number">30</span>,<span class="number">20</span>)</span><br><span class="line">p c2.add()</span><br><span class="line">p c2.subtract()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class1</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method1</span><span class="params">()</span></span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'m1'</span>                                                                                      </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">c1 = Class1.new()</span><br><span class="line">p c1, c1.method1()</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class3</span> &lt; Class1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method2</span><span class="params">()</span></span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'m2'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">c3 = Class3.new()</span><br><span class="line">p c3, c3.method1()</span><br><span class="line">p c3, c3.method2()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cs</span></span></span><br><span class="line">  @@count = <span class="number">0</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">()</span></span></span><br><span class="line">    @@count = @@count + <span class="number">1</span>                                                                                </span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">Cs</span>.<span class="title">getCount</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> @@count</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">i1 = Cs.new()</span><br><span class="line">i2 = Cs.new()</span><br><span class="line">i3 = Cs.new()</span><br><span class="line">i4 = Cs.new()</span><br><span class="line">p Cs.getCount()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'parent'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C2</span> &lt; C1</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>()+<span class="string">' child'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">o = C2.new()</span><br><span class="line">p o.m()</span><br><span class="line"></span><br><span class="line"><span class="comment"># test.rb</span></span><br><span class="line">require_relative <span class="string">'lib'</span>                                                                                     </span><br><span class="line">obj = Lib::A.new()</span><br><span class="line">p obj.a()</span><br><span class="line"> </span><br><span class="line"><span class="comment">#lib.rb</span></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Lib</span></span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span></span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">'a'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">M1</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">m1_m</span></span></span><br><span class="line">    p <span class="string">"m1_m"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">M2</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">m2_m</span></span></span><br><span class="line">    p <span class="string">"m2_m"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line">  <span class="keyword">include</span> M1, M2                                                                                        </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">c = C.new()</span><br><span class="line">c.m1_m()</span><br><span class="line">c.m2_m()</span><br></pre></td></tr></table></figure><p><strong>외부에서 접근이 가능한 변수를 파이썬에서는 property, 루비에서는 attribute</strong></p><p>루비에서는 **super는 부모 객체를 가리키지 않고 ** <strong>super가 소속되어있는 메소드와 같은 부모객체의 메소드를 가리킨다</strong>.</p><p>String</p><ul><li>to_s</li><li>gsub</li><li>length</li><li>blank?</li></ul><p>Array</p><ul><li>first / last</li><li>push / pop</li><li>each / map</li><li>select / reject</li><li>any? / include?</li></ul><p>nil</p><ul><li>nil?</li><li>blank?</li><li>to_i</li><li>to_s</li></ul><p>Time</p><ul><li>strftime</li><li>wday</li><li>year</li><li>month</li><li>hour</li></ul><p>Symbol</p><p>Hash</p><ul><li>keys</li><li>values</li><li>[]</li></ul><p>if elsif else</p><p>for</p><p>case</p><p>def</p><hr><h2>Class</h2><p>@를 사용하면 인스턴스 변수가 되며, 이것은 인스턴스 안에 소속된 모든 메소드 안에서 활용 가능한 변수</p><p>@@를 사용하면 클래스 변수가 되며, 클래스 전체에서 사용가능한 변수 ( 인스턴스 변수의 범위 + 메소드 밖 )</p><p>상속받을 때 부모의 method도 함께 활용하고 싶다면, 자식 method에서 super를 쓰면 된다 ( super 라인에서 부모 method가 동작 )</p><p>다중상속은 불가 ( 대신 믹스인을 활용 )</p><p>public, private</p><p>private method는 class 안에서만 호출이 가능</p><p>attr_reader ( getter )</p><p>attr_writer ( setter )</p><p>attr_accessor( getter + setter )</p><p>위 키워드들을 통해 해당 attribute를 메소드로 접근할 수 있도록 할 수 있다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="Ruby" scheme="https://eclatant.io/categories/Ruby/"/>
    
    
      <category term="Ruby" scheme="https://eclatant.io/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>괜찮아 ! 너만 모르는 건 아니야 - 어휘편</title>
    <link href="https://eclatant.io/2018/05/01/OK-Word/"/>
    <id>https://eclatant.io/2018/05/01/OK-Word/</id>
    <published>2018-04-30T15:00:00.000Z</published>
    <updated>2018-05-02T16:06:04.951Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.kaidee.com/prd/20180427/337728869/b/0cf1987d-78e7-4f60-acd1-310d5c427af9.jpg" alt="img"></p><h3 id="1-생각의-틀을-확장하라"><a href="#1-생각의-틀을-확장하라" class="headerlink" title="1. 생각의 틀을 확장하라"></a>1. 생각의 틀을 확장하라</h3><p>붙다 라는 한국어를 미국인이 공부한다고 생각해보자</p><ol><li>stick</li></ol><ul><li>머리에 껌 붙었다.</li></ul><ol start="2"><li>pass</li></ol><ul><li>너 시험에 붙었다며?</li></ul><ol start="3"><li>take side</li></ol><ul><li>그 사람은 반대파에 붙었다</li></ul><ol start="4"><li>live with</li></ol><ul><li>그는 그 나이가 되도록 엄마에게 붙어산다</li></ul><p>위에 있는 붙다는 약간씩 의미가 다르긴 하지만, 큰 틀에서 모두 같은 말이다</p><p>위 단어를 평소 한국인이 영어를 공부하듯이 1번 또는 2번 정도까지만 암기하고 넘어간다면, 아래와 같은 문제는 해결할 수 없게 된다</p><p>하나의 기준을 정확히 마련해놓지 않은 채로, 우화 속의 박쥐처럼 상황에 따라 자신에게 유리한 편을 드는 사람을 한국에서는 <code>간에 ____ 쓸개에 ____ 한다</code> 라고 한다</p><h3 id="2-기본-의미-확장-훈련"><a href="#2-기본-의미-확장-훈련" class="headerlink" title="2. 기본 의미 확장 훈련"></a>2. 기본 의미 확장 훈련</h3><p>단어의 의미는 하나일 수 없다 (학술적으로 사용되는 명사의 경우 제외)</p><p>따라서 일대일 대응으로 단어를 학습해서는 제대로 학습할 수 없다</p><p>대부분의 학습자는 general을 일반적인 이라는 의미로 암기한다, 그렇게 할 경우 어떤 문제가 생기는지 살펴보자</p><p>general hospital : 일반 병원<br>general strike : 일반 파업<br>general anesthesia : 일반 마취<br>general attack : 일반 공격<br>general meeting : 일반 모임<br>general election : 일반 선거<br>general truce : 일반 휴전<br>general cleaning : 일반 청소<br>general denial : 일반적 부인</p><p>general이라는 단어의 전체적인 모습은 다음과 같다</p><ol><li>affecting all or most people, places or things</li><li>not limited to a particular aspect of a person or thing</li></ol><p>즉 한 가지 면에만 국한되지 않는, 대부분의 사람, 장소, 사물에 두루 영향을 미치는 이런 이미지를 가지고 있는 단어이다</p><p>따라서 유의해야 할 점은 general의 의미를 일반적인, 전면적인, 포괄적인 이런 식으로 다의어처럼 외우면 안 된다는 것이다</p><p>위의 이미지처럼 이해하자, 그러면 아래와 같은 의미가 된다</p><p>general hospital : 종합 병원<br>general strike : 총파업<br>general anesthesia : 전신 마취<br>general attack : 총공격<br>general meeting : 총회<br>general election : 총선거<br>general truce : 전면 휴전<br>general cleaning : 대청소<br>general denial : 전면 부인</p><p>bring up 이라는 단어를 기르다 로 외운다면 아래 문장을 제대로 해석할 수 없다</p><p>She brought up what she had for lunch</p><p>bring up 은 위로 가져오(가)다 로 이해되어야 한다</p><hr><h2 id="Accident"><a href="#Accident" class="headerlink" title="Accident"></a>Accident</h2><p>핵심이미지 : 내가 의도하지 않은, 우연히 일어난 일</p><p>design : 반대되는 단어 ( 고의 )</p><p>영영 풀이</p><ol><li>An unfortunate incident that happens unexpectedly and unintentionally, typically resulting in damage or injury.</li><li>An event that happens by chance or that is without apparent or deliberate cause.</li></ol><hr><h2 id="Address"><a href="#Address" class="headerlink" title="Address"></a>Address</h2><p>핵심 이미지 : 접근</p><p>한 사람 : 말 걸다, 여러 사람 : 연설하다, 문제 : 해결하다</p><p>영영 풀이</p><ol><li>The particulars of the place where someone lives or an organization is situated.</li><li>A formal speech delivered to an audience.</li><li>Speak to (a person or an assembly), typically in a formal way.</li><li>Say or write remarks or a protest to (someone).</li><li>Name someone in a specified way when talking or writing.</li><li>Think about and begin to deal with (an issue or problem).</li></ol><hr><h2 id="Assume"><a href="#Assume" class="headerlink" title="Assume"></a>Assume</h2><p>핵심 이미지 : 취하다</p><p>입장이나 태도, 직위, 책임을 지다, 분위기를 취하다</p><p>영영 풀이</p><ol><li>Suppose to be the case, without proof.</li><li>Take or begin to have (power or responsibility).</li><li>Take on (a specified quality, appearance, or extent).</li></ol><hr><h2 id="Available"><a href="#Available" class="headerlink" title="Available"></a>Available</h2><p>핵심 이미지 : (무엇인가를) 할 수 있는</p><p>탈 수 있는, 구매할 수 있는</p><p>영영 풀이</p><ol><li>Able to be used or obtained; at someone’s disposal.</li></ol><p>until : 기존 동작이 종료되고, 신규 동작이 시작되는 시점; 부정문이 함께 있으면 그러다가 로 해석</p><hr><h2 id="Appreciate"><a href="#Appreciate" class="headerlink" title="Appreciate"></a>Appreciate</h2><p>핵심 이미지 : 진가를 알다</p><p>가치를 알다, 감사하다, 이해하다, 감상하다, 가치가 올라가다</p><p>영영 풀이</p><ol><li>Recognize the full worth of.</li><li>Be grateful for (something).</li><li>Understand (a situation) fully; recognize the full implications of.</li><li>Rise in value or price.</li></ol><p>ever : 강조</p><p>I would appreciate if : ~해주신다면 감사하겠습니다</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img.kaidee.com/prd/20180427/337728869/b/0cf1987d-78e7-4f60-acd1-310d5c427af9.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-생각의-틀을-확장하라&quot;
      
    
    </summary>
    
      <category term="English" scheme="https://eclatant.io/categories/English/"/>
    
    
      <category term="English" scheme="https://eclatant.io/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>배열과 문자열</title>
    <link href="https://eclatant.io/2018/04/23/Array-String/"/>
    <id>https://eclatant.io/2018/04/23/Array-String/</id>
    <published>2018-04-22T15:00:00.000Z</published>
    <updated>2018-05-02T15:18:27.507Z</updated>
    
    <content type="html"><![CDATA[<h2 id="해시테이블"><a href="#해시테이블" class="headerlink" title="해시테이블"></a>해시테이블</h2><p>효율적인 탐색을 위해 key를 value에 대응시킨 자료구조</p><p>연결리스트와 해시 코드 함수를 통해 구현 가능</p><p>키와 값을 해시테이블에 넣을 때는 다음의 과정을 거친다<br>(키는 무한한데, 키의 자료형인 int의 개수는 유한하므로 서로 다른 두 개의 키가 같은 인덱스를 가리킬 수도 있다, 연결리스트를 이용하는 이유는 서로 다른 두 개의 키가 같은 해시 코드 또는 서로 다른 두 개의 해시 코드가 같은 인덱스를 가리키는 충돌에 대비하기 위해서이다)</p><ol><li>주어진 키의 해시 코드를 계산</li><li>해시 코드를 이용해 배열의 인덱스를 구한다 (hash(key) % array_length 와 같은 방식)</li><li>배열의 각 인덱스에는 키와 값으로 이루어진 연결리스트에서 키에 상응하는 값을 탐색</li></ol><p>충돌이 자주 발생한다면, worst case runtime은 O(N)이 된다</p><p>일반적으로는 충돌이 최소화된 경우를 가정하는데 이 경우에는 O(1)</p><p><img src="https://user-images.githubusercontent.com/14256139/39124151-56f1a7ea-4735-11e8-843d-3a03d3598246.png" alt="img"></p><p>균형 이진 탐색 트리로도 구현할 수 있으며, 이 경우에는 O(logN)이 된다고 한다, TODO</p><h2 id="ArrayList와-가변-크기-배열"><a href="#ArrayList와-가변-크기-배열" class="headerlink" title="ArrayList와 가변 크기 배열"></a>ArrayList와 가변 크기 배열</h2><p>Java와 같이 배열의 길이가 고정되어 있는 언어에서 길이가 동적으로 변하는 자료구조가 필요할 때 사용한다</p><p>통상적으로 배열이 가득 차는 순간, 기존 배열의 크기를 두 배로 늘린다,<br>이 때는 O(N)이지만 자주 발생하는 상황이 아니므로 각 삽입은 평균적으로 O(1)이 소요된다</p><h2 id="String-Builder"><a href="#String-Builder" class="headerlink" title="String Builder"></a>String Builder</h2><p>ArrayList, StringBuilder 모두 array를 들고 있다</p><p>처음에 기본적으로 ArrayList는 크기 5개 짜리 array를, StringBuilder는 16개 짜리를 만든다</p><p>둘 모두 배열의 용량이 가득 차면 Capacity를 두 배로 늘리는 동작을 수행한다</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;해시테이블&quot;&gt;&lt;a href=&quot;#해시테이블&quot; class=&quot;headerlink&quot; title=&quot;해시테이블&quot;&gt;&lt;/a&gt;해시테이블&lt;/h2&gt;&lt;p&gt;효율적인 탐색을 위해 key를 value에 대응시킨 자료구조&lt;/p&gt;
&lt;p&gt;연결리스트와 해시 코드 함수를 
      
    
    </summary>
    
      <category term="CtCI" scheme="https://eclatant.io/categories/CtCI/"/>
    
    
      <category term="CtCI" scheme="https://eclatant.io/tags/CtCI/"/>
    
  </entry>
  
  <entry>
    <title>React Fundamental</title>
    <link href="https://eclatant.io/2018/04/22/React-Fundamental/"/>
    <id>https://eclatant.io/2018/04/22/React-Fundamental/</id>
    <published>2018-04-21T15:00:00.000Z</published>
    <updated>2018-05-02T15:18:59.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Why-React"><a href="#Why-React" class="headerlink" title="Why React?"></a>Why React?</h1><p>Composition Model</p><ul><li>A good function should follow the “Do One Thing” rule</li><li>When you combine these simple functions together to form a more complex function, this is <strong>composition</strong>.</li><li><a href="https://www.linkedin.com/pulse/compose-me-function-composition-javascript-kevin-greene/" target="_blank" rel="noopener">Compose me That: Function Composition in JavaScript</a></li><li><a href="https://hackernoon.com/javascript-functional-composition-for-every-day-use-22421ef65a10" target="_blank" rel="noopener">Functional JavaScript: Function lComposition For Every Day Use.</a></li></ul><p>Declarative Code</p><ul><li>When JavaScript code is written <em>imperatively</em>, we tell JavaScript exactly <strong>what</strong> to do and <strong>how</strong> to do it. Think of it as if we’re giving JavaScript <em>commands</em> on exactly what steps it should take.</li><li>we <em>declare</em> what we want done, and JavaScript will take care of doing it.</li><li><em>Imperative</em> code instructs JavaScript on <em>how</em> it should perform each step. With <em>declarative</em> code, we tell JavaScript <em>what</em> we want to be done, and let JavaScript take care of performing the steps.</li><li><a href="https://tylermcginnis.com/imperative-vs-declarative-programming/" target="_blank" rel="noopener">Imperative vs Declarative Programming</a></li><li><a href="https://stackoverflow.com/questions/33655534/difference-between-declarative-and-imperative-in-react-js" target="_blank" rel="noopener">Difference between declarative and imperative in React.js?</a> from StackOverflow</li></ul><p>Unidirectional Data Flow</p><ul><li><em>Data flows down from parent component to child component. Data updates are sent to the parent component where the parent performs the actual change.</em> this might seem like extra work, but having the data flow in one direction and having one place where the data is modified makes it much easier to understand how the application works.</li><li>In React, data flows in only one direction, from parent to child. If data is shared between sibling child components, then the data should be stored in the parent component and passed to both of the child components that need it.</li></ul><p>Just JavaScript</p><ul><li>Why not look through some of your existing code and try converting your <code>for</code> loops to <code>.map()</code> calls or see if you can remove any <code>if</code> statements by using <code>.filter()</code>.</li></ul><h1 id="Rendering-UI-with-React"><a href="#Rendering-UI-with-React" class="headerlink" title="Rendering UI with React"></a>Rendering UI with React</h1><p>Creating Elements and JSX</p><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">React.createElement( <span class="comment">/* type */</span>, <span class="comment">/* props */</span>, <span class="comment">/* content */</span> );</span><br></pre></td></tr></table></figure></li><li><p>Let’s break down what each item can be:</p><ul><li><p><code>type</code> – either a string or a React Component</p><p>This can be a string of any existing HTML element (e.g. <code>&#39;p&#39;</code>, <code>&#39;span&#39;</code>, or <code>&#39;header&#39;</code>) or you could pass a React <em>component</em> (we’ll be creating components with JSX, in just a moment).</p></li></ul></li></ul><ul><li><p><code>props</code> – either <code>null</code> or an object</p><p>This is an object of HTML attributes and custom data about the element.</p></li></ul><ul><li><p><code>content</code> – <code>null</code>, a string, a React Element, or a React Component</p><p>Anything that you pass here will be the content of the rendered element. This can include plain text, JavaScript code, other React elements, etc.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Why-React&quot;&gt;&lt;a href=&quot;#Why-React&quot; class=&quot;headerlink&quot; title=&quot;Why React?&quot;&gt;&lt;/a&gt;Why React?&lt;/h1&gt;&lt;p&gt;Composition Model&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A good fu
      
    
    </summary>
    
      <category term="React" scheme="https://eclatant.io/categories/React/"/>
    
    
      <category term="React" scheme="https://eclatant.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Codility ~7</title>
    <link href="https://eclatant.io/2018/04/22/Codility7/"/>
    <id>https://eclatant.io/2018/04/22/Codility7/</id>
    <published>2018-04-21T15:00:00.000Z</published>
    <updated>2018-05-02T15:18:42.860Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>문제 앞에 * 이 붙어있으면 어려웠던 문제이다</p></blockquote><p>이 글은 해답은 보고 싶지 않고, 문제 풀이는 막혀서 힌트만 받고 싶은 (아래 문제들을 풀 때의 나와 같은) 사람들에게 도움이 되는 것을 목표로 작성하였다</p><h2 id="Prefix-Sums"><a href="#Prefix-Sums" class="headerlink" title="Prefix Sums"></a>Prefix Sums</h2><h3 id="CountDiv"><a href="#CountDiv" class="headerlink" title="CountDiv"></a><a href="https://app.codility.com/programmers/lessons/5-prefix_sums/count_div/" target="_blank" rel="noopener">CountDiv</a></h3><p>문제에서 요구하는 시간복잡도가 O(1)이므로 loop 없이 식을 거치면 바로 결과를 반환할 수 있어야 한다</p><p>실제 문제 난이도에 비해서 한참 헤매었던 문제인데, <strong>나눗셈</strong>의 의미를 생각해보고 <strong>케이스 분류</strong>만 잘 하면 쉬운 문제이다</p><p><a href="https://app.codility.com/demo/results/trainingFJEKVX-9DK/" target="_blank" rel="noopener">내 코드</a></p><hr><h3 id="PassingCars"><a href="#PassingCars" class="headerlink" title="PassingCars"></a><a href="https://app.codility.com/programmers/lessons/5-prefix_sums/passing_cars/" target="_blank" rel="noopener">PassingCars</a></h3><p>문제에서 요구하는 시간복잡도가 O(N)이므로 한 번의 loop만으로 문제를 해결해야 한다</p><p>따라서 <strong>stack</strong>을 활용해야 했다</p><p><a href="https://app.codility.com/demo/results/trainingTFAZYA-4ZF/" target="_blank" rel="noopener">내 코드</a></p><hr><h3 id="MinAvgTwoSlice"><a href="#MinAvgTwoSlice" class="headerlink" title="* MinAvgTwoSlice"></a>* <a href="https://app.codility.com/programmers/lessons/5-prefix_sums/min_avg_two_slice/" target="_blank" rel="noopener">MinAvgTwoSlice</a></h3><p>문제에서 요구하는 시간복잡도가 O(N)이므로 <strong>최소값을 기록 및 대조</strong>하면서 loop를 순회해야 한다</p><p>이 문제에서 원하는 <strong>부분집합은 2개 또는 3개로 모두 설명될 수 있다</strong>는 점도 중요했다</p><p><a href="https://app.codility.com/demo/results/trainingSZNUV4-SX8/" target="_blank" rel="noopener">내 코드</a></p><hr><h3 id="GenomicRangeQuery"><a href="#GenomicRangeQuery" class="headerlink" title="* GenomicRangeQuery"></a>* <a href="https://app.codility.com/programmers/lessons/5-prefix_sums/genomic_range_query/" target="_blank" rel="noopener">GenomicRangeQuery</a></h3><p>문제에서 요구하는 시간복잡도가 O(N+M)이므로, <strong>중복되지 않는 두 번의 loop</strong>를 사용해야 한다</p><p>Input의 구간이 어떻게 올지 모르는 상태에서 해당 구간의 최소값을 구할 수 있어야 하므로, 한 번의 loop를 통해 기록을 해두어야 한다</p><p>또한 나머지 한 번의 루프를 통해 각각의 기록들을 비교하여 답을 내야 한다다</p><p><a href="https://app.codility.com/demo/results/trainingXD537B-EQJ/" target="_blank" rel="noopener">내 코드</a></p><hr><h2 id="Sorting"><a href="#Sorting" class="headerlink" title="Sorting"></a>Sorting</h2><h3 id="Triangle"><a href="#Triangle" class="headerlink" title="Triangle"></a><a href="https://app.codility.com/programmers/lessons/6-sorting/triangle/" target="_blank" rel="noopener">Triangle</a></h3><p><a href="https://app.codility.com/demo/results/trainingDJRKKY-XQP/" target="_blank" rel="noopener">내 코드</a></p><h3 id="Distinct"><a href="#Distinct" class="headerlink" title="Distinct"></a><a href="https://app.codility.com/programmers/lessons/6-sorting/distinct/" target="_blank" rel="noopener">Distinct</a></h3><p><a href="https://app.codility.com/demo/results/trainingNEVMH3-VN6/" target="_blank" rel="noopener">내 코드</a></p><p>설명할 필요가 없는 문제들이다</p><hr><h3 id="MaxProductOfThree"><a href="#MaxProductOfThree" class="headerlink" title="MaxProductOfThree"></a><a href="https://app.codility.com/programmers/lessons/6-sorting/max_product_of_three/" target="_blank" rel="noopener">MaxProductOfThree</a></h3><p>Input되는 배열의 각 요소별 조건이 무엇인지만 유념하면 되는 문제</p><p><a href="https://app.codility.com/demo/results/training4QFT9V-QVH/" target="_blank" rel="noopener">내 코드</a></p><hr><h3 id="NumberOfDiscIntersections"><a href="#NumberOfDiscIntersections" class="headerlink" title="* NumberOfDiscIntersections"></a>* <a href="https://app.codility.com/programmers/lessons/6-sorting/number_of_disc_intersections/" target="_blank" rel="noopener">NumberOfDiscIntersections</a></h3><p>우선 접점의 정의를 정확히 찾아보고 시작해야 한다</p><p><strong>stack</strong>을 활용하면 풀 수 있다, 또한 X좌표와 시작지점인지 여부를 동시에 표시해야 하므로 배열을 활용하면 좋다</p><p>인터넷에 범위를 점점 줄여나가는 이중 loop로 푸는 해답이 많은데,<br>문제에서 요구하는 시간복잡도가 O(N*log(N))이므로<br>stack을 활용하는 방향이 더 좋은 것 같다고 생각한다</p><p><a href="https://app.codility.com/demo/results/trainingCQ83SA-5QJ/" target="_blank" rel="noopener">내 코드</a></p><hr><h2 id="Stacks-and-Queues"><a href="#Stacks-and-Queues" class="headerlink" title="Stacks and Queues"></a>Stacks and Queues</h2><h3 id="StoneWall"><a href="#StoneWall" class="headerlink" title="StoneWall"></a><a href="https://app.codility.com/programmers/lessons/7-stacks_and_queues/stone_wall/" target="_blank" rel="noopener">StoneWall</a></h3><p><a href="https://app.codility.com/demo/results/training3C9PXC-NGU/" target="_blank" rel="noopener">내 코드</a></p><h3 id="Brackets"><a href="#Brackets" class="headerlink" title="Brackets"></a><a href="https://app.codility.com/programmers/lessons/7-stacks_and_queues/brackets/" target="_blank" rel="noopener">Brackets</a></h3><p><a href="https://app.codility.com/demo/results/training7WVQ6J-PCQ/" target="_blank" rel="noopener">내 코드</a></p><h3 id="Fish"><a href="#Fish" class="headerlink" title="Fish"></a><a href="https://app.codility.com/programmers/lessons/7-stacks_and_queues/fish/" target="_blank" rel="noopener">Fish</a></h3><p><a href="https://app.codility.com/demo/results/trainingT4DR4Q-YGN/" target="_blank" rel="noopener">내 코드</a></p><h3 id="Nesting"><a href="#Nesting" class="headerlink" title="Nesting"></a><a href="https://app.codility.com/programmers/lessons/7-stacks_and_queues/nesting/" target="_blank" rel="noopener">Nesting</a></h3><p><a href="https://app.codility.com/demo/results/training4W8H2J-F3F/" target="_blank" rel="noopener">내 코드</a></p><p>전형적인 stack 활용 문제들이다</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;문제 앞에 * 이 붙어있으면 어려웠던 문제이다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이 글은 해답은 보고 싶지 않고, 문제 풀이는 막혀서 힌트만 받고 싶은 (아래 문제들을 풀 때의 나와 같은) 사람들에게 도움이 되는 것을 
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://eclatant.io/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://eclatant.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Big O Notation</title>
    <link href="https://eclatant.io/2018/03/24/BigONotation/"/>
    <id>https://eclatant.io/2018/03/24/BigONotation/</id>
    <published>2018-03-23T15:00:00.000Z</published>
    <updated>2018-05-07T16:03:09.698Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://slideplayer.com/5041115/16/images/6/Examples+of+Algorithms+and+their+big-O+complexity.jpg" alt="img"></p><h3 id="시간복잡도"><a href="#시간복잡도" class="headerlink" title="시간복잡도"></a>시간복잡도</h3><ul><li><p>점근적 실행 시간</p></li><li><p>그 중에서 Big O 표기법은 점근적 시간의 상한을 뜻한다</p><ul><li><p>계산 복잡도를 그래프로 나타내었을 때, 최악의 경우에도 알고리즘의 계산 복잡도에 비교했을 때 같거나 그보다 높은 곳에 위치할 그래프이기에 상한이라 칭한다</p></li><li><p><a href="https://ratsgo.github.io/data%20structure&amp;algorithm/2017/09/13/asymptotic/" target="_blank" rel="noopener">점근적 표기법</a></p></li></ul></li><li><p>업계에선 Big O 표기법을 Big theta, 즉 수행 시간에 딱 맞추어 표기하려고 하는 경향이 있다</p></li><li><p>대부분의 알고리즘은 최악의 경우와 평균적인 경우가 같다</p></li></ul><h3 id="공간복잡도"><a href="#공간복잡도" class="headerlink" title="공간복잡도"></a>공간복잡도</h3><ul><li><p>시간복잡도와 평행선을 이룸</p></li><li><p>재귀 호출에 쓰이는 스택 공간도 포함됨</p><ul><li>꼬리 재귀 호출을 충족한다면 해당되지 않는다</li></ul></li></ul><h3 id="상수항은-무시하라-지배적이지-않은-항을-무시하라"><a href="#상수항은-무시하라-지배적이지-않은-항을-무시하라" class="headerlink" title="상수항은 무시하라, 지배적이지 않은 항을 무시하라"></a>상수항은 무시하라, 지배적이지 않은 항을 무시하라</h3><ul><li>Big O 표기법은 데이터의 증가에 따른 점근적 실행 시간의 변화증가율을 나타내기 위한 것이므로 무시한다</li></ul><h3 id="여러-부분으로-이루어진-알고리즘-덧셈-VS-곱셈"><a href="#여러-부분으로-이루어진-알고리즘-덧셈-VS-곱셈" class="headerlink" title="여러 부분으로 이루어진 알고리즘: 덧셈 VS 곱셈"></a>여러 부분으로 이루어진 알고리즘: 덧셈 VS 곱셈</h3><ul><li><p>A일을 모두 마치고 B일을 해야 한다면 A + B</p></li><li><p>A일을 할 때마다 B일을 해야 한다면 A * B</p></li></ul><h3 id="상환시간"><a href="#상환시간" class="headerlink" title="상환시간"></a>상환시간</h3><ul><li>ArrayList의 경우, 배열의 용량이 꽉 찼을 때, 기존보다 크기가 두 배 더 큰 배열을 만든 뒤, 이전 배열의 모든 원소를 새 배열로 복사한다, 이때 삽입 연산의 수행 시간은 기존의 모든 원소를 새 배열로 복사해야 하기에 O(N)이 소요된다, 그러나 배열에 가용 공간이 존재할 때 삽입 연산은 O(1)이 걸린다, 위 두 가지 경우를 포함한 전체 수행 시간을 따져볼 때 상환 시간이라는 개념을 이용한다, 최악의 경우는 가끔 발생하지만 해당 수행 시간을 나머지 경우에서 분할 상환한다는 개념이다, 위 케이스에서 배열의 크기가 2의 배수일 때 원소 삽입 연산에 O(N)이 소요된다, 이러한 N의 합은 X개의 원소를 삽입할 때 2X만큼 걸리므로 이를 분할 상환하면 삽입 한 번에 필요한 시간은 O(1)이다</li></ul><h3 id="log-N-수행-시간"><a href="#log-N-수행-시간" class="headerlink" title="log N 수행 시간"></a>log N 수행 시간</h3><ul><li><p>대표적인 케이스는 이진 탐색이다</p></li><li><p>탐색할 때마다 원소의 개수가 절반씩 줄어든다면, 수행 시간은 O(log N)일 가능성이 크다</p></li></ul><h3 id="재귀적으로-수행-시간-구하기"><a href="#재귀적으로-수행-시간-구하기" class="headerlink" title="재귀적으로 수행 시간 구하기"></a>재귀적으로 수행 시간 구하기</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def f(n):</span><br><span class="line">    if n &lt;= 1:</span><br><span class="line">        return 1</span><br><span class="line">    else:</span><br><span class="line">        return f(n - 1) + f(n - 1)</span><br></pre></td></tr></table></figure><ul><li><p>위 케이스의 수행 시간은 O(2^N)이다</p></li><li><p>트리의 깊이가 N이고, 각 노드는 두 개의 자식 노드를 가지고 있으므로 깊이가 깊어질 때마다 이전보다 두 배 더 많이 호출하게 되기 때문이다</p></li><li><p>다수의 호출로 이루어진 재귀 함수에서 수행 시간은 보통 O(분기^깊이)이다, 분기란 재귀 함수가 자신을 재호출하는 횟수를 뜻함</p></li><li><p>위 케이스의 공간복잡도는 O(N)이다</p></li></ul><h3 id="예제-및-연습-문제"><a href="#예제-및-연습-문제" class="headerlink" title="예제 및 연습 문제"></a>예제 및 연습 문제</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(array)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    product = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(array)):</span><br><span class="line">        sum += array[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(array)):</span><br><span class="line">        product *= array[i]</span><br><span class="line"></span><br><span class="line">    print(<span class="string">f"<span class="subst">&#123;sum&#125;</span>, <span class="subst">&#123;product&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">foo([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]) <span class="comment"># O(N)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printPairs</span><span class="params">(array)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(array)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(array)):</span><br><span class="line">            print(<span class="string">f"<span class="subst">&#123;array[i]&#125;</span>, <span class="subst">&#123;array[j]&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">printPairs([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]) <span class="comment"># O(N^2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 총 수행 시간을 헤아리는 것 외에도, 위 코드가 무엇을 의미하는지 살펴보는 것을 통해 구할 수도 있다</span></span><br><span class="line"><span class="comment"># 위의 코드는 모든 쌍을 출력하는 코드이다, 그러므로 쌍의 총 개수인 N^2과 동일</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printUnorderedPairs</span><span class="params">(array)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(array)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(array)):</span><br><span class="line">            print(<span class="string">f"<span class="subst">&#123;array[i]&#125;</span>, <span class="subst">&#123;array[j]&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">printUnorderedPairs([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]) <span class="comment"># O(N^2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 반복 횟수의 합</span></span><br><span class="line"><span class="comment"># 코드의 의미는 전체 쌍(사각형)의 절반</span></span><br><span class="line"><span class="comment"># 평균을 이용 =&gt; 바깥 루프는 N번, 안쪽 루프는 평균값으로 N/2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printUnorderedPairs2</span><span class="params">(array_a, array_b)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(array_a)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(array_b)):</span><br><span class="line">            <span class="keyword">if</span> array_a[i] &lt; array_b[j]:</span><br><span class="line">                print(<span class="string">f"<span class="subst">&#123;array_a[i]&#125;</span>, <span class="subst">&#123;array_b[j]&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">printUnorderedPairs2([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]) <span class="comment"># O(A*B)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 두 배열 각각의 크기를 알 수 없으므로, 크기를 모두 고려해야 하므로 O(A*B)이다</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printUnorderedPairs3</span><span class="params">(array_a, array_b)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(array_a)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(array_b)):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">100000</span>):</span><br><span class="line">                print(<span class="string">f"<span class="subst">&#123;array_a[i], &#123;array_b[i]&#125;</span>&#125;"</span>)</span><br><span class="line"></span><br><span class="line">printUnorderedPairs3([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]) <span class="comment"># O(A*B)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 100000은 상수항이므로 Big O에 영향을 미치지 못한다</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># P74</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(array)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(array) // <span class="number">2</span>):</span><br><span class="line">        other = len(array) - i - <span class="number">1</span></span><br><span class="line">        array[i], array[other] = array[other], array[i]</span><br><span class="line"></span><br><span class="line">reverse([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]) <span class="comment"># O(N)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 배열의 절반만 살펴본다고 해서 (반복횟수가 N의 절반이라고 해서) Big O에 영향을 끼치는 것은 아니다</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># P &lt; N/2 일 때, O(N+P) 는 O(N)</span></span><br><span class="line"><span class="comment"># O(2N)은 O(N)</span></span><br><span class="line"><span class="comment"># O(N + logN)은 O(N)</span></span><br><span class="line"><span class="comment"># O(N+M)은 N과 M의 관계를 알 수 없다면 O(N+M)으로 표기해야 함</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># P75</span></span><br><span class="line"><span class="comment"># 여러 개의 문자열로 구성된 배열이 주어졌을 때, 각각의 문자열을 먼저 정렬하고</span></span><br><span class="line"><span class="comment"># 그 다음에 전체 문자열을 사전순으로 다시 정렬하는 알고리즘의 수행시간은 어떠하겠는가?</span></span><br><span class="line"><span class="comment"># 각 문자열을 정렬 =&gt; O(NlogN)</span></span><br><span class="line"><span class="comment"># 모든 문자열을 정렬 =&gt; O(N*NlogN)</span></span><br><span class="line"><span class="comment"># 전체 문자열을 사전순으로 정렬 =&gt; O(NlogN) 추가</span></span><br><span class="line"><span class="comment"># 따라서 O(N^2logN + NlogN)이므로 O(N^2logN)이다 는 완전히 잘못된 분석!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 서로 다른 N을 혼용해서 쓰니까 위와 같은 오류를 범하게 된다</span></span><br><span class="line"><span class="comment"># 문자열의 길이를 나타낼 때와 배열의 길이를 나타낼 때를 구분하여 사용했어야 한다</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 변수 N을 사용하지 않거나 N이 가리키는 것이 명백한 경우에만 사용하라</span></span><br><span class="line"><span class="comment"># 연상 가능한 이름을 사용해서 새로운 변수를 정의하라</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 가장 길이가 긴 문자열의 길이를 s라 하자</span></span><br><span class="line"><span class="comment"># 배열의 길이를 a라 하자</span></span><br><span class="line"><span class="comment"># 각 문자열을 정렬하는데 O(slogs)</span></span><br><span class="line"><span class="comment"># a개의 문자열이므로 O(a * slogs)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 전체 문자열을 사전순으로 정렬해야 함, 총 a개의 문자열이 있어서 O(aloga)가</span></span><br><span class="line"><span class="comment"># 필요하다고 생각할 수 있지만, 문자열을 비교하는 시간도 고려해야 한다</span></span><br><span class="line"><span class="comment"># 두 문자열을 비교하는데 O(s)가 소요되며, 비교를 O(aloga)번 해야 하므로</span></span><br><span class="line"><span class="comment"># 결론적으로 O(s*aloga)가 소요됨</span></span><br><span class="line"><span class="comment"># 위 두 부분을 합치면 전체 시간 복잡도는 O(a*s(logs + loga))가 된다</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># P76</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumNode</span><span class="params">(node)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> node == <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> sumNode(node.left) + node.value + sum(node.right)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 균형 이진 탐색 트리에서 모든 노드의 값을 더하는 코드</span></span><br><span class="line"><span class="comment"># 이진 탐색 트리라는 이유로 log가 있을 것이라 착각해선 안 된다</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 코드가 무엇을 의미하는가</span></span><br><span class="line"><span class="comment"># 트리의 모든 노드를 방문해서 합을 구하는 것이므로, 노드의 개수와 선형 관계</span></span><br><span class="line"><span class="comment"># O(N)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 재귀호출 패턴 분석</span></span><br><span class="line"><span class="comment"># 재귀함수에 분기가 여러 개 존재할 때, 일반적으로 O(분기^깊이)가 된다</span></span><br><span class="line"><span class="comment"># 트리의 깊이는 N개에 대해 logN이다</span></span><br><span class="line"><span class="comment"># 분기가 2라면 2^logN이므로 O(N)이 된다</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># P77</span></span><br><span class="line"><span class="comment"># N이 소수를 확인하려면 N의 제곱근까지만 확인해보면 된다</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 어떤 수의 제곱근이란 그 수가 갖는 약수들 중에 자신을 제외하고 가장 큰 수. 라고 볼 수 있을 것 같아요.</span></span><br><span class="line"><span class="comment"># 소수라는게 1과 자기자신만을 약수로 가져야 하는데 또 다른 약수를 갖게 되면 안되는거니까</span></span><br><span class="line"><span class="comment"># 제곱근으로도 나누어 떨어지면 소수가 될 수 없는것이죠. 또한 어떤 수를 그 수의 제곱근 이상으로</span></span><br><span class="line"><span class="comment"># 나누게 되면 앞서 2부터 나누었던 결과가 반복되게 됩니다. 어떤 수를 2부터 제곱근까지의 수로</span></span><br><span class="line"><span class="comment"># 나눈다는 것을 그 수를 자신을 제외한 제수들로 나누었을 때 가질 수 있는 몫의 최소값(2)부터</span></span><br><span class="line"><span class="comment"># 최대값(제곱근)까지로 나눠 보는 것이라 생각하면 이해가 빠를 것 같아요.</span></span><br><span class="line"><span class="comment"># 제곱근 이상의 수로 나누게 되면 제곱근으로 나누었을 때보다 작은 몫을 결과로 반환하게 되서</span></span><br><span class="line"><span class="comment"># 제곱근 이하의 수로 나누었던 계산들을 반복하게 됩니다. 수 25에서 제곱근 5는 25가</span></span><br><span class="line"><span class="comment"># 가질 수 있는 몫의 최대값입니다. 그리고 그 이상의 수로 나누었을 때는 제곱근(5) 이하의 값들을</span></span><br><span class="line"><span class="comment"># 몫으로 반환하기 때문에 2부터 4까지 나누는 계산과 같게 되서 의미가 없는 거 같습니다.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPrime</span><span class="params">(n)</span>:</span></span><br><span class="line">i = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i ** <span class="number">2</span> &lt;= n:</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        x += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 시간 복잡도는 O(√N)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># P78</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># O(N)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutation</span><span class="params">(s, prefix=<span class="string">""</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(s) == <span class="number">0</span>:</span><br><span class="line">        print(prefix)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">            rem = s[<span class="number">0</span>:i] + s[i+<span class="number">1</span>:]</span><br><span class="line">            permutation(rem, prefix + s[i])</span><br><span class="line"></span><br><span class="line"><span class="comment"># O(N^2 * N!)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 순열의 종류가 모두 출력되니, O(N!)</span></span><br><span class="line"><span class="comment"># 순열을 조합하기 위해서 N개의 글자만큼의 호출이 필요하므로 O(N)</span></span><br><span class="line"><span class="comment"># 매 for문마다 문자열을 재조립하거나, 출력하는 것과 같은 O(N) 연산 소요:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># P79</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span> <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># O(2^N)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 재귀 호출이 여러 번 발생하면 지수 시간 알고리즘일 가능성이 큼</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># P80</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allFib</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;i&#125;</span>: <span class="subst">&#123;fib(i)&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># O(2^N)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># fib는 O(2^N)이 맞다, 그러나 전체 걸리는 시간은 O(N*2^N)이 아니다</span></span><br><span class="line"><span class="comment"># 그 이유는 각각의 호출시마다 N이 변화하기 때문이다</span></span><br><span class="line"><span class="comment"># 등비수열의 합공식에 따라 O(2^N+1)이 되므로 O(2^N)이다</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># P81</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allFib</span><span class="params">(n)</span>:</span></span><br><span class="line">    memo = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;i&#125;</span>: <span class="subst">&#123;fib(i, memo)&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n, memo)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>: <span class="keyword">return</span> memo[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">elif</span> len(memo) &gt; n <span class="keyword">or</span> n == <span class="number">1</span>: <span class="keyword">return</span> memo[n]</span><br><span class="line">    memo.append(fib(n<span class="number">-1</span>, memo) + fib(n<span class="number">-2</span>, memo))</span><br><span class="line">    <span class="keyword">return</span> memo[n]</span><br><span class="line"></span><br><span class="line"><span class="comment"># O(N)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 상수 시간의 일을 N번 반복한다 (캐시값을 찾아서 더한 뒤 그 결과를 캐시 배열에 저장하고 반환)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># P82</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">powers_of_2</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">1</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">        print(n)</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        prev = powers_of_2(n//<span class="number">2</span>)</span><br><span class="line">        curr = prev * <span class="number">2</span></span><br><span class="line">        print(curr)</span><br><span class="line">        <span class="keyword">return</span> curr</span><br><span class="line"></span><br><span class="line"><span class="comment"># O(logN)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1이 될 때까지 절반씩 나누므로 log</span></span><br><span class="line"><span class="comment"># 해당 코드의 목적을 생각해보면, 1부터 n사이의 모든 2의 승수를 계산하고 출력하므로</span></span><br><span class="line"><span class="comment"># 함수의 호출 횟수는 승수의 개수와 동일하다</span></span><br><span class="line"><span class="comment"># n이 커질수록 수행 시간이 어떻게 바뀌는가? n의 크기가 두 배가 될 때 호출 횟수가 한 번 증가한다</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># P83</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">product</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(b):</span><br><span class="line">        sum += a</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line"><span class="comment"># O(N)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># P84</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> b &lt; <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> b == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>: <span class="keyword">return</span> a * power(a, b - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># O(N)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mod</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> b &lt;= <span class="number">0</span>: <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    div = a / b</span><br><span class="line">    <span class="keyword">return</span> a - div * b</span><br><span class="line"></span><br><span class="line"><span class="comment"># O(1)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">div</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    sum = b</span><br><span class="line">    <span class="keyword">while</span> sum &lt;= a:</span><br><span class="line">        sum += b</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"><span class="comment"># O(a/b)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqrt</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sqrt_helper(n, <span class="number">1</span>, n)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqrt_helper</span><span class="params">(n, mi, ma)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> ma &lt; mi: <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    guess = (mi + ma) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> guess * guess == n: <span class="keyword">return</span> guess</span><br><span class="line">    <span class="keyword">elif</span> guess * guess &lt; n: <span class="keyword">return</span> sqrt_helper(n, guess + <span class="number">1</span>, ma)</span><br><span class="line">    <span class="keyword">else</span>: <span class="keyword">return</span> sqrt_helper(n, mi, guess - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># O(logN)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># P85</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqrt</span><span class="params">(n)</span>:</span></span><br><span class="line">    guess = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> guess * guess &lt;= n:</span><br><span class="line">        <span class="keyword">if</span> guess * guess == n:</span><br><span class="line">            <span class="keyword">return</span> guess</span><br><span class="line">        guess += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># O(√N)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 이진 탐색 트리가 균형 잡혀있지 않을 때, 원소를 찾는데 걸리는 최악의 경우</span></span><br><span class="line"><span class="comment"># O(N)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 이진 트리가 이진 탐색 트리가 아닐 때 시간 복잡도</span></span><br><span class="line"><span class="comment"># O(N)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copyArray</span><span class="params">(array)</span>:</span></span><br><span class="line">    copy = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> array:</span><br><span class="line">        copy = appendToNew(copy, value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> copy</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">appendToNew</span><span class="params">(array, value)</span>:</span></span><br><span class="line">    bigger = [<span class="number">0</span>] * len(array)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(array)):</span><br><span class="line">        bigger[i] = array[i]</span><br><span class="line"></span><br><span class="line">    bigger.append(value)</span><br><span class="line">    <span class="keyword">return</span> bigger</span><br><span class="line"></span><br><span class="line"><span class="comment"># O(N^2)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># P86</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumDigits</span><span class="params">(n)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        sum += n % <span class="number">10</span></span><br><span class="line">        n //= <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line"><span class="comment"># O(logN)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://github.com/careercup/CtCI-6th-Edition/blob/master/Java/Introduction/Big_O/Q_11.java</span></span><br><span class="line">numChars = <span class="number">26</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printSortedStrings</span><span class="params">(remaining, prefix=<span class="string">""</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> remaining == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> isInOrder(prefix):</span><br><span class="line">            print(prefix)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(numChars):</span><br><span class="line">            c = ithLetter(i)</span><br><span class="line">            printSortedStrings(remaing - <span class="number">1</span>, prefix + c)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isInOrder</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(s)):</span><br><span class="line">        prev = ithLetter(s[i<span class="number">-1</span>])</span><br><span class="line">        curr = ithLetter(s[i])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> prev &gt; curr:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ithLetter</span><span class="params">(i)</span>:</span></span><br><span class="line">    return ?</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://github.com/careercup/CtCI-6th-Edition/blob/master/Java/Introduction/Big_O/Q_12.java</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">intersection</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    mergesort(b)</span><br><span class="line">    intersect = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">if</span> binarySearch(b, x) &gt;= <span class="number">0</span>:</span><br><span class="line">            intersect += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line"><span class="keyword">return</span> intersect</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://slideplayer.com/5041115/16/images/6/Examples+of+Algorithms+and+their+big-O+complexity.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;시간복잡도&quot;
      
    
    </summary>
    
      <category term="CtCI" scheme="https://eclatant.io/categories/CtCI/"/>
    
    
      <category term="CtCI" scheme="https://eclatant.io/tags/CtCI/"/>
    
  </entry>
  
  <entry>
    <title>Codility ~4</title>
    <link href="https://eclatant.io/2018/03/13/Codility4/"/>
    <id>https://eclatant.io/2018/03/13/Codility4/</id>
    <published>2018-03-12T15:00:00.000Z</published>
    <updated>2018-05-02T15:18:39.994Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>문제 앞에 * 이 붙어있으면 어려웠던 문제이다</p></blockquote><h2 id="Iterations"><a href="#Iterations" class="headerlink" title="Iterations"></a>Iterations</h2><h3 id="BinaryGap"><a href="#BinaryGap" class="headerlink" title="BinaryGap"></a><a href="https://app.codility.com/programmers/lessons/1-iterations/binary_gap/" target="_blank" rel="noopener">BinaryGap</a></h3><p>문제에서 요구하는 시간복잡도 O(log(N))</p><p>=&gt; 이진탐색과 같이, 거듭 2로 나누어서 정답을 구하는 과정이겠구나 라고 예상해볼 수 있다.</p><p>2진수 구하는 방법을 기본적으로 익히고 있어야 할 것 같다.</p><p>관련해서 떠오른 글</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Frank Hyunsok Oh</span><br><span class="line"></span><br><span class="line">학습 효율을 위해서는 기본적인 언어와 라이브러리 기능 숙지 외에 대충 3가지 층위의 연습이 필요한 것 같습니다.</span><br><span class="line"></span><br><span class="line">- 기본적으로 해당 언어에서 자주 발생하는 간단한 과업을 처리할 때 사용하는 숙어를 숙지하는 연습.</span><br><span class="line"></span><br><span class="line">예를 들어 C에서 정수 스왑시 a ^= b; b ^= a; a ^= b; 라던지 1중 또는 2중, 3중 for루프를 돌려가면서 삼각형을 그린다던지,</span><br><span class="line"></span><br><span class="line">실수를 정수화하는 여러가지 방법이라던지.. 이런 자잘한 숙어를 익혀두고 연습할 수 있는 교재나 도구가 필요한 것 같습니다.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 여러 숙어를 엮어서 함수(또는 메소드와 객체)를 만들고 이를 엮어서 한가지 API를 제공하는 독립된 단위(모듈이라고 불러도 좋고)을 만드는 연습</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 여러 모듈을 조합해 원하는 목표를 달성하는 애플리케이션을 만드는 연습.</span><br><span class="line"></span><br><span class="line">게임도 좋고 개밥 먹기를 위한 간단한 유틸리티도 좋고, 책에서 본 예제를 자신의 방식으로 만들어 보는 것도 좋죠.</span><br><span class="line"></span><br><span class="line">요구사항을 추출하고 거기서 프로그램을 설계하고 코딩하는 과정과 그 과정에서 프로젝트 진행과 품질을 관리하고 디버깅하는 경험을 쌓아야 합니다.</span><br></pre></td></tr></table></figure><hr><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><h3 id="CyclicRotation"><a href="#CyclicRotation" class="headerlink" title="CyclicRotation"></a><a href="https://app.codility.com/programmers/lessons/2-arrays/cyclic_rotation/" target="_blank" rel="noopener">CyclicRotation</a></h3><p>배열에 대한 입출력 메소드를 알고 있는가?</p><p>unshift : 배열의 맨 앞에 데이터를 추가하고 길이를 반환</p><p>shift : 배열의 맨 앞 데이터를 제거하고 제거된 값, 빈 배열이면 undefined를 반환</p><p>push : 배열의 맨 끝에 데이터를 추가하고, 길이를 반환</p><p>pop : 배열의 맨 끝 데이터를 제거하고, 제거된 값, 빈 배열이면 undefined를 반환</p><h3 id="OddOccurrencesInArray"><a href="#OddOccurrencesInArray" class="headerlink" title="OddOccurrencesInArray"></a><a href="https://app.codility.com/programmers/lessons/2-arrays/odd_occurrences_in_array/" target="_blank" rel="noopener">OddOccurrencesInArray</a></h3><p>문제에서 요구하는 시간복잡도 O(N)</p><p>M * N일 수는 있지만 결국은 순회할 때 그 안에서 for문을 하는 등의 작업은 불가능</p><p>즉 순회 과정에서 기존에 나왔던 숫자인지 비교하기 위한 로직을 O(1)로 구현할 수 있어야 함</p><p>그러기 위해선 그 전에 나왔던 숫자에 대해 저장해놓는 과정이 필요하니, 이것을 Dictionary 형태를 활용해서 구현</p><p>(배열 형태로 만들게 되면 배열에서 해당 값이 저장되어있는 위치를 찾기 위해 순회하는 과정이 필요하게 되므로 O(1)이 성립하지 않게 됨)</p><h3 id="TapeEquilibrium"><a href="#TapeEquilibrium" class="headerlink" title="TapeEquilibrium"></a><a href="https://app.codility.com/programmers/lessons/3-time_complexity/tape_equilibrium/" target="_blank" rel="noopener">TapeEquilibrium</a></h3><p>문제에서 요구하는 시간복잡도 O(N)</p><p>2-2가 그랬듯이, left와 right를 순회시마다 구할 수는 없음</p><p>따라서 순회시마다 변화하는 값을 통해 비교할 수 있어야 함</p><p>여기서는 정방향으로 순회시에 순회 때마다 우측에 있던 값이 좌측으로 옮겨가는 구조이므로</p><p>순회시마다 값을 좌측에 더하고, 우측에서 빼고 문제에서 차의 절대값의 크기를 구해야 함</p><p>이때도 가장 작은 값을 찾기 위해선 기존에 저장해놓은 차이값과 비교해서 더 작으면 덮어쓰고 아니면 Pass하는 방식으로 진행 필요</p><hr><h2 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity"></a>Time Complexity</h2><h3 id="PermMissingElem"><a href="#PermMissingElem" class="headerlink" title="PermMissingElem"></a><a href="https://app.codility.com/programmers/lessons/3-time_complexity/perm_missing_elem/" target="_blank" rel="noopener">PermMissingElem</a></h3><p>문제에서 요구하는 시간복잡도 O(N)</p><p>원래 나올 수 있는 숫자를 모두 만들어놓고 없애가면서 남아있는 숫자를 보여주고,</p><p>제한사항에 있는 예외사항([]) 등을 처리하는 방식도 가능하지만,</p><p>문제의 데이터가 모두 숫자이고, 누락된 하나의 값을 찾는다는 점에서 차를 통해서 구하는 것도 가능합니다</p><hr><h2 id="Counting-Elements"><a href="#Counting-Elements" class="headerlink" title="Counting Elements"></a>Counting Elements</h2><h3 id="FrogRiverOne"><a href="#FrogRiverOne" class="headerlink" title="FrogRiverOne"></a><a href="https://app.codility.com/programmers/lessons/4-counting_elements/frog_river_one/" target="_blank" rel="noopener">FrogRiverOne</a></h3><p>문제에서 요구하는 시간복잡도 O(N)</p><p>X값을 통해 채워져야 할 모든 숫자 값을 미리 배열에 담아놓고, 숫자가 나올 때마다 count를 해서, X값과 같은 값이 나오면 리턴해주고 끝까지 나오지 않는다면 -1</p><h3 id="MissingInteger-PermCheck"><a href="#MissingInteger-PermCheck" class="headerlink" title="MissingInteger / PermCheck"></a><a href="https://app.codility.com/programmers/lessons/4-counting_elements/missing_integer/" target="_blank" rel="noopener">MissingInteger</a> / <a href="https://app.codility.com/programmers/lessons/4-counting_elements/perm_check/" target="_blank" rel="noopener">PermCheck</a></h3><p>앞선 문제들과 동일한 패턴으로 풀 수 있는 문제이다.</p><h3 id="MaxCounters"><a href="#MaxCounters" class="headerlink" title="* MaxCounters"></a>* <a href="https://app.codility.com/programmers/lessons/4-counting_elements/max_counters/" target="_blank" rel="noopener">MaxCounters</a></h3><p>앞 문제들과 비슷하지만, 조금 더 복잡한 문제이다.</p><p>숫자들에 대해서 재평가가 필요할 때까지 평가를 미뤄두고, 재평가가 되어야 할 때 미리 저장해놓은 값과 비교하여 평가해야 한다</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;문제 앞에 * 이 붙어있으면 어려웠던 문제이다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Iterations&quot;&gt;&lt;a href=&quot;#Iterations&quot; class=&quot;headerlink&quot; title=&quot;Iterations&quot;&gt;
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://eclatant.io/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://eclatant.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>빅오표기법</title>
    <link href="https://eclatant.io/2018/03/12/BigO/"/>
    <id>https://eclatant.io/2018/03/12/BigO/</id>
    <published>2018-03-11T15:00:00.000Z</published>
    <updated>2018-05-02T15:18:32.389Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.youtube.com/watch?v=6Iq5iMCVsXA" target="_blank" rel="noopener">빅오(Big-O)표기법 완전정복</a></p><p><img src="http://www.jidum.com/upload/ckeditor/2016/09/2016090909541455.jpg" alt="img"></p><p>알고리즘의 성능을 수학적으로 표시해주는 표기법</p><p>실제 수행시간보다는 데이터의 증가에 따른 증가량을 예측하는 것에 목적을 두므로 상수는 모두 버린다</p><table><thead><tr><th>BigO</th><th>설명</th></tr></thead><tbody><tr><td>O(1)</td><td>입력 데이터와 무관하게 일정한 시간이 소요됨</td></tr><tr><td>O(N)</td><td>입력 데이터에 비례해서 처리시간이 소요됨</td></tr><tr><td>O(N^2)</td><td>N개의 데이터를 받으면 각각의 아이템마다 N번의 연산을 수행함</td></tr><tr><td>O(NM)</td><td>N과 M의 변수가 다르다면 N^2과는 분명하게 차이가 존재함, 증가에 따른 변화율은 N^2과 동일</td></tr><tr><td>O(N^3)</td><td>데이터의 증가에 따라 더 급격한 증가</td></tr><tr><td>O(2^N)</td><td>피보나치 수열, N^3보다도 현저한 증가</td></tr><tr><td>O(logN)</td><td>이진검색이 대표적 사례</td></tr><tr><td>O(sqrt(N))</td><td>정사각형을 만들어서 맨 위의 한 줄이 제곱근</td></tr></tbody></table><p>피보나치 나선형</p><p><img src="http://roulettegeeks.com/wp-content/uploads/2015/09/Fibonacci-Roulette-System.jpg" alt="img"></p><p>상수는 과감히 버린다, 상수는 데이터의 증가에 대해 상수만큼만 영향을 미치므로 증가하지 않는 숫자는 무시한다</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=6Iq5iMCVsXA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;빅오(Big-O)표기법 완전정복&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.ji
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://eclatant.io/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://eclatant.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>React 입문</title>
    <link href="https://eclatant.io/2018/03/07/React-Intro/"/>
    <id>https://eclatant.io/2018/03/07/React-Intro/</id>
    <published>2018-03-06T15:00:00.000Z</published>
    <updated>2018-05-02T15:19:05.239Z</updated>
    
    <content type="html"><![CDATA[<p>미리 밝히자면 아래 내용은 결과론적일 수 있고, 필자의 개인적인 추측들이 담겨있으며, 마지막으로 필자는 Angular 또는 Vue로 프로젝트를 해본 경험이 전혀 없습니다.</p><hr><p>React는 Anti-Angular 목적이 담긴 라이브러리였다고 생각합니다.</p><p>예전에는 React에서 내세웠던 3가지 가치가 아래와 같았습니다.</p><p><code>Just the UI</code>, <code>Virtual DOM</code>, <code>Data Flow</code></p><p>첫 번째 내세운 가치인 Just the UI 는, Angular가 풀려는 문제가 매우 크고 그에 따른 해결책도 복잡했기에, React는 매우 단순하며 쉬운 <code>라이브러리</code>라는 점을 대단히 강조하고 싶었던 것 같습니다.</p><p>두 번째인 Virtual DOM은 Angular가 Digest Loop를 통해 변경사항을 반영했다면, React는 Virtual DOM을 통해서 효과적으로 Diff를 반영한다는 것을 내세우고 싶었던 것 같습니다.</p><p>마지막으로 Data Flow 역시 Angular는 Model-View 간의 양방향 바인딩을 지원했던 것에 비해, React는 단방향으로 Data의 변화를 View에 반영시키는 점도 Angular의 복잡성에 대한 차별성으로 나온 것이 아닐까 싶습니다.</p><p>최근에 React 공식 사이트가 Gatsby로 개편되면서 내용에도 일부 변화가 있었는데, 내세우는 3가지 가치가 아래와 같이 바뀌었습니다.</p><p><code>Declarative</code>, <code>Component-Based</code>, <code>Learn Once, Write Anywhere</code></p><p>첫 번째에서 말하는, 선언적인 View가 가능하다는 점은 제가 생각하는 React의 가장 큰 장점입니다.</p><p>Vanila나 jQuery로 개발했다면, Event Listener를 Delegation해놓고, 해당하는 Event Handler를 절차적으로 작성하여 User Interaction 또는 Data의 변화에 따른 View 수정을 했어야 했을 것입니다.</p><p>그에 비해서 React는 Component에 작성해놓은 방향대로 변화(User Interaction, Data Change)가 View에 반영되도록 돕습니다.</p><p>두 번째에서 말하는 Component는 굳이 언급이 필요했는지에 대해 잘 모르겠습니다. (React의 고유한 특징이라고 보기는 어려우므로) 오히려 하단에 적혀있는 아래 문구에 좀 더 방점이 찍혀있는 것인가 싶습니다.</p><blockquote><p>Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep state out of the DOM.</p></blockquote><p>마지막으로 Learn Once, Write Anywhere 역시 의미를 알기 어려웠는데, React Native 또는 React VR 등을 염두해두고 작성한 것인가 싶습니다.</p><p>어떤 라이브러리나 프레임워크를 사용할지 여부를 판단하기 위해 꼭 참고해야 할 Marketing Copy를 기준으로 React를 돌아보았습니다. 제가 알지 못하는 뒷배경들이 많겠지만, 적어도 제게는 예전 문구들이 훨씬 더 매력적이었던 것 같습니다.</p><p>실제로 React를 사용하기 위해선 Props, State, setState, Presentation Component, Container Component, Life Cycle, State Management, CRA, Webpack, SSR 등 알아야 할 것들이 많지만 해당 요소들은 다른 글을 통해 알아보기로 하겠습니다.</p><p>글에 대한 피드백은 언제든 환영합니다! :D</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;미리 밝히자면 아래 내용은 결과론적일 수 있고, 필자의 개인적인 추측들이 담겨있으며, 마지막으로 필자는 Angular 또는 Vue로 프로젝트를 해본 경험이 전혀 없습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;React는 Anti-Angular 목적이 담긴 라이
      
    
    </summary>
    
      <category term="React" scheme="https://eclatant.io/categories/React/"/>
    
    
      <category term="React" scheme="https://eclatant.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>파이썬 기초</title>
    <link href="https://eclatant.io/2018/03/07/Python-Basic/"/>
    <id>https://eclatant.io/2018/03/07/Python-Basic/</id>
    <published>2018-03-06T15:00:00.000Z</published>
    <updated>2018-05-02T15:18:57.292Z</updated>
    
    <content type="html"><![CDATA[<p>1일차</p><ul><li>자료형</li><li>제어문</li><li>입력과 출력</li><li>함수</li><li>PEP8</li></ul><h5 id="자료형과-자료구조는-무엇이-다른가"><a href="#자료형과-자료구조는-무엇이-다른가" class="headerlink" title="자료형과 자료구조는 무엇이 다른가?"></a>자료형과 자료구조는 무엇이 다른가?</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">자료형 = Data Type / 프리미티브 타입(파이썬에서 이미 구현이 완료되어있는 애들) / 숫자, 문자, 리스트, 튜플, 딕셔너리, 셋 등</span><br><span class="line">자료구조 = Data Structure / 데이터를 저장하는 방식 / 배열, 집합, 키-값 등</span><br><span class="line">자료구조중 일부들이 자료형으로 이미 구현되어있음</span><br><span class="line">배열 = 리스트, 집합 = 셋, 키-값 = 딕셔너리</span><br><span class="line">그 언어는 어떤 자료형을 제공하고 있는지를 이해하는 것이 매우 중요합니다</span><br><span class="line">또한 컴퓨터 분야 전반에서는 어떤 자료구조를 쓰고 있는가 에 대한 파악하는 것이 매우 중요하다</span><br></pre></td></tr></table></figure><h5 id="자료형"><a href="#자료형" class="headerlink" title="자료형"></a>자료형</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Number : 정수, 실수, 복소수, 8진수, 16진수 등</span><br><span class="line">String : 문자 또는 문자열</span><br><span class="line">List : 순서가 있는 여러 요소들의 모음</span><br><span class="line">Tuple : 리스트와 동일하지만, 불변</span><br><span class="line">Dict : 키와 값이 연결되어있는 구조</span><br><span class="line">Set : 순서가 없는 유니크 element들의 모음</span><br><span class="line">Boolean : 참 또는 거짓</span><br></pre></td></tr></table></figure><h5 id="파이썬-연산"><a href="#파이썬-연산" class="headerlink" title="파이썬 연산"></a>파이썬 연산</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a += <span class="number">1</span>   <span class="comment"># a에 1을 더해서 a에 할당</span></span><br><span class="line">a ** <span class="number">2</span>   <span class="comment"># a^2</span></span><br><span class="line"><span class="number">14</span> // <span class="number">3</span>  <span class="comment"># 몫</span></span><br><span class="line"><span class="number">14</span> % <span class="number">3</span>   <span class="comment"># 나머지</span></span><br></pre></td></tr></table></figure><ul><li>자료형<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 변수명은 소문자</span></span><br><span class="line"><span class="comment"># room_size = Under Line / roomSize = CamelCase</span></span><br><span class="line"><span class="comment"># 파이썬에서는 변수명으로 무조건 Under Line 사용</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># type(변수명) : 변수의 타입을 알려준다</span></span><br><span class="line"><span class="comment"># int(변수명) : 변수의 타입을 정수형태로 변경 / list(), set()</span></span><br><span class="line"></span><br><span class="line">animals = [<span class="string">"강아지"</span>, <span class="string">"고양이"</span>, <span class="string">"이구아나"</span>, <span class="string">"물고기"</span>, <span class="string">"참새"</span>]</span><br><span class="line"><span class="comment"># 하나씩 출력을 하다가, index가 2번인 경우 파이썬으로 변경하자</span></span><br><span class="line"><span class="comment"># name[0] : name 변수에서 0번 째만 추출</span></span><br><span class="line"><span class="comment"># name[1:] : 첫 번째부터 맨 끝까지 추출</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 문자열 중간에 변수의 값을 넣는 방법</span></span><br><span class="line"><span class="comment"># https://pyformat.info/</span></span><br><span class="line"></span><br><span class="line"><span class="string">"%s님 안녕하세요."</span> % (<span class="string">"안수찬"</span>)</span><br><span class="line"><span class="string">"&#123;0&#125;님 안녕하세요."</span>.format(‘안수찬’)</span><br><span class="line"><span class="string">"&#123;name&#125;님 안녕하세요."</span>.format(name=<span class="string">"안수찬"</span>)</span><br><span class="line"><span class="string">"안녕하세요. &#123;name&#125; 입니다. 저는 &#123;course&#125; 를 수강하고 있습니다."</span>.format(name=안수찬, course=<span class="string">"데사스"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 주석처리</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># List : 순서가 있는 요소들, 변경 가능</span></span><br><span class="line">animals = [<span class="string">"강아지"</span>, <span class="string">"고양이"</span>, <span class="string">"이구아나"</span>]</span><br><span class="line">animals.append(<span class="string">"물고기"</span>)</span><br><span class="line">animals[<span class="number">0</span>][<span class="number">0</span>] <span class="comment"># 강아지</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Tuple : List와 동일하지만, Element 값이 변경이 될 수 없다</span></span><br><span class="line">width_and_height = (<span class="number">120</span>, <span class="number">240</span>)</span><br><span class="line">width, height = width_and_height</span><br><span class="line">width = <span class="number">120</span></span><br><span class="line">height = <span class="number">240</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set : 집합, 순서가 없고, Unique한 값만 담길 수 있다, 중복 제거용</span></span><br><span class="line">name_set = set([<span class="string">"안수찬"</span>, <span class="string">"안수찬"</span>, <span class="string">"김승현"</span>, <span class="string">"박승권"</span>])</span><br><span class="line">name_set == &#123;‘김승현’, ‘박승권’, ‘안수찬’&#125;</span><br><span class="line"></span><br><span class="line">name_list = [<span class="string">"안수찬"</span>, <span class="string">"안수찬"</span>, <span class="string">"안수찬"</span>, <span class="string">"김승현"</span>, <span class="string">"김승현"</span>, <span class="string">"김승현"</span>, <span class="string">"박준영"</span>, <span class="string">"박준영"</span>, <span class="string">"박준영"</span>]</span><br><span class="line">name_list = list(set(name_list)) <span class="comment"># 파이썬다운 중복을 제거하는 방법이되, 순서를 보장하지는 않음</span></span><br><span class="line">name_list == [‘김승현’, ‘안수찬’, ‘박준영’]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Boolean</span></span><br><span class="line"><span class="keyword">True</span> <span class="keyword">or</span> <span class="keyword">False</span></span><br><span class="line"><span class="comment"># 특정 조건에서 작동하도록 설정할 때, 매우 많이 사용될 것</span></span><br><span class="line"><span class="comment"># &amp; 나 | 보다는 and 또는 or로 쓰는 것이 보다 명시적이다</span></span><br><span class="line"><span class="comment"># and 와 or가 섞여있어야 한다면, 좀 더 직관적인 프로세스를 만들어보거나 ( )로 전후를 구분해줄 것</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dict : 키와 값을 쌍으로 묶은 것, 다른 곳에서는 Dict, Hash, JSON 등으로 쓰임</span></span><br><span class="line"><span class="comment"># :은 키에 붙여야 한다</span></span><br><span class="line"><span class="comment"># 함수 안에 키-밸류 형태로 넣을 때는 띄어쓰기를 하지 않는다</span></span><br><span class="line">detail_dict = &#123;<span class="string">"name"</span>: <span class="string">"안수찬"</span>, <span class="string">"age"</span>: <span class="number">24</span>, <span class="string">"phone number"</span>: <span class="string">"010-1234-5678"</span>&#125;</span><br><span class="line">detail_dict[<span class="string">"age"</span>] == ‘안수찬<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">my_informations = &#123;"name": "dobestan", "phonenumber": "010-1234-5678", "email": "test@gmail.com"&#125;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h5 id="반복문과-제어문"><a href="#반복문과-제어문" class="headerlink" title="반복문과 제어문"></a>반복문과 제어문</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">1</span> &lt; <span class="number">3</span>:</span><br><span class="line">     print(<span class="string">"1이 3보다 작다."</span>)</span><br><span class="line"></span><br><span class="line">a = <span class="number">13</span></span><br><span class="line">b = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &lt; b:</span><br><span class="line">     print(<span class="string">"a(&#123;a&#125;)가 b(&#123;b&#125;)보다 작다."</span>).format(a=a, b=b))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">     print(<span class="string">"a가 b보다 크다."</span>).format(a=a, b=b))</span><br><span class="line">     </span><br><span class="line">animals = [<span class="string">"강아지"</span>, <span class="string">"고양이"</span>, <span class="string">"이구아나"</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="string">"이구아나"</span> <span class="keyword">in</span> animals:</span><br><span class="line"></span><br><span class="line">     print(<span class="string">"이구아나를 키우고 있습니다."</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">     print(<span class="string">"이구아나를 키우고 있지 않습니다."</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 90점 이상은 A</span></span><br><span class="line"><span class="comment"># 60 ~ 90점까지는 B</span></span><br><span class="line"><span class="comment"># 60점 밑으로는 C</span></span><br><span class="line">score = <span class="number">89</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">     print(<span class="string">"A"</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">60</span>:</span><br><span class="line">     print(<span class="string">"B"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">     print(<span class="string">"C"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 제어문 : 특정 조건 또는 반복적으로 코드를 실행</span></span><br><span class="line"><span class="comment"># for : while문보다 통제가 수월하고 직관적이기에 더 선호됨</span></span><br><span class="line"><span class="comment"># for문을 사용할 때 많이 사용할, range라는 내장함수를 제공한다</span></span><br><span class="line">list(range(<span class="number">10</span>)) <span class="comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line">animals = [<span class="string">"강아지"</span>, <span class="string">"고양이"</span>, <span class="string">"참새"</span>, <span class="string">"이구아나"</span>]</span><br><span class="line"><span class="keyword">for</span> animal <span class="keyword">in</span> animals:</span><br><span class="line">     print(<span class="string">"나는 &#123;animal&#125;를 키운다."</span>.format(animal=animal))</span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">     print(<span class="string">"hello world &#123;number&#125;"</span>.format(number=number))</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>): <span class="comment"># 변수를 for문 내에서는 사용하지 않을 때 _ 를 써줌</span></span><br><span class="line">     print(<span class="string">"hello world"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># while : Python에서는 for문을 더 선호함, 덜 직관적이기 때문, 지속적 통제가 요구됨</span></span><br><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="keyword">while</span> age &lt; <span class="number">30</span>:</span><br><span class="line">    print(<span class="string">"20대에 나이를 먹었습니다. 현재 나이 : &#123;age&#125;"</span>.format(age=age))</span><br><span class="line">    age += <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># *</span></span><br><span class="line"><span class="comment"># **</span></span><br><span class="line"><span class="comment"># ***</span></span><br><span class="line"><span class="comment"># ****</span></span><br><span class="line"><span class="comment"># *****</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">     star = <span class="string">""</span></span><br><span class="line">     <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>):</span><br><span class="line">          star += <span class="string">"*"</span></span><br><span class="line">     print(star)</span><br><span class="line"></span><br><span class="line">star = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">     star += <span class="string">"*"</span></span><br><span class="line">     print(star)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">     print(<span class="string">"*"</span> * (i + <span class="number">1</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">별찍기 과제</span><br><span class="line"></span><br><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">    *</span><br><span class="line">   **</span><br><span class="line">  ***</span><br><span class="line"> ****</span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line">****</span><br><span class="line">***</span><br><span class="line">**</span><br><span class="line">*</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"> ****</span><br><span class="line">  ***</span><br><span class="line">   **</span><br><span class="line">    *</span><br><span class="line"></span><br><span class="line"># 별찍기 과제 해답</span><br><span class="line"></span><br><span class="line">for i in range(5):</span><br><span class="line">    print(&quot;*&quot; * (i + 1))</span><br><span class="line"></span><br><span class="line">for i in range(5):</span><br><span class="line">    print(&quot; &quot;* (4 - i) + &quot;*&quot; * (i + 1))</span><br><span class="line"></span><br><span class="line">for i in range(5):</span><br><span class="line">    print(&quot;*&quot; * (5 - i))</span><br><span class="line"></span><br><span class="line">for i in range(5):</span><br><span class="line">    print(&quot; &quot; * i + &quot;*&quot; * (5 - i))</span><br></pre></td></tr></table></figure><h5 id="입력과-출력"><a href="#입력과-출력" class="headerlink" title="입력과 출력"></a>입력과 출력</h5><ul><li>사용자 / 파일 / stdin ( standard input ) / stdout ( standard output )</li></ul><h5 id="사용자로부터-인풋-받기"><a href="#사용자로부터-인풋-받기" class="headerlink" title="사용자로부터 인풋 받기"></a>사용자로부터 인풋 받기</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">username = input(<span class="string">"너의 이름은 뭐니? "</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(input(<span class="string">"별 몇개? "</span>))):</span><br><span class="line">     print(<span class="string">"*"</span> * (i + <span class="number">1</span>))</span><br></pre></td></tr></table></figure><h5 id="Python-3-VS-Python-2"><a href="#Python-3-VS-Python-2" class="headerlink" title="Python 3 VS Python 2"></a>Python 3 VS Python 2</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">Python 3.X =&gt; input (…), print(…)</span><br><span class="line">input은 항상 str으로 정보를 받아온다</span><br><span class="line">Python 2.X =&gt; input을 받은 정보를 파이썬으로 실행하려고 함</span><br><span class="line">TEXT를 받고자 하면 raw_input 을 사용해야 함</span><br><span class="line"></span><br><span class="line">Python 3.X =&gt; print 는 함수 / print(&quot; &quot;)</span><br><span class="line">Python 2.X =&gt; print 는 statement, 출력하는 기능 / print &quot; &quot;</span><br><span class="line"></span><br><span class="line">Unicode is a character set. ( 표준 문자열 집합 )</span><br><span class="line">UTF-8 is an encoding. ( 유니코드를 표현할 수 있는 인코딩 방식 )</span><br><span class="line">Unicode를 표현하는 방식 중 하나가 utf-8</span><br><span class="line">Unicode를 encoding하는 방식이 utf-8</span><br><span class="line">utf-8을 decode하면 Unicode</span><br><span class="line">한글은 일반적으로 UTF-8 or EUC-KR ( 거의 대부분은 UTF-8 사용 )</span><br><span class="line"></span><br><span class="line">Python 2.X =&gt; 기본 인코딩이 ascii여서 한글 작성시에 문제가 발생</span><br><span class="line">그래서 아래와 같이 붙여놔야 함</span><br><span class="line">-*- coding: utf-8 -*-</span><br><span class="line">( 위 문장이 추가되면 읽을 때 str이 utf-8로 인코딩되었다고 인지한다 )</span><br><span class="line"></span><br><span class="line">하지만 위 문장이 있다고 해서 decode, encode하는 과정에서의 default setting이 ascii가 아니게 되는 것은 아니므로 아무런 옵션 지정없이 decode, encode를 하게 되면 ascii 방식으로 인코딩되어서 에러가 발생하게 된다</span><br><span class="line"></span><br><span class="line">( 파이썬에서는 문자열을 표현할 수 있는 str, unicode 타입을 제공한다 )</span><br><span class="line">print(type(&apos;한글&apos;)) =&gt; str</span><br><span class="line">print(type(u&apos;한글&apos;)) =&gt; unicode</span><br><span class="line"></span><br><span class="line">에러 예시: print str(unicode(&quot;한글&quot;))</span><br><span class="line">참 예시: print &quot;한글&quot;.decode(&quot;utf8&quot;) =&gt; unicode</span><br><span class="line">참 예시: print &quot;한글&quot;.decode(&quot;utf8&quot;).encode(&quot;utf8&quot;) =&gt; str</span><br><span class="line"></span><br><span class="line">unicode로 인코딩 되어있으면 str으로 저장됨</span><br><span class="line">unicode로 인코딩 되어있지 않으면 unicode로 저장됨</span><br><span class="line">(하지만 unicode를 print 할 때는 자동적으로 utf-8로 변환함)</span><br><span class="line"></span><br><span class="line">다른 사람들이 작성한 파일을 쓸 때는, Python 기본 인코딩을 ascii에서 utf8로 변경해주면 된다</span><br><span class="line">import sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(&apos;utf-8&apos;)</span><br><span class="line"></span><br><span class="line">Python 2.X 에서 한글 문제 없이 사용하기</span><br><span class="line">1. 파일 상단에 -*- coding: utf-8 -*- 명시</span><br><span class="line">2. 파이썬 스크립트 내에서는 반드시 unicode 로 변경해서 사용</span><br><span class="line">3. 외부 파일을 읽거나 쓸 때는 str 로 변경해서 읽거나 쓴다</span><br><span class="line">4. 외부 라이브러리를 쓸 떄는 setdefaultencoding 을 사용해서 기본적으로 utf-8 사용</span><br><span class="line"></span><br><span class="line">Python 3.X 는 모든 문자열이 unicode 이기에 인코딩에 대해 고민할 필요없음</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Indent로 포함관계 구분</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(animals)):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">2</span>:</span><br><span class="line">        animals[<span class="number">2</span>] = <span class="string">"파이썬"</span></span><br><span class="line">    print(animals[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> animal <span class="keyword">in</span> animals:</span><br><span class="line">    index = animals.index(animal)</span><br><span class="line">    <span class="keyword">if</span> index == <span class="number">2</span>:</span><br><span class="line">        animals[index] = <span class="string">"파이썬"</span></span><br><span class="line">    print(animals[index])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, _ <span class="keyword">in</span> enumerate(animals):</span><br><span class="line">    <span class="keyword">if</span> index == <span class="number">2</span>:</span><br><span class="line">        animals[index] = <span class="string">"파이썬"</span></span><br><span class="line">    print(animals[index])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> my_information <span class="keyword">in</span> my_informations:</span><br><span class="line">    print(my_information)</span><br><span class="line">    print(my_informations[my_information])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> my_information <span class="keyword">in</span> my_informations.items():</span><br><span class="line">    print(my_information) <span class="comment"># Tuple</span></span><br><span class="line">    key, value = my_information</span><br><span class="line">    print(key)</span><br><span class="line">    print(value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> my_informations.items():</span><br><span class="line">    print(key)</span><br><span class="line">    print(value)</span><br><span class="line"></span><br><span class="line">my_informations.keys()</span><br></pre></td></tr></table></figure><hr><h5 id="파일-입출력"><a href="#파일-입출력" class="headerlink" title="파일 입출력"></a>파일 입출력</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./ =&gt; 현재 폴더</span></span><br><span class="line"><span class="comment"># ../ =&gt; 상위 폴더</span></span><br><span class="line"><span class="comment"># ./test.txt =&gt; 현재 폴더에 있는 test.txt</span></span><br><span class="line"><span class="comment"># ../test.txt =&gt; 상위 폴더에 있는 test.txt</span></span><br><span class="line"><span class="comment"># ../../test.txt =&gt; 상위 폴더의 상위 폴더에 있는 test.txt</span></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">"../animals.txt"</span>, <span class="string">"r"</span>) <span class="comment"># mode =&gt; "w", "r", "a" ( append )</span></span><br><span class="line"><span class="comment"># f.read() =&gt; 파일의 전체 데이터</span></span><br><span class="line"><span class="comment"># f.readline() =&gt; 실행할 때마다 행이 바뀌어 출력</span></span><br><span class="line"><span class="comment"># f.readlines() =&gt; 각각의 라인별로 구분되어 리스트</span></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">"./animals.txt"</span>, <span class="string">"w"</span>)</span><br><span class="line">f.write(<span class="string">"hello, world"</span>)</span><br><span class="line">f.close</span><br><span class="line"></span><br><span class="line"><span class="comment"># 위와 동일하지만 보다 선호되는 방식</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"./animals.txt"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">"hello, world"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">".stars.txt"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        f.write(<span class="string">"*"</span> * (i + <span class="number">1</span>))</span><br><span class="line">        f.write(<span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure><hr><h4 id="함수"><a href="#함수" class="headerlink" title="함수"></a>함수</h4><ul><li>작업 자동화</li><li>우리가 반복적으로 사용할 어떤 특정 기능들을 재사용 가능한 코드로 작성</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 함수 정의</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span><span class="params">()</span>:</span></span><br><span class="line">    username = input()</span><br><span class="line">    print(<span class="string">"&#123;username&#125;님, 가입을 축하드립니다."</span>.format(username=username))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 함수 실행</span></span><br><span class="line">greeting()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_pretty_star</span><span class="params">(count)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    이 함수는 별찍기 함수입니다.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, count + <span class="number">1</span>):</span><br><span class="line">        print(<span class="string">"*"</span> * (i))</span><br><span class="line"><span class="comment"># """ multi-line """ 로 내용을 적어두면 Docstring에 반영됨</span></span><br><span class="line"></span><br><span class="line">print_pretty_star(<span class="number">5</span>)</span><br><span class="line">print_pretty_star(int(input(<span class="string">"Count?"</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 함수 내에 return은 함수가 반환하는 결과값을 의미 + 그 순간 함수는 종료</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 함수에 어떤 숫자를 입력했을 때, 그 이하의 소수를 출력해주는 함수</span></span><br><span class="line"><span class="comment"># 수업 전에 내가 짠 코드</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_prime_numbers</span><span class="params">(number)</span>:</span></span><br><span class="line">    prime_numbers = []</span><br><span class="line">    <span class="keyword">if</span> number &lt;= <span class="number">1</span>:</span><br><span class="line">        print(<span class="string">"소수가 없습니다."</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, number + <span class="number">1</span>):</span><br><span class="line">            bool = <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>, i):</span><br><span class="line">                <span class="keyword">if</span> i % j == <span class="number">0</span> <span class="keyword">and</span> i != j:</span><br><span class="line">                    bool = <span class="keyword">False</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> bool == <span class="keyword">True</span>:</span><br><span class="line">                prime_numbers.append(i)</span><br><span class="line">        print(prime_numbers)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 수업 코드</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1차</span></span><br><span class="line"><span class="comment"># 우선 한 번에 모든 기능을 구현하는 것은 복잡하니,</span></span><br><span class="line"><span class="comment"># 각각의 과정들을 기능별로 나누어서 접근하라</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 각각의 숫자의 소수여부를 검사해서 =&gt; is_prime</span></span><br><span class="line"><span class="comment"># 소수면 리스트에 추가하고 최종적으로는 리스트를 출력 =&gt; get_prime_numbers</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span><span class="params">(number)</span>:</span></span><br><span class="line">    <span class="comment"># 2부터 number-1 까지의 숫자를 각각 체크해본다.</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, number):</span><br><span class="line">        <span class="keyword">if</span> (number % i == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_prime_numbers</span><span class="params">(number)</span>:</span></span><br><span class="line">    prime_numbers = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, number + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> is_prime(i):</span><br><span class="line">            prime_numbers.append(i)</span><br><span class="line">    <span class="keyword">return</span> prime_numbers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 걸린 시간 측정하는 법</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">start_time = time.time()</span><br><span class="line">get_prime_numbers(<span class="number">1000</span>)</span><br><span class="line">end_time = time.time()</span><br><span class="line">print(end_time - start_time)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2차 제곱근까지만 체크( 다른 방법: 홀수만 체크, 2로 나누어 떨어지는 숫자까지 체크 )</span></span><br><span class="line"><span class="comment"># 소수로 확인된 것의 배수를 모두 지우는 방법도 있음 =&gt; 에라토스테네스의 체</span></span><br><span class="line"><span class="comment"># 알고리즘에 대해서는 수학적으로 이미 증명된 것들이 매우 많기 때문에 검색해서 활용해볼 것</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime_optimized</span><span class="params">(number)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, int(number**<span class="number">0.5</span>) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> (number % i == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://goo.gl/N5QltM</span></span><br><span class="line"><span class="comment"># 에라토스테네스의 체 구현 코드</span></span><br><span class="line">    <span class="comment">#결과 값을 저장하는 목록을 미리 생성한다.</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="comment">#전체 범위를 지정한다. : 1은 소수임을 알고 있으므로 제외하고 2부터 수행해야 하지만 초기값은 별도로 생성할 것이므로 3부터 999까지의 범위로 한다.</span></span><br><span class="line">    candidates = range(<span class="number">3</span>,<span class="number">1000</span>)</span><br><span class="line">    <span class="comment">#초기값을 설정한다.</span></span><br><span class="line">    base = <span class="number">2</span></span><br><span class="line">    <span class="comment">#초기값의 배수를 구하기 위한 임시 변수를 생성한다.</span></span><br><span class="line">    product = base</span><br><span class="line"></span><br><span class="line"><span class="comment">#전체 범위 내에서 "에라토스테네스의 체" 알고리즘을 수행한다.</span></span><br><span class="line">    <span class="keyword">while</span> candidates:</span><br><span class="line">        <span class="comment">#임시변수가 1000미만일 때까지 다음을 수행한다.</span></span><br><span class="line">        <span class="keyword">while</span> product &lt; <span class="number">1000</span>:</span><br><span class="line">            <span class="comment">#임시변수가 전체 범위내 존재한다면 :</span></span><br><span class="line">            <span class="keyword">if</span> product <span class="keyword">in</span> candidates:</span><br><span class="line">                <span class="comment">#전체 범위 목록에서 임시변수를 삭제한다.</span></span><br><span class="line">                candidates.remove(product)</span><br><span class="line">            <span class="comment">#임시변수는 기본값의 배수이다.</span></span><br><span class="line">            product = product+base</span><br><span class="line">        <span class="comment">#결과 목록에 기본값을 추가한다.</span></span><br><span class="line">        result.append(base)</span><br><span class="line">        <span class="comment">#다음 기본값은 (이미 걸러진)전체 목록의 첫 번째 값이다. : 1회 걸렀을 경우 2와 2의 배수를 모두 삭제했으므로 3이다.</span></span><br><span class="line">        base = candidates[<span class="number">0</span>]</span><br><span class="line">        <span class="comment">#초기값의 배수를 구하기 위해 임시 변수를 다시 생성한다.</span></span><br><span class="line">        product = base</span><br><span class="line">        <span class="comment">#전체 범위에서 초기값을 제거한다.</span></span><br><span class="line">        <span class="keyword">del</span> candidates[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 범위 내의 마지막 기본값을 결과 목록에 추가한다.</span></span><br><span class="line">    result.append(base)</span><br><span class="line">    <span class="comment">#결과 목록을 화면에 출력한다.</span></span><br><span class="line">    <span class="keyword">print</span> result</span><br></pre></td></tr></table></figure><hr><h5 id="안수찬-선생님의-조언"><a href="#안수찬-선생님의-조언" class="headerlink" title="안수찬 선생님의 조언"></a>안수찬 선생님의 조언</h5><ul><li>생각하면 실행해본다, 실행력이 매우 중요</li><li>개발자 영어는 충분히 할 수 있는 영역</li><li>실력을 늘리는 가장 주요한 방법은 외주개발</li><li>시간을 팔아서 돈을 버는 것을 지양하자</li><li>코드카데미, 팀트리하우스 에서 열심히 수강해보자</li><li>역량을 증명하기 전까지는 후려침을 겪을 수 밖에 없다</li></ul><h5 id="내가-개발자-성향을-가지고-있는가"><a href="#내가-개발자-성향을-가지고-있는가" class="headerlink" title="내가 개발자 성향을 가지고 있는가?"></a>내가 개발자 성향을 가지고 있는가?</h5><ul><li>개발자 성향이란?<ul><li>문제 해결에 대한 집요함 = 문제를 중간에 포기하지 않고 끝까지 해결하려 하는가</li><li>문제해결력 = 상당 부분 연습으로 극복가능</li></ul></li></ul><h5 id="파이썬-관련-추천도서"><a href="#파이썬-관련-추천도서" class="headerlink" title="파이썬 관련 추천도서"></a>파이썬 관련 추천도서</h5><ul><li>깐깐하게 배우는 파이썬</li><li>실전 파이썬 프로그래밍</li><li>Two Scoops of Django</li><li>클린 코드를 위한 테스트 주도 개발</li><li>파이썬 라이브러리를 활용한 데이터 분석 = 데이터 분석이 필요하다면 기본서</li><li>Udemy - Learning Python for Data Analysis and visualization</li></ul><h5 id="왜-파이썬인가"><a href="#왜-파이썬인가" class="headerlink" title="왜 파이썬인가?"></a>왜 파이썬인가?</h5><ul><li>개발을 처음 배우는 이에게 가장 제대로 기본을 다질 수 있는 언어</li><li>파이썬을 완벽히 하는 것이 매우 중요하다, 그래야만 범용적 개발을 해나갈 수 있다</li><li>Pandas는 R스러운 파이썬 패키지</li><li>모든 언어를 익힐 때 가장 먼저 배워야 할 것은 문화이다</li></ul><h5 id="기타-팁"><a href="#기타-팁" class="headerlink" title="기타 팁"></a>기타 팁</h5><ul><li>jupyter 또는 ipython 은 ?변수 라고 입력하면 자세히 안내해준다</li><li>모르는 함수들은 늘 ?를 입력해보는 습관을 들일 것</li><li>Google, Facebook, Jupyter 모두 Vim 단축키들이 작동함</li><li>파이썬은 고수준 작업에 많이 사용되다보니 비트연산을 자주 사용하지는 않음(연산자는 &gt;&gt; or &lt;&lt;)</li><li>= 와 + 은 양쪽을 띄워줘야 한다</li><li>폴더명 등의 자동완성은 이용할만 하지만, 명령어 등은 자동완성하기 보다는 직접 타이핑하는 것을 권한다</li><li>언어의 철학에 따라 변수 지정, 패턴 등이 달라져야 한다</li><li>계속해서 Zen을 떠올리면서 코딩을 해야 한다</li><li>Docker 가상 환경 = 환경만 그렇게 보이도록 한 것, 속도가 빠름</li><li>Parallels = 가상 머신</li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1일차&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;자료형&lt;/li&gt;
&lt;li&gt;제어문&lt;/li&gt;
&lt;li&gt;입력과 출력&lt;/li&gt;
&lt;li&gt;함수&lt;/li&gt;
&lt;li&gt;PEP8&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;자료형과-자료구조는-무엇이-다른가&quot;&gt;&lt;a href=&quot;#자료형과-자료구조는-무
      
    
    </summary>
    
      <category term="Python" scheme="https://eclatant.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://eclatant.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>글쓰기 시작</title>
    <link href="https://eclatant.io/2018/02/12/Start/"/>
    <id>https://eclatant.io/2018/02/12/Start/</id>
    <published>2018-02-11T15:00:00.000Z</published>
    <updated>2018-05-02T15:19:08.779Z</updated>
    
    <content type="html"><![CDATA[<p>글쓰기는 내게 가장 어려운 일 중 하나였다.</p><p>스스로 가지고 있는 글쓰기 실력에 비해 눈높이가 높은 까닭일 것이다.</p><p>그래서 항상 미루고 또 미뤄왔고, 그렇기 때문에 더더욱 어렵게 느껴졌다.</p><p>그러던 내가 용기를 내게 된 것은 매일 한 문제 이상 알고리즘을 푼다는 습관이 성공적으로 정착되고 있는 ‘작은 성공’을 보면서 글쓰기도 할 수 있다고 생각하게 된 덕분이었다.</p><p>물론 이 습관도 그냥 생긴 것은 아니었으며, 매일 스스로 약속한 것을 지키고 인증하는 모임에 참여하고 있는 점이 가장 컸다.</p><p>해서, 성윤님이 모집하신 모임에 참여하면 글쓰기도 가능할 것이다 라고 생각하였고, 드디어 시작을 하게 되었다.</p><p>최근에 읽은 아티클 중에 관련하여 글쓰기와 관련하여 가장 인상적이었던 것은 <a href="http://ppss.kr/archives/151423" target="_blank" rel="noopener">글쓰기가 안 되는 분들을 위한 4단계 작문법</a> 이었다.</p><p>위 내용을 보고 여태까지 글쓰기가 힘들었던 것은 정신병자 단계를 거치지 않고 판사와 같은 마음으로 바라보고 있었기 때문이라는 것을 느꼈다.</p><p>그러다보면 이터레이션 주기가 길어지고, 따라서 성공할 수가 없었던 것이다. <img src="https://image.slidesharecdn.com/datamoney-150827021417-lva1-app6892/95/-21-1024.jpg?cb=1440662401" alt="image"></p><p>앞으로 최대한 편안한 마음으로 좋은 글이 아닌, 그저 지각하지 않고 제때 제출하는 것만을 목표로 써보려고 한다.</p><p>그 과정에서 다른 분들과 많이 교류하며 글쓰기 외에도 많은 것들을 얻어갈 수 있기를 바란다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;글쓰기는 내게 가장 어려운 일 중 하나였다.&lt;/p&gt;
&lt;p&gt;스스로 가지고 있는 글쓰기 실력에 비해 눈높이가 높은 까닭일 것이다.&lt;/p&gt;
&lt;p&gt;그래서 항상 미루고 또 미뤄왔고, 그렇기 때문에 더더욱 어렵게 느껴졌다.&lt;/p&gt;
&lt;p&gt;그러던 내가 용기를 
      
    
    </summary>
    
      <category term="Essay" scheme="https://eclatant.io/categories/Essay/"/>
    
    
      <category term="Essay" scheme="https://eclatant.io/tags/Essay/"/>
    
  </entry>
  
  <entry>
    <title>반대로 하는 법</title>
    <link href="https://eclatant.io/2017/11/05/Contrary/"/>
    <id>https://eclatant.io/2017/11/05/Contrary/</id>
    <published>2017-11-04T15:00:00.000Z</published>
    <updated>2018-05-02T15:18:46.024Z</updated>
    
    <content type="html"><![CDATA[<p>오늘 체형교정 관련한 세션에 다녀왔다.</p><p>강사님의 입담도 매우 좋으셨고, 도움이 되는 여러 가지 얘기들을 많이 들었다.</p><p>그 내용들을 딱 하나로 압축해본다면 <code>평소의 반대로 스트레칭</code>이었다.</p><p>평소에 앞으로 쏠려있는 상체는 뒤로, 우뚝 솟아있는 어깨는 아래로, 앞으로 몰려있는 어깨는 뒤로-</p><p>그러다보면 몸의 균형이 잡히고, 몸을 바르게 쓰게 될 수 있을 것이라 말했다.</p><p>몸만 그러할까? 아니다 그렇지 않다.</p><p>무엇이든 다양한 요구사항과 제한된 환경을 극복하려다보면 모든 것을 만족시킬 수 있는 것은 없는 법이다.</p><p>어느 하나에 치우쳐지면 반드시 트레이드 오프된 다른 하나가 부메랑처럼 돌아온다.</p><p>그러므로 우선순위에 따른 나름의 균형을 맞춰줘야 한다.</p><p>위와 같은 내용을 모르지 않는데, 쉽지 않은 것은 늘 알면서도 평소와 같이 하기 때문은 아닐까.</p><p>그렇다면 관성을 벗어나려면 어떻게 해야 할까? 두 가지가 필요할 것 같다. <code>관찰</code>과 <code>피드백</code></p><p>루틴대로 그냥 쉽게 처리하지 않고, 관찰하려면 의식적인 자각과 그 지루함을 견딜 수 있는 여유가 필요하다.</p><p>의식적인 자각은 의지가 아닌 환경에 따른 장치가 있으면 조금 더 수월하지 않을까?</p><p>그러기 위해서 흔히들 목표를 손으로 적어서 눈에 보이는 곳에 두라고 하는 듯 하다.<br>(개인적인 생각으로는 한국은 환경에 비해 의지와 노오오오력을 너무 강조한다고 생각한다.<br>개인의 실패를 개인에게 떠넘기기 위해서일까.)</p><p>조급함을 견딜 수 있는 여유는 <code>버리는 것</code>에서 오지 않을까?</p><p>사람은 결국 한 번에 하나 밖에 못한다고 생각한다.</p><p>그렇기 때문에 지금 당장 붙잡고 할 수 있는 것 또는 해야 하는 것 외에는 마음 속에서 잠시 감춰둘 수 있는 요령이 필요한 것 같다.</p><p>문제해결이란 결국 한 번에 하나씩 집중적으로 풀어가야 하는 법이니까.</p><p>피드백을 잘 받으려면 어떻게 해야 할까? 이 역시 두 가지가 필요할 것 같다. <code>질문</code>과 <code>변화</code></p><p>질문을 어떻게 해야 하는지 인지한지 얼마 되지 않았다.</p><p>내가 알고 있는 가장 좋은 질문 방법은 질문을 받는 사람이 한 입에 쏙 먹기 좋게끔 아주 간결하게만 던지는 것이다.</p><p>조금만 질문이 길어져도 금방 집중력을 잃고 원래 들을 수 있었던 말조차 듣지 못 하게 될 수 있으니,<br>디테일한 상황을 전달하고 싶은 욕심을 잠시 내려놓고 아주 핵심적인 것만 물어볼 수 있어야 한다.</p><p>또한 피드백이 일회성에 끝나지 않도록 하려면, 그 전 질문에 대한 반응을 잘 반영해야 한다, 그러기 위해서라도 앞의 질문은 많이 할 수가 없다.<br>원래 말을 들은 사람은 기억하지 못해도, 해준 사람은 다 기억하는 법이다.</p><p>위와 같이 하면 조금은 그 전과 반대로 할 수 있지 않을까…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;오늘 체형교정 관련한 세션에 다녀왔다.&lt;/p&gt;
&lt;p&gt;강사님의 입담도 매우 좋으셨고, 도움이 되는 여러 가지 얘기들을 많이 들었다.&lt;/p&gt;
&lt;p&gt;그 내용들을 딱 하나로 압축해본다면 &lt;code&gt;평소의 반대로 스트레칭&lt;/code&gt;이었다.&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="Essay" scheme="https://eclatant.io/categories/Essay/"/>
    
    
      <category term="Essay" scheme="https://eclatant.io/tags/Essay/"/>
    
  </entry>
  
  <entry>
    <title>이벤트 델리게이션</title>
    <link href="https://eclatant.io/2017/10/08/Event-Delegation/"/>
    <id>https://eclatant.io/2017/10/08/Event-Delegation/</id>
    <published>2017-10-07T15:00:00.000Z</published>
    <updated>2018-05-08T09:03:14.701Z</updated>
    
    <content type="html"><![CDATA[<h3>Concept</h3><ul><li>Javascript Event<ul><li>addEventListener</li><li>Event Delegation<ul><li>Event Bubbling, Event Capturing</li></ul></li><li>Event Object<ul><li>Event Target</li></ul></li></ul></li></ul><hr><h3>Content</h3><p>SPA 이전 웹사이트들에서 자바스크립트의 중요한 역할은 웹사이트의 동작을 구현하는 것입니다. 여기서 말하는 동작은 애니메이션이 아닌, 동적인 상호작용을 뜻합니다. (애니메이션은 CSS3의 역할이라고 생각합니다.)</p><p>위와 같은 동적인 상호작용을 <code>Event</code>라고 지칭합니다. 사용자의 이벤트 요청을 받아들이기 위해서는 사용자의 이벤트 요청을 받아들이기 위한 장치를 마련해두어야 합니다.</p><p>이를 위한 가장 일반적인 방법이 <code>addEventListener()</code>입니다. <code>addEventListener()</code>의 대상이 될 수 있는 <code>EventTarget</code>은 <code>Element</code>, <code>Document</code>, <code>Window</code>와 같은 이벤트를 지원하는 객체입니다. 일반적으로는 <code>document.querySelector()</code>를 통해 특정 <code>Element</code>를 지칭하여 <code>addEventListener()</code>를 호출합니다.</p><p>IE9부터 사용 가능한 <code>addEventListener()</code>는 다음과 같은 인자를 갖고 있습니다. <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener" target="_blank" rel="noopener">addEventListener MDN</a></p><p><code>type</code>, <code>listener</code>, <code>options || useCapture</code>, <code>wantsUntrusted</code></p><ul><li><code>type</code></li></ul><p><code>EventTarget</code>에 어떤 <code>Event</code>가 일어났을 때, <code>listener parameter</code>를 호출할지 결정하는 문자열입니다. 어떤 종류가 있는지는 다음 페이지에서 확인할 수 있습니다. <a href="https://developer.mozilla.org/en-US/docs/Web/Events" target="_blank" rel="noopener">Event reference MDN</a> 일반적으로 많이 사용하는 것은 <code>click</code>, <code>load</code> 등입니다.</p><ul><li><code>listener()</code></li></ul><p><code>type</code>에서 정의한 <code>event</code>가 발생했을 때 호출될 객체입니다. 일반적으로 자바스크립트 함수로 합니다. 이 함수를 웹 브라우저가 호출하면서 인수로 <code>Event</code> 객체를 넘겨줍니다. 이 인자를 일반적으로 <code>e</code> 또는 <code>event</code>로 정의합니다. 가장 많이 사용하는 것은 <code>Event</code> 의 target property입니다.</p><p><code>listener</code>가 <code>return false</code>를 반환할 경우, <code>preventDefault()</code>를 한 것과 동일한 효과를 보입니다. <code>preventDefault()</code>는 해당 <code>Node</code>의 기본 동작을 막는 함수입니다. 예를 들어 <code>&lt;a&gt;</code>에서 <code>EventListener</code>가 호출되었을 때는 <code>listener</code>와 더불어 <code>&lt;a&gt;</code>의 본래 역할인 URL 연결도 수행하는데, 이를 막을 수 있습니다.</p><ul><li><code>options</code> <code>||</code>  <code>useCapture</code></li></ul><p>인수가 <code>object</code>이면 options를, <code>boolean</code>을 넘겨주면 useCapture로 인식합니다. <a href="https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#eventlisteneroptions" target="_blank" rel="noopener">WICG Link</a></p><ul><li><code>useCaputre</code>일 때 (default <code>false</code>)</li></ul><p>이 인자는 <code>Capture Phase</code>일 때의 <code>Event</code> 수신 여부를 결정합니다.</p><p>false일 경우 이벤트가 발생한 <code>node</code>로부터 <code>window</code>까지 <code>Event</code>가 전파되는 시점에 <code>Event</code>를 받게 됩니다. <code>Event Bubbling</code>이라고 합니다.</p><p>true일 경우 <code>Window</code>부터 이벤트가 발생한 <code>node</code>까지 <code>Event</code>가 전파되는 시점에 <code>Event</code>를 받게 됩니다. 이것을 <code>Event Capturing</code>이라고 합니다.</p><ul><li><code>options</code>일 때</li></ul><p><code>capture</code>: <code>Capturing</code> 유무</p><p><code>once</code>: <code>true</code>를 넘겨주면, <code>EventListener</code>를 일회성으로 만들 수 있습니다.</p><p><code>passive</code>: <code>listener</code>에서의 <code>preventDefault</code> 호출 허용 여부를 결정합니다.</p><p><code>mozSystemGroup</code></p><p><img src="https://www.w3.org/TR/DOM-Level-3-Events/images/eventflow.svg" alt="img"></p><p><a href="https://codepen.io/jeewhan/pen/XeaXGJ" target="_blank" rel="noopener">Codepen 예제</a></p><hr><p>그렇다면 왜 이벤트 위임을 해야 하는가?</p><p>하나의 부모 <code>Node</code> 밑에 있는 자식 <code>Node</code>들이 있다고 가정해보겠습니다. 해당 자식 <code>Node</code>들은 모두 동일한 <code>Event</code>를 발생시키길 기대합니다.</p><p>이벤트 위임을 하지 않을 경우, 자식 <code>Node</code>마다 <code>Event Listener</code>를 추가해주어야 하는 것은 물론, 이후에 자식 <code>Node</code>가 늘어날 때마다 <code>Event Listener</code>도 추가해주어야 합니다. 이렇게 하게 되면 성능도 안 좋겠지만, 프로그래머 입장에서도 매우 번거롭습니다.</p><p>그래서 자식 <code>Node</code>마다 <code>Event Listener</code>를 부여하지 않고, 그들의 부모 <code>Node</code>에게만 <code>Event Listener</code>를 부여하고, 자식에서 발생하는 <code>Event</code>를 받아 처리하도록 하는 것을  이벤트 위임이라고 합니다. 그러면 자식 <code>Node</code>가 늘어날 때마다 <code>Event Listener</code>를 늘릴 필요없이 부모의 <code>Event Listener</code>의 <code>listener</code>에 분기 처리만 해주면 됩니다.</p><p>이벤트 위임에는 당연히 이벤트 전파가 전제되어 있습니다. 따라서 프로그래머가 의도한 방향대로 동작하게 하려면 이벤트 전파를 제어할 수 있어야 합니다. 그러기 위해서 <code>stopPropagation()</code> <code>stopImmediatePropagation()</code> 를 사용할 수 있습니다.</p><ul><li><code>stopPropagation()</code><br><code>Event</code>가 <code>Parent Node</code>로 전파되지 않도록 합니다. 이 함수의 적용 시점은 <code>Bubbling Phase</code>이기에, <code>Capture</code>와는 무관합니다.</li></ul><ul><li><code>stopImmediatePropagation()</code><br><code>stopPropagation()</code>와 더불어 <code>Sibling Node</code>에게도 <code>Event</code>가 전달되지 않도록 합니다.</li></ul><hr><h3>Reference</h3><ul><li><a href="http://programmingsummaries.tistory.com/313" target="_blank" rel="noopener">Javascript에서 이벤트 전파를 중단하는 네 가지 방법</a></li><li><a href="https://github.com/nhnent/fe.javascript/wiki/August-22-August-26,-2016" target="_blank" rel="noopener">왜 이벤트 위임(delegation)을 해야 하는가?</a></li><li><a href="http://poiemaweb.com/js-event" target="_blank" rel="noopener">PoiemaWeb Javascript Event</a></li></ul><p>관련하여 매우 좋은 글이 있어 공유해봅니다</p><p><a href="https://joshua1988.github.io/web-development/javascript/event-propagation-delegation/" target="_blank" rel="noopener">이벤트 버블링, 이벤트 캡처 그리고 이벤트 위임까지</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;Concept&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Javascript Event
&lt;ul&gt;
&lt;li&gt;addEventListener&lt;/li&gt;
&lt;li&gt;Event Delegation
&lt;ul&gt;
&lt;li&gt;Event Bubbling, Event Capturing&lt;/li&gt;
      
    
    </summary>
    
      <category term="JS" scheme="https://eclatant.io/categories/JS/"/>
    
    
      <category term="JS" scheme="https://eclatant.io/tags/JS/"/>
    
  </entry>
  
</feed>
