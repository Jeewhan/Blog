<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The Pragmatic Programmer</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://eclatant.io/"/>
  <updated>2019-04-07T16:58:18.307Z</updated>
  <id>https://eclatant.io/</id>
  
  <author>
    <name>Jeewhan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>카카오와 네이버를 통한 소셜 로그인</title>
    <link href="https://eclatant.io/2019/04/08/2019-04-08-KakaoAndNaver/"/>
    <id>https://eclatant.io/2019/04/08/2019-04-08-KakaoAndNaver/</id>
    <published>2019-04-07T15:00:00.000Z</published>
    <updated>2019-04-07T16:58:18.307Z</updated>
    
    <content type="html"><![CDATA[<p>2월 말부터 정말 지독한 슬럼프? 번아웃?에 시달려왔다. 부디 이번에 작업했던 결과물들을 회고하는 과정을 통해 탈출할 수 있기를 바라는 마음으로 미뤄왔던 회고글을 작성해본다. 업무상 다급하게 진행했던 과정들이었기에 기재한 내용들에 대해 엄밀한 검증을 거치지 못하고 느낌만으로 작성하는 글이다.</p><hr><p>스프린트라고 말하기엔 민망한 긴 기간동안 소셜 로그인 기능을 추가하는 작업을 진행했다.</p><p>여러 Provider가 존재하겠지만, 이번에 진행했던 것은 카카오와 네이버를 통한 회원가입 및 로그인이었다.</p><p>카카오와 네이버는 기본적으로 SDK를 제공해주지만 둘은 여러 가지 측면에서 차이가 존재한다.</p><ol start="0"><li>신고제 VS 허가제<br>카카오는 신고제 느낌인데 비해 네아로(= 네이버 아이디로 로그인, 네이버 문서에도 나오는 명칭)는 개발 후에 검수를 거쳐서 심사를 통과해야만 사용할 수 있다.</li><li>Service URL, Callback URL<br>SDK를 통해 로그인 관련 정보를 Service URL과 Callback URL를 합친 주소로 받아오기 마련이다. 카카오는 Callback URL이 하나인 대신에 Service URL을 여러 개 사용할 수 있고, 네이버는 반대로 Service URL 하나와 여러 Callback URL을 사용할 수 있다. 실제로 구현해보면 카카오가 훨씬 더 편하다는 점을 알 수 있다. 로컬호스트로 개발할 때, 스테이징 서버를 배포했을 때, 프로덕션에 배포했을 때 모두를 지원할 수 있기 때문이다. 그에 비해서 네이버는 검수 요청을 하려면 기본적으로 배포를 해야 하고, 그렇게 되면 로컬호스트로는 이용할 수 없는 상태가 되어버린다. (또는 프로덕션에 배포했을 때도 마찬가지이다.) 네이버 + 로컬호스트 관련해서 몇 시간 정도 시행착오를 겪었던 지점이 있는데, Service URL을 반드시 <code>http://localhost:3000</code> 로 작성해야 기대한 방향대로 동작할 것이다. 설정하는 페이지에는 <code>서비스 URL: 실제 서비스하는 사이트 URL과 동일한지 확인 (www, 포트번호, http/https 구분 없이 도메인명만 정확히 입력)</code> 라고 나와있지만 실제로는 뒤에 포트도 기재되어야 한다.</li><li>SDK<br>네아로가 상대적으로 더 오래된 기능이어서 그런지, API와 문서화 모두 카카오만 기대에 부응하는 편이다. 네아로 관련 문서에서 튜토리얼은 2.0을 기준으로 설명하고 있는데, API 명세는 1.03을 기준으로 설명되어있다. 그 다음에 굳이 매번 API 사용 전에 반복적으로 new로 인스턴스를 생성하고 init method를 통해 초기화를 해주어야 하며, 로그인 버튼을 활용한 콜백 패턴 외에는 달리 Access Token을 받아올 방법을 찾을 수 없었다. 네이버/카카오를 통한 회원가입 뿐만 아니라  이미 가입된 계정에서의 연동도 지원해주어야 했는데, 네이버는 어쩔 수 없이 SDK에서 제공해주는 로그인 버튼을 숨겨두었다가 연동 설정 요청이 들어오면 숨겨둔 버튼을 클릭하여 redirect path에서 Access Token을 받아서 우리측 API에 보내주어야만 했다. 카카오는 초기화를 한 번만 해주면 되며, 연동의 경우에도 Kakao.Auth.login으로 바로 구현이 가능하다.</li><li>Flow<br>로그인 관련 정보를 받아오는 플로우에 있어서 차이가 존재한다. 네이버는 SDK를 통해 정보를 받아오면서 redirect path로 보내지지만, 카카오는 redirect path로 이동한 뒤에 요청해서 받아오는 플로우라고 기억한다. SocialSignupPage라는 Component 하나로 둘 모두 지원해주려고 했기 때문에 카카오는 SDK에서 제공해주는 로그인 버튼을 사용하지 않고, 카카오로 로그인 이라는 버튼을 클릭하면 redirect path로 직접 보낸 뒤 /naver 와 /kakao 중 kakao일 경우 SDK에서 제공해주는 함수(Kakao.Auth.login)를 이용하여 직접 Access Token을 받아오도록 하였다. (네이버는 플로우를 달리 커스텀할 수 있는 방법이 보이지 않았다.)</li><li>Mobile<br>카카오는 모두 쉽다고 생각했었지만 모바일에서 문제가 한 번 있었다. 데스크탑이라면 카카오 로그인을 끝내고  로그인 창이 꺼지고 Access Token을 알아서 받아오는 과정이 진행될텐데 모바일에서는 빈 탭이 띄워져있는 상태에서 멈춰져있고 Access Token도 받아와지지 않았다. 카카오 측에서 제공해주는 데모 페이지에서는 일어나지 않는 현상이고, 그곳에 있는 코드와 큰 차이가 없어서 원인을 파악하는데 시간을 많이 소모하였다. 결론적으로는 throughTalk라는 옵션을 false로 처리하면 해결이 된다. 이 옵션은 default: true인데 이때는 스키마를 통해 카카오톡을 불러오는 과정에서 뭔가 문제가 있어서 멈췄던 것으로 추측하고 있다. (운영체제가 업데이트되어서 관련 로직이 바뀌었는데 아직 대응이 안 되었다든지 등)</li></ol><p>이상이 현재 기억나는 카카오와 네이버 관련해서 겪었던 이슈들이다. 다음 글에서는 위 기능을 구현하는 과정에서 리팩토링을 하기 위해 어떤 구조를 택하게 되었고 TypeScript를 일부 도입하는 등 프로젝트와 관련된 내용들을 기술해보려고 한다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2월 말부터 정말 지독한 슬럼프? 번아웃?에 시달려왔다. 부디 이번에 작업했던 결과물들을 회고하는 과정을 통해 탈출할 수 있기를 바라는 마음으로 미뤄왔던 회고글을 작성해본다. 업무상 다급하게 진행했던 과정들이었기에 기재한 내용들에 대해 엄밀한 검
      
    
    </summary>
    
      <category term="Dev" scheme="https://eclatant.io/categories/Dev/"/>
    
    
      <category term="Dev" scheme="https://eclatant.io/tags/Dev/"/>
    
  </entry>
  
  <entry>
    <title>리팩토링의 순서</title>
    <link href="https://eclatant.io/2019/02/25/2019-02-25-Refactoring-Order/"/>
    <id>https://eclatant.io/2019/02/25/2019-02-25-Refactoring-Order/</id>
    <published>2019-02-24T15:00:00.000Z</published>
    <updated>2019-02-24T15:54:40.449Z</updated>
    
    <content type="html"><![CDATA[<p>회사에서 맡게 된 두 가지 프로젝트가 있다.</p><p>하나는 잘못된 기술 스택과 당시의 악조건으로 인해 객관적(?)으로 심폐소생술이 어려워 새롭게 만들어야 한다.</p><p>나머지 하나는 React로 만들어져있고, 새롭게 만들 필요까지는 없으나 프로젝트 전체적으로 리팩토링을 해야 한다.</p><p>Redux로 되어있는 프로젝트이다.<br>하지만 오직 App component 하나에만 connect가 되어있고, 메서드의 다수는 데이터가 아닌 DOM의 className 등을 기반으로 조건처리가 되어있고, Page에 해당하는 component들은 1200 ~ 1500라인 정도 된다.<br>(React, Redux를 해본 사람들이라면 대략적으로 어떤 상태인지 짐작할 수 있으리라.)</p><p>머릿속에 떠오른 수많은 개선 아이디어들이 있었다. (아래는 그중 일부 예시이다.)</p><ul><li>Desktop과 Mobile로 나뉘어져있는 component의 공통점을 추출해서 중복을 없애고 같은 것들을 한 곳에서 처리하도록 한다</li><li>render method의 대부분이 html tag 그대로 기재되어있는 것들을 최대한 presentor로 분리해낸다</li><li>프로젝트 전반에 대한 도메인을 파악한다 <a href="https://adhrinae.github.io/posts/ui-as-an-afterthought-kr" target="_blank" rel="noopener">https://adhrinae.github.io/posts/ui-as-an-afterthought-kr</a></li><li>현재 너무나 많은 props를 주입받고 있고, 그것들에 대해 제대로 된 관리가 되어있지 않으므로 prop-types를 도입한다</li><li>API 문서가 부족한 부분에 대해 TypeScript를 통해 타이핑을 한다</li><li>Redux-saga를 도입해서 가독성을 높인다</li><li>Ducks 패턴을 도입해서 action types, action creators, reducer와 같이 레이어 단위로 나뉘어져있는 파일들을 도메인을 기준으로 나눈다</li><li>redux-batch 등을 활용해서 특정 action에서 dispatch가 여러 번 이루어지는 것을 방지한다</li><li>hooks를 사용해서 보다 간결한 component를 만든다</li><li>antd를 도입해서 전형적인 component들을 대체한다</li><li>…</li></ul><p>당연하게도(?) 테스트 코드는 없기 때문에, 기존 프로젝트가 깨지지 않는다는 것을 쉽게 확인할 수 있어야만 덜 걱정하며 배포할 수 있을 것이다.</p><p>그런 측면에서 점진적으로 개선시켜나가는 것은 대단히 중요하고, 어떠한 작업을 하든 의식적으로 대단히 작은 단위로 나누어 작업하면서 계속해서 확인하고, 그것을 commit으로 나누어 기록해야만 한다는 점은 이러한 작업의 대원칙일 것이다.</p><p>그 다음으로 고민했던 지점은 저 수많은 개선점들을 어떠한 순서로 행할 것인가였다.</p><p>처음에는 각각의 개선점이 가져다 줄 생산성과 그것을 위한 역생산성(비용)을 따져보려고 했었다. (역생산성과 관련하여 Redux와 TypeScript를 선호하지 않는데, 관련된 내용은 나중에 조금 더 경험이 쌓인 뒤에 작성해보려고 한다.)<br>또는 비용과 난이도가 낮은 것부터 해봐야겠다고 생각도 했었다.</p><p>하지만 특정 지점에 대해서 프로젝트 전체를 개선시키고 그 작업이 끝나면 다음 개선지점을 프로젝트에 적용하는 방식으로 진행하기에는 상황적으로 무리가 있다고 판단하였다.</p><p>그렇다면 주어지는 테스크를 수행해나가면서 그것과 관련된 부분에 대해서만이라도 <a href="https://johngrib.github.io/wiki/Boy-Scout-Rule/" target="_blank" rel="noopener">보이 스카웃 규칙</a>을 적용하는 수 밖에 없지 않은가.</p><p>그랬을 때 무엇부터 적용할지에 대해서 다시 고민해보고 내린 결론은 다음과 같았다.<br>(함수형에서 대표적으로 쓰이는 컬렉션 함수들을 예시로 들겠다.)</p><ol start="0"><li>Filter</li></ol><ul><li>기존 코드에서 쓰이지 않는 것들을 없애는 것을 최우선으로 한다. (이런 것들이 생긴 것은 아마도 <a href="https://zetawiki.com/wiki/YAGNI" target="_blank" rel="noopener">YAGNI</a> 때문일 것이다.) 왜냐하면 적용했을 때의 사이드이펙트도 가장 적을 것이고, 수행하는 것에 있어서도 가장 쉬울 것이기 때문이다.</li></ul><ol><li>Reduce</li></ol><ul><li>기존에 중복되어있거나 장황하게 되어있던 부분을 추상화한다. 이때의 접근방식은 기존 것을 유지한 상태로, 기존 것과 동일하다고 믿어지는(?) 추상물을 만들어서 교체해보았을 때 같은 결과가 나오면 그제서야 기존 것을 제거한다.</li></ul><ol start="2"><li>Map</li></ol><ul><li>기존 것과 같은 기능을 다르게 수행하는 것을 만든다. 비동기와 관련된 로직은 Saga가 아닌 Thunk로도 가능하다. 들어가는 비용은 적지 않은데 결과는 같으니, 내 스스로는 가독성이나 생산성이 개선된다고 생각하더라도 어느 지점에선 만족감만을 위한 작업일 가능성도 높으니 가장 후순위로 미룬다.</li></ul><p>현재는 고민을 끝낸지 얼마 되지 않았고, 그동안 리팩토링 등과 관련한 책들을 구매만 해두고 읽어보지 못해서 이론과 경험을 쌓아가며 더 나은 방법론을 만들어가려고 한다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;회사에서 맡게 된 두 가지 프로젝트가 있다.&lt;/p&gt;
&lt;p&gt;하나는 잘못된 기술 스택과 당시의 악조건으로 인해 객관적(?)으로 심폐소생술이 어려워 새롭게 만들어야 한다.&lt;/p&gt;
&lt;p&gt;나머지 하나는 React로 만들어져있고, 새롭게 만들 필요까지는 없
      
    
    </summary>
    
      <category term="Dev" scheme="https://eclatant.io/categories/Dev/"/>
    
    
      <category term="Dev" scheme="https://eclatant.io/tags/Dev/"/>
    
  </entry>
  
  <entry>
    <title>루비 인터뷰 질문</title>
    <link href="https://eclatant.io/2019/02/23/2019-02-23-Ruby/"/>
    <id>https://eclatant.io/2019/02/23/2019-02-23-Ruby/</id>
    <published>2019-02-22T15:00:00.000Z</published>
    <updated>2019-02-23T16:40:51.267Z</updated>
    
    <content type="html"><![CDATA[<p>symbol과 string의 차이는 무엇인가요?</p><ul><li>symbol은 string과 다르게 불변 객체, heap 메모리에 생성되고 나면 동일한 객체로 재사용 가능, 따라서 성능 측면에서 유리</li><li>heap이란 구조화되지 않은 메모리영역, 실행 컨텍스트는 스택, 이벤트 루프는 큐로 관리</li></ul><p>self 는 무엇인가요?</p><ul><li>self는 소속객체를 가리킴, self를 이용해 만든 메서드는 클래스 메서드, 그렇지 않은 메서드는 인스턴스 메서드</li></ul><p>생성자(constructor)을 사용하는 방법은 무엇인가요?</p><ul><li>initialize</li></ul><p>Ruby가 dynamic programming language 임을 나타내는 특징들은 무엇인가요?</p><ul><li>런타임시에 클래스에 멤버 변수, 메서드 추가 삭제 재정의 등이 가능</li></ul><p>동적인 함수명을 실행(invoke) 하는 방법을 설명하세요.</p><ul><li>send</li></ul><p>||= 의 역할은 무엇인가요?</p><ul><li>a ||= b의 경우, a가 falsy value일 경우, a에 b를 할당</li></ul><p>Class와 Module 의 차이는 무엇인가요?</p><ul><li>목적, 클래스는 인스턴스를 만들기 위해서, 모듈은 메서드를 제공해주기 위함</li></ul><p>조건연산자 중 and 와 &amp;&amp; 의 차이는 무엇인가요?</p><ul><li>기능상 동일하나 and가 우선순위가 낮음</li></ul><p>Block, Proc, Lambda 의 차이가 무엇인가요?</p><ul><li>Proc : 익명함수(절차)를 담은 객체, .call()을 통해 호출가능 (기명함수와 차이가 존재)</li><li>Lambda : Proc 객체를 생성하는 방법, 인자 개수 준수, return과 break가 익명 함수 안으로 한정</li><li>Block : do ~ end 사이의 코드, 메서드에 블록을 넘겨주면 yield로 실행 가능, &amp; operator를 통해 지역 변수 대신 블록에 대한 참조를 인자로 전달 가능, return과 break가 블록 안으로 한정</li></ul><p>외부 파일을 참조하는 require, load, include, extend의 차이는 무엇인가요?</p><ul><li>load는 매번 새롭게 파일을 불러옴</li><li>require는 최초 한 번만 파일을 불러옴</li><li>include는 모듈의 메서드들을 인스턴스 메서드로 불러옴</li><li>extend는 모듈의 메서드들을 클래스 메서드로 불러옴</li></ul><p>clone과 dup, deep_dup의 차이는 무엇인가요?</p><ul><li>clone은 object 및 내부 상태를 복사하지만, dup는 새로운 인스턴스를 반환받음<ul><li>While clone is used to duplicate an object, including its internal state, dup typically uses the class of the descendant object to create the new instance.</li></ul></li><li>clone/dup의 shallow copy와 달리, deep_dup는 deep copy가 가능함</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;symbol과 string의 차이는 무엇인가요?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;symbol은 string과 다르게 불변 객체, heap 메모리에 생성되고 나면 동일한 객체로 재사용 가능, 따라서 성능 측면에서 유리&lt;/li&gt;
&lt;li&gt;heap이란 구조화되지
      
    
    </summary>
    
      <category term="Ruby" scheme="https://eclatant.io/categories/Ruby/"/>
    
    
      <category term="Ruby" scheme="https://eclatant.io/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>코딩 인터뷰 완전 분석</title>
    <link href="https://eclatant.io/2019/02/16/2019-02-16-CtCI/"/>
    <id>https://eclatant.io/2019/02/16/2019-02-16-CtCI/</id>
    <published>2019-02-15T15:00:00.000Z</published>
    <updated>2019-02-16T10:44:48.032Z</updated>
    
    <content type="html"><![CDATA[<h2>면접관련</h2><h3>면접에서의 평가기준</h3><h4>분석 능력</h4><ul><li>문제를 푸는 데 도움을 많이 받았나?</li><li>최적화를 얼마나 했나?</li><li>문제를 푸는 데 시간이 얼마나 소요됐나?</li><li>디자인/설계를 할 때에 문제의 체계를 제대로 세우고 다양한 방법에 대한 장단점을 생각해 봤는가?</li></ul><h4>코딩 능력</h4><ul><li>알고리즘을 적절한 코드로 표현할 수 있나?</li><li>깔끔하고 잘 구성되어 있나?</li><li>가능한 에러에 대해 생각해 봤나?</li><li>코드 스타일은 훌륭한가?</li></ul><h4>기술적 지식 및 컴퓨터 과학 기본</h4><ul><li>컴퓨터 과학 및 관련 기술에 대한 기본기가 출중한가?</li></ul><h4>경험</h4><ul><li>과거에 기술적 결정을 해본 적이 있는가?</li><li>흥미롭고 도전적인 프로젝트를 해본 적이 있는가?</li><li>진취성, 결단성, 그 외 다른 중요한 요소를 내보인 적이 있는가?</li></ul><h4>문화와 얼마나 맞는지 / 의사소통능력</h4><ul><li>지원자의 성격과 가치가 회사에 잘 맞는가? 면접관과 의사 소통이 잘 되었는가?</li></ul><p>a^3 + b^3 = C^3 + d^3을 만족하는 1,000 이하의 자연수를 모두 찾기</p><h3>이력서의 프로젝트에 대한 설명</h3><h4>Y를 구현해서 X를 성취했고, 그 결과 Z를 이루었다</h4><ul><li>무엇을 했는지, 어떻게 했는지, 그리고 결과는 어떠하였는지를 적으라. 이상적으로는, 결과를 가급적 ‘측정 가능한’ 형태로 제시하는 것이 좋다.<ul><li>“분산 캐시를 구현해서 오브젝트 렌더링 시간을 75% 줄였고,그 결과 로그인 시간을 10% 경감할 수 있었다</li><li>“wincliff에 기반한 새로운 비교 알고리즘을 구현한 결과, 평균 비교 정확도를 1.2에서 1.5로 개선했다</li></ul></li></ul><h4>질문에 대한 답변</h4><ul><li>행위 문제에 구조적으로 대답을 할 때 널리 쓰이는 두가지 방법이 있다. 유용한 정보 우선 (nugget first)과 S,A,R이다. 이 두 기술은 개별적으로 사용할 수도 있고, 같이 사용할 수도 있다.</li><li>유용한 정보우선<ul><li>유용한 정보(nugget)를 우선적으로 전달한다는 것은, 서두에 답변의 내용을 간결히 요약하는 것을 말한다.</li></ul></li><li>S.A.R<ul><li>상황, 행위, 결과 접근법 즉 S.A.R.(Situation, Action, Result) 접근법은 상황을 요 약하는 것으로부터 출발하여, 여러분이 어떤 행동을 했는지를 설명하고, 그 결과를 기술하는 접근법이다</li></ul></li><li>취했던 행동에 대해 논하라<ul><li>대부분의 모든 경우에 ‘행동’이 이야기 에서 가장 중요한 부분이다. 하지만 너무나도 많은 사람이 그 당시 상황에 대해서는 쉼 없이 말을 늘어 놓지만 취했던 행동에 대해서는 아주 간단하게 언급하고 넘어간다. 그러지 말고 어떤 행동을 취했는지 갚이 있게 설명하라. 어떤 행동을 취했는지 가능한 여러 부분으로 나누어 말하라. 예를들어 “다음 세 가지 행동을 취했습니다. 우선,저는 -” 같은 방식으로 설명하면 충분히 깊이있는 설명을 할 수 있다.</li></ul></li></ul><p><img src="http://slideplayer.com/5041115/16/images/6/Examples+of+Algorithms+and+their+big-O+complexity.jpg" alt="img"></p><h3>시간복잡도</h3><ul><li>점근적 실행 시간</li><li>그 중에서 Big O 표기법은 점근적 시간의 상한을 뜻한다<ul><li>계산 복잡도를 그래프로 나타내었을 때, 최악의 경우에도 알고리즘의 계산 복잡도에 비교했을 때 같거나 그보다 높은 곳에 위치할 그래프이기에 상한이라 칭한다</li><li><a href="https://ratsgo.github.io/data%20structure&amp;algorithm/2017/09/13/asymptotic/" target="_blank" rel="noopener">점근적 표기법</a></li></ul></li><li>업계에선 Big O 표기법을 Big theta, 즉 수행 시간에 딱 맞추어 표기하려고 하는 경향이 있다</li><li>대부분의 알고리즘은 최악의 경우와 평균적인 경우가 같다</li></ul><h3>공간복잡도</h3><ul><li>시간복잡도와 평행선을 이룸</li><li>재귀 호출에 쓰이는 스택 공간도 포함됨<ul><li>꼬리 재귀 호출을 충족한다면 해당되지 않는다</li></ul></li></ul><h3>상수항은 무시하라, 지배적이지 않은 항을 무시하라</h3><ul><li>Big O 표기법은 데이터의 증가에 따른 점근적 실행 시간의 변화증가율을 나타내기 위한 것이므로 무시한다</li><li>O(N)이 언제나 O(2N)보다 나은 것은 아니다<ul><li>big-O는 단순히 증가하는 비율을 나타내는 개념이므로, 특수한 입력에 한해 O(N) 코드가 O(1) 코드보다 빠르게 동작하는 것은 매우 가능성 있는 얘기다.</li></ul></li></ul><h3>여러 부분으로 이루어진 알고리즘: 덧셈 VS 곱셈</h3><ul><li>A일을 모두 마치고 B일을 해야 한다면 A + B</li><li>A일을 할 때마다 B일을 해야 한다면 A * B</li></ul><h3>상환시간</h3><ul><li>ArrayList의 경우, 배열의 용량이 꽉 찼을 때, 기존보다 크기가 두 배 더 큰 배열을 만든 뒤, 이전 배열의 모든 원소를 새 배열로 복사한다, 이때 삽입 연산의 수행 시간은 기존의 모든 원소를 새 배열로 복사해야 하기에 O(N)이 소요된다, 그러나 배열에 가용 공간이 존재할 때 삽입 연산은 O(1)이 걸린다, 위 두 가지 경우를 포함한 전체 수행 시간을 따져볼 때 상환 시간이라는 개념을 이용한다, 최악의 경우는 가끔 발생하지만 해당 수행 시간을 나머지 경우에서 분할 상환한다는 개념이다, 위 케이스에서 배열의 크기가 2의 배수일 때 원소 삽입 연산에 O(N)이 소요된다, 이러한 N의 합은 X개의 원소를 삽입할 때 2X만큼 걸리므로 이를 분할 상환하면 삽입 한 번에 필요한 시간은 O(1)이다</li></ul><h3>log N 수행 시간</h3><ul><li>대표적인 케이스는 이진 탐색이다</li><li>탐색할 때마다 원소의 개수가 절반씩 줄어든다면, 수행 시간은 O(log N)일 가능성이 크다</li></ul><h3>재귀적으로 수행 시간 구하기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> f(n - <span class="number">1</span>) + f(n - <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># return 1 if n &lt;= 1 else f(n - 1) + f(n - 1)</span></span><br></pre></td></tr></table></figure><ul><li>위 케이스의 수행 시간은 O(2^N)이다</li><li>트리의 깊이가 N이고, 각 노드는 두 개의 자식 노드를 가지고 있으므로 깊이가 깊어질 때마다 이전보다 두 배 더 많이 호출하게 되기 때문이다</li><li>다수의 호출로 이루어진 재귀 함수에서 수행 시간은 보통 O(분기^깊이)이다, 분기란 재귀 함수가 자신을 재호출하는 횟수를 뜻함</li><li>상수항 또는 로그의 밑과 다르게 지수의 밑은 무시하면 안 된다다</li><li>위 케이스의 공간복잡도는 O(N)이다</li></ul><h3>예제 및 연습 문제</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(array)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    product = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(array)):</span><br><span class="line">        sum += array[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(array)):</span><br><span class="line">        product *= array[i]</span><br><span class="line"></span><br><span class="line">    print(<span class="string">f"<span class="subst">&#123;sum&#125;</span>, <span class="subst">&#123;product&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">foo([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]) <span class="comment"># O(N)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printPairs</span><span class="params">(array)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(array)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(array)):</span><br><span class="line">            print(<span class="string">f"<span class="subst">&#123;array[i]&#125;</span>, <span class="subst">&#123;array[j]&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">printPairs([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]) <span class="comment"># O(N^2)</span></span><br></pre></td></tr></table></figure><p>총 수행 시간을 헤아리는 것 외에도, 위 코드가 무엇을 의미하는지 살펴보는 것을 통해 구할 수도 있다<br>위의 코드는 모든 쌍을 출력하는 코드이다, 그러므로 쌍의 총 개수인 N^2과 동일</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printUnorderedPairs</span><span class="params">(array)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(array)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(array)):</span><br><span class="line">            print(<span class="string">f"<span class="subst">&#123;array[i]&#125;</span>, <span class="subst">&#123;array[j]&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">printUnorderedPairs([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]) <span class="comment"># O(N^2)</span></span><br></pre></td></tr></table></figure><p>반복 횟수 세어보기, 코드가 무엇을 의미하는가, 결과를 그림으로 표현, 평균을 이용</p><p>반복 횟수의 합 : 1부터 N-1까지의 합은 N(N-1)/2<br>코드의 의미, 그림으로 표현 : 전체 쌍(사각형)의 절반<br>평균을 이용 =&gt; 바깥 루프는 N번, 안쪽 루프는 평균값으로 N/2<br>(1 ~ 10의 평균이 5이듯이 1 ~ N의 평균은 N/2이므로)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printUnorderedPairs2</span><span class="params">(array_a, array_b)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(array_a)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(array_b)):</span><br><span class="line">            <span class="keyword">if</span> array_a[i] &lt; array_b[j]:</span><br><span class="line">                print(<span class="string">f"<span class="subst">&#123;array_a[i]&#125;</span>, <span class="subst">&#123;array_b[j]&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">printUnorderedPairs2([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]) <span class="comment"># O(A*B)</span></span><br></pre></td></tr></table></figure><p>두 배열 각각의 크기를 알 수 없으므로, 크기를 모두 고려해야 하므로 O(A*B)이다</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printUnorderedPairs3</span><span class="params">(array_a, array_b)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(array_a)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(array_b)):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">100000</span>):</span><br><span class="line">                print(<span class="string">f"<span class="subst">&#123;array_a[i], &#123;array_b[i]&#125;</span>&#125;"</span>)</span><br><span class="line"></span><br><span class="line">printUnorderedPairs3([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]) <span class="comment"># O(A*B)</span></span><br></pre></td></tr></table></figure><p>100000은 상수항이므로 Big O에 영향을 미치지 못한다</p><p>P74</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(array)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(array) // <span class="number">2</span>):</span><br><span class="line">        other = len(array) - i - <span class="number">1</span></span><br><span class="line">        array[i], array[other] = array[other], array[i]</span><br><span class="line"></span><br><span class="line">reverse([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]) <span class="comment"># O(N)</span></span><br></pre></td></tr></table></figure><p>배열의 절반만 살펴본다고 해서 (반복횟수가 N의 절반이라고 해서) Big O에 영향을 끼치는 것은 아니다</p><p>P &lt; N/2 일 때, O(N+P) 는 O(N) (N이 지배적인 항이므로)<br>O(2N)은 O(N)<br>O(N + logN)은 O(N)<br>O(N+M)은 N과 M의 관계를 알 수 없다면 O(N+M)으로 표기해야 함</p><p>P75<br>여러 개의 문자열로 구성된 배열이 주어졌을 때, 각각의 문자열을 먼저 정렬하고<br>그 다음에 전체 문자열을 사전순으로 다시 정렬하는 알고리즘의 수행시간은 어떠하겠는가?<br>각 문자열을 정렬 =&gt; O(NlogN)<br>모든 문자열을 정렬 =&gt; O(N*NlogN)<br>전체 문자열을 사전순으로 정렬 =&gt; O(NlogN) 추가<br>따라서 O(N^2logN + NlogN)이므로 O(N^2logN)이다 는 완전히 잘못된 분석!</p><p>서로 다른 N을 혼용해서 쓰니까 위와 같은 오류를 범하게 된다<br>문자열의 길이를 나타낼 때와 배열의 길이를 나타낼 때를 구분하여 사용했어야 한다</p><p>변수 N을 사용하지 않거나 N이 가리키는 것이 명백한 경우에만 사용하라<br>연상 가능한 이름을 사용해서 새로운 변수를 정의하라</p><p>가장 길이가 긴 문자열의 길이를 s라 하자<br>배열의 길이를 a라 하자<br>각 문자열을 정렬하는데 O(slogs)<br>a개의 문자열이므로 O(a * slogs)</p><p>전체 문자열을 사전순으로 정렬해야 함, 총 a개의 문자열이 있어서 O(aloga)가<br>필요하다고 생각할 수 있지만, 문자열을 비교하는 시간도 고려해야 한다<br>두 문자열을 비교하는데 O(s)가 소요되며, 비교를 O(aloga)번 해야 하므로<br>결론적으로 O(s<em>aloga)가 소요됨<br>위 두 부분을 합치면 전체 시간 복잡도는 O(a</em>s(logs + loga))가 된다</p><p>P76</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumNode</span><span class="params">(node)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> node == <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> sumNode(node.left) + node.value + sum(node.right)</span><br></pre></td></tr></table></figure><p>균형 이진 탐색 트리에서 모든 노드의 값을 더하는 코드<br>이진 탐색 트리라는 이유로 log가 있을 것이라 착각해선 안 된다</p><p>코드가 무엇을 의미하는가<br>트리의 모든 노드를 방문해서 합을 구하는 것이므로, 노드의 개수와 선형 관계<br>O(N)</p><p>재귀호출 패턴 분석<br>재귀함수에 분기가 여러 개 존재할 때, 일반적으로 O(분기^깊이)가 된다<br>트리의 깊이는 N개에 대해 logN이다<br>분기가 2라면 2^logN이므로 O(N)이 된다</p><p>P77<br>N이 소수를 확인하려면 N의 제곱근까지만 확인해보면 된다</p><p>어떤 수의 제곱근이란 그 수가 갖는 약수들 중에 자신을 제외하고 가장 큰 수 라고 볼 수 있을 것 같아요.<br>소수라는게 1과 자기자신만을 약수로 가져야 하는데 또 다른 약수를 갖게 되면 안되는거니까 제곱근으로도 나누어 떨어지면 소수가 될 수 없는것이죠.<br>또한 제곱근 이상의 수로 나누게 되면 제곱근으로 나누었을 때보다 작은 몫을 결과로 반환하게 되서 제곱근 이하의 수로 나누었던 계산들을 반복하게 됩니다.<br>어떤 수를 2부터 제곱근까지의 수로 나눈다는 것을 그 수를 자신을 제외한 제수들로 나누었을 때 가질 수 있는 몫의 최소값(2)부터<br>최대값(제곱근)까지로 나눠 보는 것이라 생각하면 이해가 빠를 것 같아요.<br>수 25에서 제곱근 5는 25가 가질 수 있는 몫의 최대값입니다.<br>그리고 그 이상의 수로 나누었을 때는 제곱근(5) 이하의 값들을 몫으로 반환하기 때문에 2부터 4까지 나누는 계산과 같게 되서 의미가 없습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPrime</span><span class="params">(n)</span>:</span></span><br><span class="line">    i = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i ** <span class="number">2</span> &lt;= n:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        x += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>시간 복잡도는 O(√N)</p><p>P78</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><p>O(N)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutation</span><span class="params">(s, prefix=<span class="string">""</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(s) == <span class="number">0</span>:</span><br><span class="line">        print(prefix)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">            rem = s[<span class="number">0</span>:i] + s[i+<span class="number">1</span>:]</span><br><span class="line">            permutation(rem, prefix + s[i])</span><br></pre></td></tr></table></figure><p>O(N^2 * N!)</p><p>순열의 종류가 모두 출력되니, O(N!)<br>순열을 조합하기 위해서 N개의 글자만큼의 호출이 필요하므로 O(N)<br>매 for문마다 문자열을 재조립하거나, 출력하는 것과 같은 O(N) 연산 소요</p><p>P79</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span> <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>)</span><br></pre></td></tr></table></figure><p>O(2^N)<br>재귀 호출 = 분기^깊이<br>재귀 호출이 여러 번 발생하면 지수 시간 알고리즘일 가능성이 큼</p><p>P80</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allFib</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;i&#125;</span>: <span class="subst">&#123;fib(i)&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>O(2^N)</p><p>fib는 O(2^N)이 맞다, 그러나 전체 걸리는 시간은 O(N*2^N)이 아니다<br>그 이유는 각각의 호출시마다 N이 변화하기 때문이다<br>등비수열의 합공식에 따라 O(2^N+1)이 되므로 O(2^N)이다</p><p>P81</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allFib</span><span class="params">(n)</span>:</span></span><br><span class="line">    memo = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;i&#125;</span>: <span class="subst">&#123;fib(i, memo)&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n, memo)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>: <span class="keyword">return</span> memo[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">elif</span> len(memo) &gt; n <span class="keyword">or</span> n == <span class="number">1</span>: <span class="keyword">return</span> memo[n]</span><br><span class="line">    memo.append(fib(n<span class="number">-1</span>, memo) + fib(n<span class="number">-2</span>, memo))</span><br><span class="line">    <span class="keyword">return</span> memo[n]</span><br></pre></td></tr></table></figure><p>O(N)</p><p>상수 시간의 일을 N번 반복한다 (캐시값을 찾아서 더한 뒤 그 결과를 캐시 배열에 저장하고 반환)</p><p>P82</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">powers_of_2</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">1</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">        print(n)</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        prev = powers_of_2(n // <span class="number">2</span>)</span><br><span class="line">        curr = prev * <span class="number">2</span></span><br><span class="line">        print(curr)</span><br><span class="line">        <span class="keyword">return</span> curr</span><br></pre></td></tr></table></figure><p>O(logN)</p><p>1이 될 때까지 절반씩 나누므로 log<br>해당 코드의 목적을 생각해보면, 1부터 n사이의 모든 2의 승수를 계산하고 출력하므로 함수의 호출 횟수는 승수의 개수와 동일하다<br>n이 커질수록 수행 시간이 어떻게 바뀌는가? n의 크기가 두 배가 될 때 호출 횟수가 한 번 증가한다 (2^x = n, x = logN)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">P83</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">product</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(b):</span><br><span class="line">        sum += a</span><br><span class="line"><span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure><p>O(N)</p><p>P84</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> b &lt; <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> b == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>: <span class="keyword">return</span> a * power(a, b - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>O(N)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mod</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> b &lt;= <span class="number">0</span>: <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    div = a / b</span><br><span class="line">    <span class="keyword">return</span> a - div * b</span><br></pre></td></tr></table></figure><p>O(1)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">div</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    sum = b</span><br><span class="line">    <span class="keyword">while</span> sum &lt;= a:</span><br><span class="line">        sum += b</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><p>O(a/b)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqrt</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sqrt_helper(n, <span class="number">1</span>, n)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqrt_helper</span><span class="params">(n, mi, ma)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> ma &lt; mi: <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    guess = (mi + ma) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> guess * guess == n: <span class="keyword">return</span> guess</span><br><span class="line">    <span class="keyword">elif</span> guess * guess &lt; n: <span class="keyword">return</span> sqrt_helper(n, guess + <span class="number">1</span>, ma)</span><br><span class="line">    <span class="keyword">else</span>: <span class="keyword">return</span> sqrt_helper(n, mi, guess - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>O(logN)</p><p>P85</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqrt</span><span class="params">(n)</span>:</span></span><br><span class="line">    guess = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> guess * guess &lt;= n:</span><br><span class="line">        <span class="keyword">if</span> guess * guess == n:</span><br><span class="line">            <span class="keyword">return</span> guess</span><br><span class="line">        guess += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><p>O(√N)</p><p>이진 탐색 트리가 균형 잡혀있지 않을 때, 원소를 찾는데 걸리는 최악의 경우<br>O(N)</p><p>이진 트리가 이진 탐색 트리가 아닐 때 시간 복잡도<br>O(N)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copyArray</span><span class="params">(array)</span>:</span></span><br><span class="line">    copy = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> array:</span><br><span class="line">        copy = appendToNew(copy, value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> copy</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">appendToNew</span><span class="params">(array, value)</span>:</span></span><br><span class="line">    bigger = [<span class="number">0</span>] * len(array)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(array)):</span><br><span class="line">        bigger[i] = array[i]</span><br><span class="line"></span><br><span class="line">    bigger.append(value)</span><br><span class="line">    <span class="keyword">return</span> bigger</span><br></pre></td></tr></table></figure><p>O(N^2)</p><p>P86</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumDigits</span><span class="params">(n)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        sum += n % <span class="number">10</span></span><br><span class="line">        n //= <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure><p>O(logN)</p><p><a href="https://github.com/careercup/CtCI-6th-Edition/blob/master/Java/Introduction/Big_O/Q_11.java" target="_blank" rel="noopener">https://github.com/careercup/CtCI-6th-Edition/blob/master/Java/Introduction/Big_O/Q_11.java</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">numChars = <span class="number">26</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printSortedStrings</span><span class="params">(remaining, prefix=<span class="string">""</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> remaining == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> isInOrder(prefix):</span><br><span class="line">            print(prefix)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(numChars):</span><br><span class="line">            c = ithLetter(i)</span><br><span class="line">            printSortedStrings(remaing - <span class="number">1</span>, prefix + c)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isInOrder</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(s)):</span><br><span class="line">        prev = ithLetter(s[i<span class="number">-1</span>])</span><br><span class="line">        curr = ithLetter(s[i])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> prev &gt; curr:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ithLetter</span><span class="params">(i)</span>:</span></span><br><span class="line">    return ?</span><br></pre></td></tr></table></figure><p><a href="https://github.com/careercup/CtCI-6th-Edition/blob/master/Java/Introduction/Big_O/Q_12.java" target="_blank" rel="noopener">https://github.com/careercup/CtCI-6th-Edition/blob/master/Java/Introduction/Big_O/Q_12.java</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">intersection</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    mergesort(b)</span><br><span class="line">    intersect = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">if</span> binarySearch(b, x) &gt;= <span class="number">0</span>:</span><br><span class="line">            intersect += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> intersect</span><br></pre></td></tr></table></figure><hr><h2>기술적 문제</h2><h3>문제를 풀 때</h3><ul><li>직접 풀도록 노력하라</li><li>코드를 종이에 적어라</li><li>코드를 테스트하라 : 기본 조건, 오류 발생 조건 등을 종이에서 전부 테스트</li><li>종이에 적은 코드를 그대로 컴퓨터로 옮긴 뒤 실제로 실행해보라</li></ul><h3>알고 있어야 할 것들</h3><ul><li>자료구조 : 연결리스트, 트리, 그래프, 스택, 큐, 힙, 해시테이블</li><li>알고리즘 : BFS, DFS, 이진탐색, 병합 정렬, 퀵 정렬</li><li>개념 : 비트 조작, 메모리(스택 VS 힙), 재귀, 다이나믹 프로그래밍, Big O</li></ul><h3>문제 접근법</h3><p><img src="https://image.slidesharecdn.com/crackingtheskills-handoutsmerged-151005235406-lva1-app6891/95/cracking-the-interview-skills-coding-soft-skills-product-management-handouts-1-638.jpg?cb=1444089359" alt="img"></p><ul><li>경청하기</li><li>예제를 직접 그려보기<ul><li>명확한 예제</li><li>충분히 큰 예제</li><li>일반적인 예제</li></ul></li><li>무식한 방법으로 일단 해보기</li><li>최적화<ul><li>간과한 정보가 있는가?</li><li>새로운 예제</li><li>잘못된 방식으로 검증</li><li>시간과 공간의 실익</li><li>정보를 미리 계산</li><li>해시테이블</li><li>가능한 최선의 수행 시간(Best Conceivable Runtime)</li></ul></li><li>검토하기</li><li>코드 작성하기<ul><li>모듈화된 코드</li><li>에러를 검증</li><li>적절한 자료구조</li><li>좋은 변수명</li></ul></li><li>테스트<ul><li>면접관에게 각 행에 대해 설명한다는 생각으로 머릿속으로 돌려보는 테스트</li><li>평소와 다르게 동작하는 부분을 유심히 살펴보기</li><li>버그가 자주 발생하는 부분을 유심히 살펴보기</li><li>작은 규모의 테스트</li><li>특별한 경우를 테스트</li></ul></li></ul><h3>최적화 및 문제풀이 기술</h3><h4>BUD를 찾으라</h4><ul><li>병목현상(Bottlenecks)<ul><li>어떤 부분 때문에 알고리즘이 느려지는 경우</li><li>반복적으로 수행하는 부분이 여러 개 있는 경우(해시테이블)</li></ul></li><li>불필요한 작업(Unnecessary Work)<ul><li>더이상 루프를 돌 필요가 없다면 탈출</li><li>가능한 값이 하나 뿐이라면 산출</li></ul></li><li>중복되는 작업(Duplicated Work)<ul><li>해시테이블</li></ul></li></ul><h4>직접 풀어보라, Do It Yourself</h4><ul><li>질문을 받으면 실제 예제를 통해 직관적으로 문제를 풀어 나가려는 노력을 하라</li><li>직관적으로 수행한 최적화 방식을 잘 이해하고 코드로 설계할 때 반영하라</li></ul><h4>단순화, 일반화하라</h4><ul><li>제약조건을 단순화하거나 변형시켜라</li><li>단순화된 버전의 문제를 푼다</li><li>단순화된 문제의 알고리즘이 완성되면 보다 복잡한 형태로 다듬는다</li></ul><h4>초기 사례로부터 확장하기</h4><ul><li>초기 사례(n = 1 등)을 풀고 구해 놓은 해법으로 n = 3 혹은 n = 4와 같은 케이스에 적용해나간다</li><li>재귀 알고리즘으로 구현되는 경우가 많다</li></ul><h4>자료구조 브레인스토밍</h4><ul><li>연결리스트 -&gt; 배열 -&gt; 이진트리 -&gt; 힙</li><li>연결리스트 : 정렬하거나 특정 인덱스에 바로 접근해야 하는 경우에 취약하다</li><li>이진트리 : 순서를 유지하는데 강점이 있다</li></ul><h4>가능한 최선의 수행 시간(Best Conceivable Runtime)</h4><ul><li>수행 시간을 이용해서 어떤 부분을 줄일 수 있는지 힌트를 생각해보라</li><li>시간복잡도를 더 최적화할 수 없다면 공간복잡도를 개선해보자</li><li>자신이 짠 알고리즘에 대해서 질문을 던질 수 있어야 한다</li></ul><h4>좋은 코드의 속성</h4><ul><li>정확도</li><li>효율성(시간과 공간)</li><li>간략화</li><li>가독성</li><li>관리 가능성</li></ul><p>탈락시 <code>다음 기회를 위해 어떻게 준비하면 좋을지 얘기해주실 수 있나요?</code> 라고 질문해보라</p><hr><h2>해시테이블</h2><p>효율적인 탐색을 위해 key를 value에 대응시킨 자료구조</p><p>연결리스트와 해시 코드 함수를 통해 구현 가능</p><p>키와 값을 해시테이블에 넣을 때는 다음의 과정을 거친다<br>(키는 무한한데, 키의 자료형인 int의 개수는 유한하므로 서로 다른 두 개의 키가 같은 인덱스를 가리킬 수도 있다, 연결리스트를 이용하는 이유는 서로 다른 두 개의 키가 같은 해시 코드 또는 서로 다른 두 개의 해시 코드가 같은 인덱스를 가리키는 충돌에 대비하기 위해서이다)</p><ol><li>주어진 키의 해시 코드를 계산</li><li>해시 코드를 이용해 배열의 인덱스를 구한다 (hash(key) % array_length 와 같은 방식)</li><li>배열의 각 인덱스에는 키와 값으로 이루어진 연결리스트에서 키에 상응하는 값을 탐색</li></ol><p>충돌이 자주 발생한다면, worst case runtime은 O(N)이 된다</p><p>일반적으로는 충돌이 최소화된 경우를 가정하는데 이 경우에는 O(1)</p><p><img src="https://user-images.githubusercontent.com/14256139/39124151-56f1a7ea-4735-11e8-843d-3a03d3598246.png" alt="img"></p><p>균형 이진 탐색 트리로도 구현할 수 있으며, 이 경우에는 O(logN)이 된다고 한다, TODO</p><h2>ArrayList와 가변 크기 배열</h2><p>Java와 같이 배열의 길이가 고정되어 있는 언어에서 길이가 동적으로 변하는 자료구조가 필요할 때 사용한다</p><p>통상적으로 배열이 가득 차는 순간, 기존 배열의 크기를 두 배로 늘린다,<br>이 때는 O(N)이지만 자주 발생하는 상황이 아니므로 각 삽입은 평균적으로 O(1)이 소요된다</p><h2>String Builder</h2><p>ArrayList, StringBuilder 모두 array를 들고 있다</p><p>처음에 기본적으로 ArrayList는 크기 5개 짜리 array를, StringBuilder는 16개 짜리를 만든다</p><p>둘 모두 배열의 용량이 가득 차면 Capacity를 두 배로 늘리는 동작을 수행한다</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;면접관련&lt;/h2&gt;
&lt;h3&gt;면접에서의 평가기준&lt;/h3&gt;
&lt;h4&gt;분석 능력&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;문제를 푸는 데 도움을 많이 받았나?&lt;/li&gt;
&lt;li&gt;최적화를 얼마나 했나?&lt;/li&gt;
&lt;li&gt;문제를 푸는 데 시간이 얼마나 소요됐나?&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="CtCI" scheme="https://eclatant.io/categories/CtCI/"/>
    
    
      <category term="CtCI" scheme="https://eclatant.io/tags/CtCI/"/>
    
  </entry>
  
  <entry>
    <title>프론트엔드 입문자를 위한 사전 체크리스트</title>
    <link href="https://eclatant.io/2019/01/28/2019-01-28-Before-CodeReview/"/>
    <id>https://eclatant.io/2019/01/28/2019-01-28-Before-CodeReview/</id>
    <published>2019-01-27T15:00:00.000Z</published>
    <updated>2019-01-27T16:37:37.324Z</updated>
    
    <content type="html"><![CDATA[<p>최근에 지인의 부탁으로 코드 리뷰를 해드릴 기회가 있었다.</p><p>내 실력이나 의견에 대한 자신감이 있어서는 전혀 아니었고, 지금보다도 개발에 덜 익숙했던 시절에 누군가의 피드백이 너무나 절실했던 시절이 있었기에 응하게 되었다.</p><p>지인 분께 드렸던 피드백들이 특정 프로젝트에 국한되는 내용들이 아니라고 생각되어 글을 작성하게 되었다.</p><p>개인의 취향과도 밀접하게 맞닿아있는 내용들도 많아서 조심스럽지만, 주니어 개발자인 필자의 주관적인 의견에 불과하다.</p><h3 id="Prettier-ESLint-적용"><a href="#Prettier-ESLint-적용" class="headerlink" title="Prettier, ESLint 적용"></a><a href="https://prettier.io/" target="_blank" rel="noopener">Prettier</a>, <a href="https://eslint.org/" target="_blank" rel="noopener">ESLint</a> 적용</h3><p>개인적으로 코드에서 가장 추구해야 하는 가치는 가독성이라고 항상 생각합니다.</p><p>그런 점에서 코드의 가독성을 높여줄 수 있는 툴을 활용하는 것은 필수에 가깝다고 생각하고 있습니다.</p><p>제 개인적으로는 파이썬으로 프로그래밍을 시작해서인지 굉장히 당연하게 받아들였던 부분인데, 많은 초심자 분들은 필요성을 못 느끼시는 영역인 것 같기도 합니다.</p><p><a href="https://www.youtube.com/watch?v=ya78lQi5vVI" target="_blank" rel="noopener">https://www.youtube.com/watch?v=ya78lQi5vVI</a></p><p>영상에서는 마치 Visual Studio Code의 Extension인 것처럼 소개되었는데, VSCode에서만 사용할 수 있거나 하지는 않습니다.</p><p>설정 관련해서는 아래 페이지를 참고하시면 될 것 같습니다.</p><ul><li><a href="https://velog.io/@velopert/eslint-and-prettier-in-react" target="_blank" rel="noopener">https://velog.io/@velopert/eslint-and-prettier-in-react</a></li></ul><p>자바스크립트 관련 유명한 컨벤션 중 하나인 airbnb style guide도 꼭 읽어볼만 하다고 생각합니다.</p><p><a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">https://github.com/airbnb/javascript</a></p><hr><h3 id="변수를-선언할-때-var-let-const-키워드를-생략하지는-않았는가"><a href="#변수를-선언할-때-var-let-const-키워드를-생략하지는-않았는가" class="headerlink" title="변수를 선언할 때 var, let, const 키워드를 생략하지는 않았는가?"></a>변수를 선언할 때 var, let, const 키워드를 생략하지는 않았는가?</h3><p>(또는 변수에 할당할 때 this를 생략하지는 않았는가?)</p><p>설령 현재 코드가 동작이 제대로 되는 것처럼 보일지라도, 정확한 대상을 지정한 결과가 아니라면 나중에는 문제가 발생하기 마련입니다.</p><p>키워드 없이 선언하게 되면 전역변수가 되며, 전역변수의 문제점은 실제로 관련해서 문제를 겪다보면 왜 지양해야 하는지 느끼실 수 있을 것이라 생각합니다.<br>(객체의 프로퍼티인데 <code>this.</code> 없이 참조하는 것도 문제가 발생합니다.)</p><p>또한 var, let, const 등의 차이에 대해 명확히 인지할 필요가 있습니다. <a href="https://blueshw.github.io/2017/03/28/ES-var-VS-const-VS-let/" target="_blank" rel="noopener">참고자료 예시</a></p><p>this의 경우, 인터뷰 단골 질문이며 관련해서 call, apply, bind, arrow function 등과 연결되지만 초심자가 우선적으로 공부할 대상은 아닐 수 있습니다.</p><hr><h3 id="언어-내장-메소드로-해결할-수-있는가"><a href="#언어-내장-메소드로-해결할-수-있는가" class="headerlink" title="언어 내장 메소드로 해결할 수 있는가?"></a>언어 내장 메소드로 해결할 수 있는가?</h3><p>보통 가장 많이 사용하게 될 자료구조 중 하나는 배열일 것이라고 생각합니다.</p><p>배열에는 다양한 메소드들이 있고, 가능하다면 최대한 언어에 내장되어있는 메소드로 해결하는 것이 좋습니다.</p><p>이렇게 생각하는 이유는 두 가지입니다.</p><p>하나는 0번에서 말했듯이 가독성 측면입니다.</p><p>문화권에서 원어민들이 사용하는 적합한 어휘를 사용하는 것이 소통에 좋듯이,</p><p>특정 프로그래밍 언어에 익숙한 사람들은 해당 자료구조의 메소드명만 보고도 이 로직이 어떻게 흘러갈지 금방 파악할 수 있습니다.</p><p>그렇지 않고 필요이상으로 for문 등으로 코드가 구성되어있다면, 같은 의미를 전달하기 위해서 더 많은 노력이 필요할 것입니다.</p><p>두 번째로는 퍼포먼스 측면입니다.</p><p>브라우저가 업데이트되어가면서 언어 자체의 퍼포먼스는 미세하게나마 계속 좋아질텐데 내가 임의로 구현한 로직일 경우 이러한 혜택을 덜 받을 수 밖에 없을 것입니다.</p><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/some" target="_blank" rel="noopener">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/some</a></p><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" target="_blank" rel="noopener">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/includes</a></p><p>이러한 다양한 메소드들이 존재하니, 언어에서 기본적으로 제공해주는 메소드들은 최대한 눈에 익혀두고, 나중에 필요할 때 다시 찾아서 사용해보는 것을 반복하는 것을 추천합니다.</p><hr><h3 id="적절한-자료구조를-사용하고-있는가"><a href="#적절한-자료구조를-사용하고-있는가" class="headerlink" title="적절한 자료구조를 사용하고 있는가?"></a>적절한 자료구조를 사용하고 있는가?</h3><p>대표적인 예시로 배열은 특정 데이터의 포함여부를 검사하기 위해서는 최악의 경우 배열 전체를 순회해야만 합니다.</p><p>따라서 특정 데이터 전체를 조회하면서 앞선 탐색에서 지금 탐색 중인 것과 같은 데이터가 존재했었는지 등을 검사하는데 있어서 배열은 적합하지 않습니다.</p><p>어떨 때는 배열이 좋고, 어떨 때는 객체가 좋고 하는 부분들은 충분히 고민해볼만한 포인트라고 생각됩니다.</p><hr><h3 id="중복이-존재하지는-않은가"><a href="#중복이-존재하지는-않은가" class="headerlink" title="중복이 존재하지는 않은가?"></a>중복이 존재하지는 않은가?</h3><p>만약 내가 하려는 로직이 동일하게 2~3번 반복된다면 함수로 추상화시켜서 반복을 줄일 수 있을 것입니다.</p><p>이 외에도 어떤 로직과 어떤 로직이 매우 비슷한데 사소한 1~2곳이 다르다면 그 부분을 제외한 영역은 중복을 줄일 수 있을지 고민해보는 것도 매우 좋을 것 같습니다.</p><hr><h3 id="Primitive-Type과-Reference-Type의-차이점을-알고-있는가"><a href="#Primitive-Type과-Reference-Type의-차이점을-알고-있는가" class="headerlink" title="Primitive Type과 Reference Type의 차이점을 알고 있는가?"></a>Primitive Type과 Reference Type의 차이점을 알고 있는가?</h3><p>JavaScript에는 6가지 Primitive Type이 존재하고, 그 외에는 모두 Reference Type입니다.</p><p>함수에 인수로 넘기고 return으로 받는 과정에서 분명한 차이가 존재하므로 꼭 제대로 이해하고 있어야만 하는 포인트입니다.</p><hr><h3 id="Event-Delegation에-대해-이해하고-있는가"><a href="#Event-Delegation에-대해-이해하고-있는가" class="headerlink" title="Event Delegation에 대해 이해하고 있는가?"></a>Event Delegation에 대해 이해하고 있는가?</h3><p>면접에 빈번하게 나오는 질문입니다.</p><p>어떠한 영역을 클릭하면 화면에 어떠한 변화가 일어나는 등의 구현을 하는 과정에서 필수적으로 사용되는 테크닉이므로</p><p>Event Delegation, Capturing, Bubbling 등은 꼭 이해하고 넘어가시길 권하고 싶습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;최근에 지인의 부탁으로 코드 리뷰를 해드릴 기회가 있었다.&lt;/p&gt;
&lt;p&gt;내 실력이나 의견에 대한 자신감이 있어서는 전혀 아니었고, 지금보다도 개발에 덜 익숙했던 시절에 누군가의 피드백이 너무나 절실했던 시절이 있었기에 응하게 되었다.&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="Dev" scheme="https://eclatant.io/categories/Dev/"/>
    
    
      <category term="Dev" scheme="https://eclatant.io/tags/Dev/"/>
    
  </entry>
  
  <entry>
    <title>Web Dev Curriculum</title>
    <link href="https://eclatant.io/2018/12/13/2018-12-13-WebDev/"/>
    <id>https://eclatant.io/2018/12/13/2018-12-13-WebDev/</id>
    <published>2018-12-12T15:00:00.000Z</published>
    <updated>2018-12-12T10:50:30.358Z</updated>
    
    <content type="html"><![CDATA[<h1><a href="https://github.com/Knowre-Dev/WebDevCurriculum" target="_blank" rel="noopener">Knowre web development curriculum 2018</a></h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;a href=&quot;https://github.com/Knowre-Dev/WebDevCurriculum&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Knowre web development curriculum 2018&lt;/a&gt;&lt;/h1&gt;

      
    
    </summary>
    
      <category term="Dev" scheme="https://eclatant.io/categories/Dev/"/>
    
    
      <category term="Dev" scheme="https://eclatant.io/tags/Dev/"/>
    
  </entry>
  
  <entry>
    <title>Async</title>
    <link href="https://eclatant.io/2018/12/10/2018-12-10-Async/"/>
    <id>https://eclatant.io/2018/12/10/2018-12-10-Async/</id>
    <published>2018-12-09T15:00:00.000Z</published>
    <updated>2018-12-10T07:34:13.372Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Async-비동기"><a href="#Async-비동기" class="headerlink" title="Async (= 비동기)"></a>Async (= 비동기)</h2><p>Async란 무엇인가? Sub routine이 callback을 통해 값을 반환하는 것이다</p><p>IO와 같은 작업들을 후순위로 미루어 렌더링이 끊이지 않게 하고, 퍼포먼스 밸런싱이 좋아지도록 한다 (Blocking을 없애기 위함)</p><p>비동기를 처리하기 위한 값을 만들고 우리가 원하는 시점에 꺼낼 수 있다는 것이 핵심이다</p><p>순번이 없는 애들, 봉화대 전송이 아니어도 되는 경우는 이렇게 구현해야 하며, API 설계시에도 이런 방식으로 가능하도록 요청해야 한다</p><p>Promise는 호출 제어권, 일관된 API을 가지며, 의존관계가 없을 때 여러 이점을 가지기 때문이다</p><h3 id="Promise-async-await"><a href="#Promise-async-await" class="headerlink" title="Promise, async/await"></a>Promise, async/await</h3><p>Async 연산을 다루는 객체이며, 값이 되기로 약속된 값이다</p><p>기존에는 Async를 콜백 패턴을 통해 결과가 실행되기 위한 조건과 그에 따른 핸들러 함수를 넘겨주는 방식이었다</p><p>하지만 이렇게 되면 Async끼리 순서상 의존성을 가질 경우 아래와 같은 그림이 될 수 밖에 없었다</p><p><img src="https://cdn-images-1.medium.com/max/823/1*Co0gr64Uo5kSg89ukFD2dw.jpeg" alt="img"></p><p>Promise는 위의 callback hell을 개선하는 것이 목표는 아니지만, 결과적으로 가독성의 향상을 가져오는 것도 사실이다</p><p>하지만 Promise가 보다 의미있는 지점들이 더 있다</p><p>기존의 콜백 패턴의 경우 이벤트 핸들러가 언제 호출될지 정말로 알 수 없으며, 이벤트 발생 시점이 곧 호출시점으로 이어지기 때문에 개발자가 Flow에 대해 조절할 수 있는 부분이 없다</p><p>그러나 Promise는 그렇지 않다, Promise를 선언해놓으면 then을 하지 않더라도 call stack이 비워진 시점에 수행될 것이고, 후에 then을 하게 되면 resolve 여부에 따라 바로 수행되거나 resolve가 될 때까지 기다리게 될 것이다 (Pending -&gt; Fulfilled)</p><p>이러한 지점은 Promise에 대한 제대로 된 이해없이 async/await으로 곧장 넘어가게 되면 쉽게 간과할 수 있는 부분들이다, 비동기를 기다리기 위해서 무조건적으로 await을 사용할 것이 아니라 먼저 then 없이 선언하는 것을 통해 작업이 수행되도록 하고, 해당 비동기 로직과 의존성이 없는 작업들을 먼저 수행하고, 의존성이 발생한 지점에는 then이든 await이든 활용하여 기다린 후 해당 작업이 수행되도록 하는 것이 훨씬 좋은 전략이라고 생각된다</p><p>왜냐하면 브라우저의 렌더링도 다른 자바스크립트 로직들과 함께 싱글 스레드의 call stack을 통해 처리될 것이므로 이러한 유연성을 갖출 수 있다는 것은 보다 유려한 UI/UX를 만들 수 있도록 해줄 것이기 때문이다</p><p>그렇게 했을 때만 비동기라는 이름에 걸맞게, 왼쪽이 아닌 오른쪽과 같이 처리할 수 있다</p><p><img src="http://www.nextree.co.kr/content/images/2016/09/syhan_140320_node1_031-1024x369.png" alt="img"></p><p>async : executor가 내장된 generator<br>await : executor와 상호작용하는 yield의 결과를 받아옴<br>async await = generator + promise<br>async는 promise로 await을 소비<br>await는 봉화대 로직이기 때문에, 병렬성을 처리하려면 Promise.all 에 걸어주면 된다</p><p>또한 async는 Promise로 래핑된 값을 반환한다 (return 값은 then을 통해 넘겨받을 수 있다), 따라서 new Promise 또는 Promise.resolve() 외에도 async function를 통해서도 Promise를 만들어낼 수 있다</p><p>await은 다음에 나오는 문의 값이 Promise라면 fulfill된 값, 그렇지 않다면 해당 값을 <code>resolved Promise</code>로 변환시킨다</p><p>async/await을 사용했을 때 유용한 케이스는 resolved value를 변수에 담고자 할 때, 에러 처리, 조건문, 디버깅 등이다 (<a href="https://engineering.huiseoul.com/자바스크립트는-어떻게-작동하는가-이벤트-루프와-비동기-프로그래밍의-부상-async-await을-이용한-코딩-팁-다섯-가지-df65ffb4e7e" target="_blank" rel="noopener">자바스크립트는 어떻게 작동하는가: 이벤트 루프와 비동기 프로그래밍의 부상, async/await을 이용한 코딩 팁 다섯 가지</a>)</p><p>여러 Promise들이 모두 완료되길 기다려야 한다면 <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise/all" target="_blank" rel="noopener">Promise.all()</a>를, 타임아웃과 같은 처리를 하고 싶다면 <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise/race" target="_blank" rel="noopener">Promise.race()</a>를 활용하면 된다</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md" target="_blank" rel="noopener">States and Fates</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Using_promises" target="_blank" rel="noopener">Using promises</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">Promise</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noopener">async function</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/await" target="_blank" rel="noopener">await</a></li><li><a href="https://medium.com/@kiwanjung/번역-async-await-를-사용하기-전에-promise를-이해하기-955dbac2c4a4" target="_blank" rel="noopener">async/await 를 사용하기 전에 promise를 이해하기</a></li><li><a href="https://www.youtube.com/watch?v=j0Viy3v97gY" target="_blank" rel="noopener">자바스크립트 개념잡기: 콜백 함수의 동기적 실행과 비동기적 실행</a></li><li><a href="https://www.youtube.com/watch?v=CA5EDD4Hjz4" target="_blank" rel="noopener">자바스크립트 promise? 나도 써보자, 기본 개념부터~</a></li><li><a href="https://www.youtube.com/watch?v=JzXjB6L99N4" target="_blank" rel="noopener">자바스크립트 async / await? 나도 써보자, 기본 개념부터~</a></li><li><a href="https://medium.com/@nemo1275/callback이-뭐죠-5f3c0cc4efce" target="_blank" rel="noopener">Callback이 뭐죠?</a></li><li><a href="https://medium.com/@nemo1275/promise가-뭐죠-fdf7de2bc0bf" target="_blank" rel="noopener">Promise가 뭐죠?</a></li><li><a href="https://medium.com/@nemo1275/await가-뭐죠-1332622df251" target="_blank" rel="noopener">await가 뭐죠?</a></li><li><a href="https://joshua1988.github.io/web-development/javascript/javascript-asynchronous-operation/" target="_blank" rel="noopener">자바스크립트 비동기 처리와 콜백 함수</a></li><li><a href="https://joshua1988.github.io/web-development/javascript/promise-for-beginners/" target="_blank" rel="noopener">자바스크립트 Promise 쉽게 이해하기</a></li><li><a href="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-promise-27fc71e77261" target="_blank" rel="noopener">Master the JavaScript Interview: What is a Promise?</a></li><li><a href="http://satisfactoryplace.tistory.com/18" target="_blank" rel="noopener">콜백 함수(Callback)의 정확한 의미는 무엇일까?</a></li><li><a href="http://www.ktword.co.kr/abbr_view.php?m_temp1=3581" target="_blank" rel="noopener">Callback</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Async-비동기&quot;&gt;&lt;a href=&quot;#Async-비동기&quot; class=&quot;headerlink&quot; title=&quot;Async (= 비동기)&quot;&gt;&lt;/a&gt;Async (= 비동기)&lt;/h2&gt;&lt;p&gt;Async란 무엇인가? Sub routine이 callback
      
    
    </summary>
    
      <category term="JS" scheme="https://eclatant.io/categories/JS/"/>
    
    
      <category term="JS" scheme="https://eclatant.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Block, NonBlock, Sync, Async</title>
    <link href="https://eclatant.io/2018/12/09/2018-12-09-Block-NonBlock-Sync-Async/"/>
    <id>https://eclatant.io/2018/12/09/2018-12-09-Block-NonBlock-Sync-Async/</id>
    <published>2018-12-08T15:00:00.000Z</published>
    <updated>2018-12-10T07:31:00.175Z</updated>
    
    <content type="html"><![CDATA[<p>Block : Flow를 막고 있는 것 / NonBlock : Sub routine이 즉시 Flow 제어권을 내놓는 것</p><p>Blocking에 대한 요구사항은 내가 만들고자 하는 애플리케이션이 속한 업계마다 다를 것, 전화통화를 처리해야 한다면 Blocking에 대한 요구사항이 대단히 높을 것, 이 외에도 브라우저는 5초 등 OS 레벨에서 제한을 두는 경우도 있다, Blocking 시에는 멈춰져있지만 OS에서 제어하는 영역 내에서 실행되는 코드들은 OS가 강제 중단이 얼마든지 가능하다, 스마트폰에서 전화가 오면 그 어떤 동작보다 우선할 수 있는 것도 동일한 원리, Window에서 blue screen이 뜨는 것은 애플리케이션을 잘못 만든 경우인 것이 다반사이고, MacOS에서는 OS에서 제어할 수 있는 영역만 쓸 수 있게 하므로 권한이 제한되어있어 그런 경우가 없어 보이는 것일 뿐이다</p><p>Blocking Function 여부는 우리가 함수에 어떤 인자를 전달하느냐에 따라 블록킹 현상이 심해지느냐에 달려있다</p><p>weakset 자료구조를 사용하면 담겨있는 값의 개수와 무관하게 값이 담겨있는지 여부를 확인하는데 소요되는 비용이 같으므로 이런 식의 접근 방법이 필요할 것</p><p>일부가 Blocking Function인 것만으로도 애플리케이션 전체가 Blocking에 빠질 수 있다, Blocking의 조합으로 인한 결과는 예측할 수 없다</p><p>안타깝게도 우리가 짜는 대부분의 로직은 흔히 Blocking이기 마련이다</p><p>엔터프라이즈 레벨을 지향한다는 것의 첫 걸음은 하나의 함수를 짤 때라도 Blocking Function이 아니도록 하는 것</p><p>배열 순회, 정렬은 배열 크기에 따라, DOM 순회는 DOM의 하위구조에 따라, 이미지 프로세싱은 이미지 크기에 따라 Blocking을 유발할 것</p><p>개발자가 되기 위해 6년에 걸쳐서 의사가 된다는 마음가짐으로 임한다면 함부로 Blocking Function을 짜지 못할 것</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="params">v</span> =&gt;</span> other(something(v), v * <span class="number">2</span>); f(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>위와 같은 코드가 있을 때, Blocking 여부를 예측할 수 있는가?</p><p>Blocking으로 인한 에러는 로그를 찍어보기도 전에 애플리케이션이 죽기 때문에 파악하기도 대단히 어려울 것</p><p>Blocking 회피방법</p><ul><li>시분한 운영체제의 동시 실행 : 순차적인 실행에 비해 컨텍스트 스위칭으로 인해 훨씬 오래 걸림</li><li>자바스크립트 쓰레드<ul><li>자바스크립트는 싱글 쓰레드라고 알려져있지만 그렇지 않다, UI와 자바스크립트를 처리하는 쓰레드가 싱글일 뿐, 하지만 현대의 대부분 OS는 UI를 변경하거나 메인 스크립트를 구동하는 쓰레드를 싱글 쓰레드로 제약한다, 그리고 그 해당 쓰레드를 감시한다</li><li>HTML5 스펙에는 우리가 직접 Background로 사용할 수 있는 Web Worker Thread가 존재함</li><li>자바스크립트 쓰레드는 무한루프를 돌고 있고 배열을 바라보고 있다, 해당 배열에 쌓이는 명령들에 언제 실행되어야 할지에 대한 프레임이 붙는다, 루프가 한 번 돌 때마다 1틱이 진행된다, 그러므로 메인 쓰레드는 명령큐에 있는 프레임들을 실행할 뿐이고, 그 외 쓰레드들에서 명령큐에 명령들을 프레임에 따라 담아둔다, 이러한 패턴을 서스펜션 패턴이라고 부른다, 다수의 공급자 쓰레드와 소비자 쓰레드를 나누어 중간에 명령큐와 같은 쿠션층을 만들어서 공급자는 쓰기만 하고 소비자는 해당하는 프레임마다 꺼내서 읽기(소비 및 명령 수행)만 한다, 따라서 메인 쓰레드가 하나의 명령을 꺼내서 처리하는 시간이 5초 이내여야 한다, 자바스크립트에서는 기본적으로 회피방식은 타임슬라이싱을 통해 여러 쓰레드에 스프레드시키는 것</li></ul></li></ul><p>Sync, Async</p><p>Sync : Sub-routine이 값을 반환함 / Async : Sub routine이 callback을 통해 값을 반환함</p><p>Blocking과 NonBlock은 Flow상으로는 동기적으로 수행되므로 큰 혼란이 없는 반면에 Sync, Async는 Flow를 어긋나게 만드므로 이해하기 쉽지 않다</p><p>Sync 코드 예시 (Sync NonBlock 의 결과값을 조사하는 것도 NonBlock해야 한다)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Block</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) sum += i;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// NonBlock</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> result = &#123; <span class="attr">isComplete</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">  requestAnimationFrame(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) sum += i;</span><br><span class="line">    result.isComplete = <span class="literal">true</span>;</span><br><span class="line">    result.value = sum;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = sum(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">const</span> id = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (result.isComplete) &#123;</span><br><span class="line">    clearInterval(id);</span><br><span class="line">    <span class="built_in">console</span>.log(result.value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>Async 코드 예시 (Async라고 해서 Block을 일으키지 않는 것이 아니다, 우리의 요구사항 내에 얼마나 빨리 Flow를 반환해주는지가 중요)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Block</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">n, f</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) sum += i;</span><br><span class="line">  f(sum);</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">100</span>, <span class="built_in">console</span>.log);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">123</span>); <span class="comment">// 출력 순서 55 -&gt; 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// NonBlock</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">  requestAnimationFrame(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) sum += i;</span><br><span class="line">    f(sum);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">10</span>, <span class="built_in">console</span>.log);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">123</span>); <span class="comment">// 출력 순서 123 -&gt; 55</span></span><br></pre></td></tr></table></figure><p>위 네 가지 중에서 최악의 경우는 Async Block이다, Blocking을 일으키면서 직접적인 return도 하지 않기 때문이다, 테스트나 디버깅도 매우 어려워진다</p><p>Async의 경우 코드가 널뛰기에 가독성이 떨어지므로 Promise 등을 사용해서 chaining을 하여 Flow를 인식하기 편하도록 한다, Modern API는 Non Block시에 콜백을 리턴하는 것이 아니라 Promise를 리턴하는 것도 동일한 사유이지만, 결국 콜백을 리턴하는 것과 같은 맥락에 있다 (콜백과 달리 반쯤 제어권을 가져올 수 있다는 점에서는 분명한 차이가 존재한다)</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://www.youtube.com/watch?v=BJtPmXiFnS4" target="_blank" rel="noopener">코드스피츠77 - ES6+ 기초편 5회차</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Block : Flow를 막고 있는 것 / NonBlock : Sub routine이 즉시 Flow 제어권을 내놓는 것&lt;/p&gt;
&lt;p&gt;Blocking에 대한 요구사항은 내가 만들고자 하는 애플리케이션이 속한 업계마다 다를 것, 전화통화를 처리해야 
      
    
    </summary>
    
      <category term="JS" scheme="https://eclatant.io/categories/JS/"/>
    
    
      <category term="JS" scheme="https://eclatant.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Cookie || Web Storage</title>
    <link href="https://eclatant.io/2018/12/09/2018-12-09-Cookie-Web-Storage/"/>
    <id>https://eclatant.io/2018/12/09/2018-12-09-Cookie-Web-Storage/</id>
    <published>2018-12-08T15:00:00.000Z</published>
    <updated>2018-12-09T14:55:53.436Z</updated>
    
    <content type="html"><![CDATA[<h3 id="쿠키-로컬스토리지-세션스토리지"><a href="#쿠키-로컬스토리지-세션스토리지" class="headerlink" title="쿠키, 로컬스토리지, 세션스토리지"></a>쿠키, 로컬스토리지, 세션스토리지</h3><h4 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h4><p>우선 Cookie와 Web Storage 두 가지로 나뉘지만 그 이전에 사용해야 하는 이유가 중요할 것이다</p><p>HTTP 프로토콜 특징상 Stateless이므로 상태 정보를 유지하지 않는다</p><p>그러나 웹 애플리케이션을 만들다보면 로그인과 같이 상태 정보가 필요한 때가 있다 (세션 관리, 개인화, 트래킹)</p><h4 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h4><h5 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h5><p>client local에 저장되는 key/value로 이루어진 file이다</p><p>요청시 cookie가 없다면 webpage를 response로 받으면서 cookie를 client local에 저장하고, 요청시 cookie가 있다면 request에 Cookie header를 통해 cookie도 함께 전송한다</p><p>response header에 Set-Cookie 속성을 이용하면 쿠키를 만들 수 있다</p><p>단점</p><ul><li>총 300개까지 cookie를 저장할 수 있고, 하나의 도메인당 20개의 값만 가질 수 있으며 하나당 4kb만 저장할 수 있다</li><li>매 HTTP 요청마다 포함되어 전달되므로 퍼포먼스상 좋지는 않다</li><li>별도의 암호화 없이 전달되므로 감청을 당할시 위험할 수 있다</li></ul><h5 id="Web-Storage"><a href="#Web-Storage" class="headerlink" title="Web Storage"></a>Web Storage</h5><p>cookie와 달리 서버로 자동 전송되지 않는다</p><p>local storage와 session storage의 차이는 데이터가 소멸하는 시점이다, session storage는 세션이 종료되면 즉 브라우저의 탭이 꺼지면 데이터가 사라지지만 local storage는 별도로 삭제하거나 브라우저에 의해 비활성화되지 않는다면 사용가능하다</p><p>각각 window에 포함되어있는 localStorage 와 sessionStorage 를 통해 활용할 수 있다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">localStorage.setItem(<span class="string">'myCat'</span>, <span class="string">'Tom'</span>);</span><br><span class="line"></span><br><span class="line">sessionStorage.setItem(<span class="string">'myCat'</span>, <span class="string">'Tom'</span>);</span><br><span class="line">sessionStorage.getItem(<span class="string">"autosave"</span>)</span><br></pre></td></tr></table></figure><p>참고 사이트</p><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Cookies#세션_쿠키" target="_blank" rel="noopener">MDN HTTP 쿠키</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API" target="_blank" rel="noopener">Web Storage API 사용하기</a></li><li><a href="https://jeong-pro.tistory.com/80" target="_blank" rel="noopener">쿠키와 세션의 차이, 용도, 사용법(cookie,session)</a></li><li><a href="https://isme2n.github.io/devlog/2017/06/21/storage-cookie/" target="_blank" rel="noopener">로컬스토리지, 세션스토리지 그리고 쿠키</a></li><li><a href="https://www.zerocho.com/category/HTML/post/5918515b1ed39f00182d3048" target="_blank" rel="noopener">로컬스토리지, 세션스토리지</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;쿠키-로컬스토리지-세션스토리지&quot;&gt;&lt;a href=&quot;#쿠키-로컬스토리지-세션스토리지&quot; class=&quot;headerlink&quot; title=&quot;쿠키, 로컬스토리지, 세션스토리지&quot;&gt;&lt;/a&gt;쿠키, 로컬스토리지, 세션스토리지&lt;/h3&gt;&lt;h4 id=&quot;Why&quot;&gt;
      
    
    </summary>
    
      <category term="Dev" scheme="https://eclatant.io/categories/Dev/"/>
    
    
      <category term="Dev" scheme="https://eclatant.io/tags/Dev/"/>
    
  </entry>
  
  <entry>
    <title>이벤트 델리게이션</title>
    <link href="https://eclatant.io/2018/12/09/2018-12-09-Event-Delegation/"/>
    <id>https://eclatant.io/2018/12/09/2018-12-09-Event-Delegation/</id>
    <published>2018-12-08T15:00:00.000Z</published>
    <updated>2018-12-10T03:46:41.543Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h3><ul><li>Javascript Event<ul><li>addEventListener<ul><li>Event Delegation</li></ul></li><li>Event Bubbling, Event Capturing<ul><li>Event Object</li></ul></li><li>Event Target</li></ul></li></ul><hr><h3 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h3><p>SPA 이전 웹사이트들에서 자바스크립트의 중요한 역할은 웹사이트의 동작을 구현하는 것입니다. 여기서 말하는 동작은 애니메이션이 아닌, 동적인 상호작용을 뜻합니다. (애니메이션은 CSS3의 역할이라고 생각합니다.)</p><p>위와 같은 동적인 상호작용을 <code>Event</code>라고 지칭합니다. 사용자의 이벤트 요청을 받아들이기 위해서는 사용자의 이벤트 요청을 받아들이기 위한 장치를 마련해두어야 합니다.</p><p>이를 위한 가장 일반적인 방법이 <code>addEventListener()</code>입니다. <code>addEventListener()</code>의 대상이 될 수 있는 <code>EventTarget</code>은 <code>Element</code>, <code>Document</code>, <code>Window</code>와 같은 이벤트를 지원하는 객체입니다. 일반적으로는 <code>document.querySelector()</code>를 통해 특정 <code>Element</code>를 지칭하여 <code>addEventListener()</code>를 호출합니다.</p><p>IE9부터 사용 가능한 <code>addEventListener()</code>는 다음과 같은 인자를 갖고 있습니다. <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener" target="_blank" rel="noopener">addEventListener MDN</a></p><p><code>type</code>, <code>listener</code>, <code>options || useCapture</code>, <code>wantsUntrusted</code></p><ul><li><code>type</code></li></ul><p><code>EventTarget</code>에 어떤 <code>Event</code>가 일어났을 때, <code>listener parameter</code>를 호출할지 결정하는 문자열입니다. 어떤 종류가 있는지는 다음 페이지에서 확인할 수 있습니다. <a href="https://developer.mozilla.org/en-US/docs/Web/Events" target="_blank" rel="noopener">Event reference MDN</a> 일반적으로 많이 사용하는 것은 <code>click</code>, <code>load</code> 등입니다.</p><ul><li><code>listener()</code></li></ul><p><code>type</code>에서 정의한 <code>event</code>가 발생했을 때 호출될 객체입니다. 일반적으로 자바스크립트 함수로 합니다. 이 함수를 웹 브라우저가 호출하면서 인수로 <code>Event</code> 객체를 넘겨줍니다. 이 인자를 일반적으로 <code>e</code> 또는 <code>event</code>로 정의합니다. 가장 많이 사용하는 것은 <code>Event</code> 의 target property입니다.</p><p><code>listener</code>가 <code>return false</code>를 반환할 경우, <code>preventDefault()</code>를 한 것과 동일한 효과를 보입니다. <code>preventDefault()</code>는 해당 <code>Node</code>의 기본 동작을 막는 함수입니다. 예를 들어 <code>&lt;a&gt;</code>에서 <code>EventListener</code>가 호출되었을 때는 <code>listener</code>와 더불어 <code>&lt;a&gt;</code>의 본래 역할인 URL 연결도 수행하는데, 이를 막을 수 있습니다.</p><ul><li><code>options</code> <code>||</code>  <code>useCapture</code></li></ul><p>인수가 <code>object</code>이면 options를, <code>boolean</code>을 넘겨주면 useCapture로 인식합니다. <a href="https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#eventlisteneroptions" target="_blank" rel="noopener">WICG Link</a></p><ul><li><code>useCaputre</code>일 때 (default <code>false</code>)</li></ul><p>이 인자는 <code>Capture Phase</code>일 때의 <code>Event</code> 수신 여부를 결정합니다.</p><p>false일 경우 이벤트가 발생한 <code>node</code>로부터 <code>window</code>까지 <code>Event</code>가 전파되는 시점에 <code>Event</code>를 받게 됩니다. <code>Event Bubbling</code>이라고 합니다.</p><p>true일 경우 <code>Window</code>부터 이벤트가 발생한 <code>node</code>까지 <code>Event</code>가 전파되는 시점에 <code>Event</code>를 받게 됩니다. 이것을 <code>Event Capturing</code>이라고 합니다.</p><ul><li><code>options</code>일 때</li></ul><p><code>capture</code>: <code>Capturing</code> 유무</p><p><code>once</code>: <code>true</code>를 넘겨주면, <code>EventListener</code>를 일회성으로 만들 수 있습니다.</p><p><code>passive</code>: <code>listener</code>에서의 <code>preventDefault</code> 호출 허용 여부를 결정합니다.</p><p><code>mozSystemGroup</code></p><p><img src="https://www.w3.org/TR/DOM-Level-3-Events/images/eventflow.svg" alt="img"></p><p><a href="https://codepen.io/jeewhan/pen/XeaXGJ" target="_blank" rel="noopener">Codepen 예제</a></p><hr><p>그렇다면 왜 이벤트 위임을 해야 하는가?</p><p>하나의 부모 <code>Node</code> 밑에 있는 자식 <code>Node</code>들이 있다고 가정해보겠습니다. 해당 자식 <code>Node</code>들은 모두 동일한 <code>Event</code>를 발생시키길 기대합니다.</p><p>이벤트 위임을 하지 않을 경우, 자식 <code>Node</code>마다 <code>Event Listener</code>를 추가해주어야 하는 것은 물론, 이후에 자식 <code>Node</code>가 늘어날 때마다 <code>Event Listener</code>도 추가해주어야 합니다. 이렇게 하게 되면 성능도 안 좋겠지만, 프로그래머 입장에서도 매우 번거롭습니다.</p><p>그래서 자식 <code>Node</code>마다 <code>Event Listener</code>를 부여하지 않고, 그들의 부모 <code>Node</code>에게만 <code>Event Listener</code>를 부여하고, 자식에서 발생하는 <code>Event</code>를 받아 처리하도록 하는 것을  이벤트 위임이라고 합니다. 그러면 자식 <code>Node</code>가 늘어날 때마다 <code>Event Listener</code>를 늘릴 필요없이 부모의 <code>Event Listener</code>의 <code>listener</code>에 분기 처리만 해주면 됩니다.</p><p>이벤트 위임에는 당연히 이벤트 전파가 전제되어 있습니다. 따라서 프로그래머가 의도한 방향대로 동작하게 하려면 이벤트 전파를 제어할 수 있어야 합니다. 그러기 위해서 <code>stopPropagation()</code> <code>stopImmediatePropagation()</code> 를 사용할 수 있습니다.</p><ul><li><code>stopPropagation()</code><br><code>Event</code>가 <code>Parent Node</code>로 전파되지 않도록 합니다. 이 함수의 적용 시점은 <code>Bubbling Phase</code>이기에, <code>Capture</code>와는 무관합니다.</li></ul><ul><li><code>stopImmediatePropagation()</code><br><code>stopPropagation()</code>와 더불어 <code>Sibling Node</code>에게도 <code>Event</code>가 전달되지 않도록 합니다.</li></ul><hr><p>Capture Phase 관련해서 착각해서는 안 되는 점은 위 그림에서 td tag에 있는 event listener는 도착한 시점에만 발생한다는 점입니다. td가 아닌 tr을 클릭했을 경우 td에 대한 capturing option의 event listener일지라도 호출되지 않습니다. 다만 tr 관련해서 td에 이벤트 위임을 해두었다면 td를 클릭하는 것만으로도 td의 event listener가 호출되겠지만, event target이 td일 것이므로 tr의 event handler는 호출되지 않을 것입니다.</p><hr><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="http://programmingsummaries.tistory.com/313" target="_blank" rel="noopener">Javascript에서 이벤트 전파를 중단하는 네 가지 방법</a></li><li><a href="https://github.com/nhnent/fe.javascript/wiki/August-22-August-26,-2016" target="_blank" rel="noopener">왜 이벤트 위임(delegation)을 해야 하는가?</a></li><li><a href="http://poiemaweb.com/js-event" target="_blank" rel="noopener">PoiemaWeb Javascript Event</a></li></ul><p>관련하여 매우 좋은 글이 있어 공유해봅니다</p><p><a href="https://joshua1988.github.io/web-development/javascript/event-propagation-delegation/" target="_blank" rel="noopener">이벤트 버블링, 이벤트 캡처 그리고 이벤트 위임까지</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Concept&quot;&gt;&lt;a href=&quot;#Concept&quot; class=&quot;headerlink&quot; title=&quot;Concept&quot;&gt;&lt;/a&gt;Concept&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Javascript Event&lt;ul&gt;
&lt;li&gt;addEventListener&lt;ul
      
    
    </summary>
    
      <category term="JS" scheme="https://eclatant.io/categories/JS/"/>
    
    
      <category term="JS" scheme="https://eclatant.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>이번 주에 접했던 것들 #3 : 18-12-02</title>
    <link href="https://eclatant.io/2018/12/02/2018-12-02-WeeklyHistory/"/>
    <id>https://eclatant.io/2018/12/02/2018-12-02-WeeklyHistory/</id>
    <published>2018-12-01T15:00:00.000Z</published>
    <updated>2018-12-02T13:59:47.908Z</updated>
    
    <content type="html"><![CDATA[<h3 id="WebStorm"><a href="#WebStorm" class="headerlink" title="WebStorm"></a>WebStorm</h3><p>JSX 관련 설정은 XML 형식에서 가져온다</p><p>알트탭을 통해 화면 전환을 했을 때 file watcher가 자동 저장을 하지 않도록 하려면 save files on frame deactivation 를 해제해야 한다</p><p>cmd + delete 를 통해 라인이 삭제되는 것이 아니라 VSCode와 같이 내용만 사라지고 라인이 유지되길 원한다면 keymap에서 Delete Line이 아닌 Delete to Line Start 으로 수정해야 한다</p><p>node.js의 require 나 jest의 describe 관련하여 undefined 표시가 나온다면, Language &amp; Frameworks &gt; JavaScript &gt; Libraries 에서 DOWNLOAD 해보길 권한다</p><h3 id="프론트엔드-개발자-취업을-위해-숙지해야-할-키워드들"><a href="#프론트엔드-개발자-취업을-위해-숙지해야-할-키워드들" class="headerlink" title="프론트엔드 개발자 취업을 위해 숙지해야 할 키워드들"></a>프론트엔드 개발자 취업을 위해 숙지해야 할 키워드들</h3><p>조만간 아래 키워드들을 포함하여 글을 작성해볼 생각이다</p><ul><li>이력 또는 선택 관련 사유 (개인의 커리어, 기술 스택 모두)</li><li>this</li><li>closure + 단점</li><li>currying</li><li>Pure Function</li><li>First Class Function</li><li>Higher Order Function</li><li>Webpack</li><li>Latency</li><li>Lazy Loading</li><li>setTimeout + console.log</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;WebStorm&quot;&gt;&lt;a href=&quot;#WebStorm&quot; class=&quot;headerlink&quot; title=&quot;WebStorm&quot;&gt;&lt;/a&gt;WebStorm&lt;/h3&gt;&lt;p&gt;JSX 관련 설정은 XML 형식에서 가져온다&lt;/p&gt;
&lt;p&gt;알트탭을 통해 화면 전환을
      
    
    </summary>
    
      <category term="Dev" scheme="https://eclatant.io/categories/Dev/"/>
    
    
      <category term="Dev" scheme="https://eclatant.io/tags/Dev/"/>
    
  </entry>
  
  <entry>
    <title>Moida-FE #0 : 18-11-26</title>
    <link href="https://eclatant.io/2018/11/26/2018-11-26-MoidaFE-0/"/>
    <id>https://eclatant.io/2018/11/26/2018-11-26-MoidaFE-0/</id>
    <published>2018-11-25T15:00:00.000Z</published>
    <updated>2018-11-25T17:11:58.929Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>프로젝트 진행중에는 수필 형식으로 개발일지를 남기게 될 것 같고, 개발이 어느 정도 완료된 뒤에 독자를 위한 형식의 글을 작성할 예정입니다.</p></blockquote><p>여러 가지 동인들로 인해 지인 분(이하 동료 분)과 사이드 프로젝트를 하기로 하였다.</p><p><a href="https://ppss.kr/archives/16682" target="_blank" rel="noopener">글쓰기가 안 되는 분들을 위한 4단계 작문법</a> 을 보면서 많은 것을 내려놓기로 결심하였고, 코딩이든 기획이든 시작은 정신병자처럼 해야 한다고 되내이고 있다. (글 내내 나올 정신병자 라는 표현은 여기서 가져왔다.)</p><p>내 좁은 이해로는 애자일에서 추구하는 방향도 비슷할 것이라 생각하고, 예전에 인상 깊게 보았던 아티클인 <a href="https://medium.com/@hongkevin/개발을-시작-할-때-알면-좋은-것들-c769cddfd993" target="_blank" rel="noopener">[개발을 시작]할 때 알면 좋은 것들</a> 도 마찬가지 의미로 이해되었다.</p><p>그래서 예전과 다르게 생각난 그대로, 일단 기획안을 작성하고 동료 분께 공유를 했다.</p><hr><h3 id="Moida"><a href="#Moida" class="headerlink" title="Moida"></a>Moida</h3><p>글쓰기 || 스터디 모임 플랫폼</p><p>RSS를 통해 글을 받아온다</p><p>받아온 정보를 가로 형태의 배너를 통해 보여준다</p><p>지나간 글을 편하게 볼 수 있도록 각종 필터</p><p>게시물 별로 댓글 작성이 가능하다</p><p>게시물 별로 체크리스트 작성이 가능하다</p><ul><li>체크리스트는 익명으로 이루어진다</li><li>항목은 성윤님의 가이드를 따른다 (Yes or No, 충족 || 개선필요)</li><li>항목별 평균과 작성자의 체크사항을 보여준다</li><li>자기 자신도 작성해야 한다</li><li>어느 시점에 작성했는지도 함께 기록하여 어느 버전을 보고 작성한 것인지 유추할 수 있도록 한다</li></ul><p>같은 조이면 댓글과 피드백을 필수로 달도록, 달지 않은 것을 상단에 계속 노출시킨다</p><p>글 제출 주기를 설정할 수 있으며 이 일정은 구글 캘린더로 export할 수 있다</p><p>대시보드를 통해 내가 속한 그룹(글또) / 파티(프론트엔드) 관련 정보를 볼 수 있다</p><p>페이스북 로그인</p><p>디파짓 정산 기능</p><p>별도의 랜딩페이지 없고, 페이스북 로그인으로만 지원할 것이니 로그인/회원가입 페이지 불필요</p><p>화면은 메인(+ 체크리스트 폼 모달), 대시보드</p><p>네비바 : 글, 대시보드, 로그인/회원가입 || 로그아웃</p><p>디자인은 이 사이트와 유사한 형태 (사진 제외)</p><ul><li><a href="https://blog.digitalocean.com/" target="_blank" rel="noopener">The DigitalOcean Blog</a></li><li><a href="https://flipboard.com/" target="_blank" rel="noopener">Flipboard</a></li></ul><hr><p>다행히 요구사항이 재미있다는 피드백이 왔다.</p><p>여태까지 해왔던 타인과 함께 하는 모든 프로젝트에서 생겼던 문제들은 모두 커뮤니케이션이었지, 능력과 관련한 부분이 아니었음을 다시 한 번 떠올리게 되었다.</p><p>사람들은 엄청난 퀄리티의 무엇인가를 내게 기대하지 않으며, 따라서 내가 할 수 있는 최선은 늦지 않게 그들에게 내 생각을 전달하는 것이다.</p><p>또한 내가 정신병자라고 생각하는 퀄리티일지라도, 엄청난 사회적 문제가 생길 정도는 아니다.</p><p>원래 꼭 만들고 싶었던 프로젝트 주제를 자신이 없어서 몇 달이나 미루다가 누군가가 만들어서 출시했을 때를 떠올려보면, 만약 처음부터 일단 만들어보는 시도를 했다면 지금 뭔가는 분명 달라졌을 것이다.</p><p>그러니 무엇이든 퀄리티보단 우선 미루지 않고 시도하는 것에 최우선 순위를 두자.</p><hr><p>What을 조금 정했으니 How가 중요할 것이다.</p><p>Vanila로 만들까 라는 생각을 0.5초 정도 했었던 것 같은데, Why를 떠올려보고 바로 생각을 접고 React로 정했다.</p><p>이 프로젝트를 하는 Why는 무엇인가? FE개발자가 되기 위한, 훈련과 포트폴리오이다.</p><p>사실 내 개인의 만족을 위해서는 기존에 만들던 FP Library를 좀 더 이어서 작업하는 것이 더 좋았을 것이다.</p><p>그런데 인생을 돌이켜보니 +를 늘리는 것보다는 -를 줄이는 것이 더 중요하더라.</p><p>최인철 교수에 따르면 행복의 3요소는 자유, 유능, 관계 라고 한다. <a href="https://www.youtube.com/watch?v=f7OLwHFz4MU" target="_blank" rel="noopener">행복에 관하여</a></p><p>나는 여기에서 유능이 가장 선행되어야 하고, 유능해야 자유와 관계를 가질 수 있다고 생각한다.</p><p>그렇다면 내가 쌓고 싶은 실력이 개발자 커뮤니티에서 메이저가 아니라면 타인을 설득하는데 힘이 너무 많이 들 것이므로 지금 내 시점에는 어울리지 않을 것이다.</p><p>그렇다면 일반적인 JD에서 가장 많이 언급되는 것을 우선적으로 충족시켜야 할 것이다.</p><p>그러면 자연스럽게 기술 스택이 정해진다. React, Redux, Redux-Saga</p><p>개인적으로 사용 경험은 Mobx-State-Tree만 있고, 해당 기술에서 불만사항을 느껴본 적이 없고 심지어 MST가 Redux보다 좋다고 생각한다. 또한 작년에 Redux가 너무 어려워서 포기했었다. 하지만 그럼에도 대부분의 회사에선 Redux를 사용하므로 내 선호는 그다지 중요하지 않을 것이다. (이렇게 된 것은 순전히 출시 시점과 그에 따른 관성 때문이라고 생각한다.)</p><p>Redux-Saga이냐 Redux-Observable이냐도 마찬가지다. 물론 나중에 면접관이 물어보았을 때 <code>JD에 많이 나와서..</code> 라고 답할 수는 없으므로 <a href="https://shift.infinite.red/redux-observable-epics-vs-redux-sagas-8e53610c0eda" target="_blank" rel="noopener">Redux-Observable Epics vs Redux-Sagas</a> 와 같은 아티클을 통해 저 기술들이 가지고 있는 캐치프라이즈나 핵심적 컨셉 등에 대한 이해는 필요할 것이지만, 가장 실질적인 이유는 회사에서 그나마 많이 쓰더라 이다. (당신이 사용해본 Redux 미들웨어는 무엇인가요? 그 Redux 미들웨어를 사용한 이유는 무엇인가요?)</p><hr><p>멘토로 모시는 분 중 한 분이 내게 이런 말씀을 하셨다.</p><p><code>정보수집을 멈추고 개발에 전념하시면 실력이 금방 느실 것입니다.</code></p><p>평소에 나는 정신병자처럼 하지 못하는 사람이기에 정보수집만 하고 실제 행동으로 옮기지 못하는 사람이었는데, 이번 프로젝트는 시행착오 자체를 줄이기 보다는 시행착오를 경험하는 것에 포커싱을 두자고 생각했다.</p><p>그래서 전과 달리 너무 많은 아티클을 미리 참고하지는 않으려고 한다.</p><p>이번 주는 아래 아티클들을 접했다.</p><p><a href="https://eclatant.io/2018/11/25/2018-11-25-SearchHistory/">이번 주에 검색했던 것들 #2 : 18-11-25</a></p><p>다음 주 목표는 아래와 같다.</p><ul><li><p>[ ] <a href="https://github.com/Knowre-Dev/WebDevCurriculum" target="_blank" rel="noopener">Knowre web development curriculum 2018</a></p></li><li><p>[ ] 프론트엔드 개발 시작하기 HTML ~ CSS</p></li><li><p>[ ] <a href="https://velog.io/@velopert/react-component-styling" target="_blank" rel="noopener">다양한 방식의 리액트 컴포넌트 스타일링 방식 CSS, Sass, CSS Module, styled-components</a></p></li><li><p>[ ] <a href="https://reacttraining.com/react-router/web/guides/quick-start" target="_blank" rel="noopener">React Router</a></p></li><li><p>[ ] <a href="https://velog.io/@velopert/react-hooks" target="_blank" rel="noopener">리액트의 새로운 기능, Hooks 알아보기</a></p></li><li><p>[ ] <a href="https://velopert.com/3591" target="_blank" rel="noopener">React + Redux 앱 테스트</a></p></li><li><p>[ ] <a href="https://velopert.com/3587" target="_blank" rel="noopener">Jest, Enzyme 을 통한 리액트 컴포넌트 유닛 테스팅</a></p></li><li><p>[ ] <a href="https://www.slideshare.net/OKJSP/okkycon-120498066" target="_blank" rel="noopener">테알못 신입은 어떻게 테스트를 시작했을까?</a></p></li><li><p>[ ] <a href="https://velopert.com/3537" target="_blank" rel="noopener">컴포넌트에 날개를 달아줘, 리액트 Higher-order Component (HoC)</a></p></li><li><p>[ ] <a href="https://velopert.com/3401" target="_blank" rel="noopener">리덕스 미들웨어, 그리고 비동기 작업 (외부데이터 연동)</a></p></li><li><p>[ ] <a href="https://github.com/reactkr/learn-react-in-korean/blob/master/translated/deal-with-async-process-by-redux-saga.md" target="_blank" rel="noopener">redux-saga로 비동기처리와 분투하다</a></p></li><li><p>[ ] <a href="https://youtu.be/UxpREAHZ7Ck?list=PLZl3coZhX98oeg76bUDTagfySnBJin3FE" target="_blank" rel="noopener">Redux-Saga - 제너레이터, 사이드이펙트, 채널</a></p></li></ul><p>음.. 적고 나니 원래의 나로 돌아왔다는 것을 깨달았다. -_-;</p><p>우선 다음 주에 실제로 얼마나 소화하는지를 보고 자체적인 개선을 해보도록 하자.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;프로젝트 진행중에는 수필 형식으로 개발일지를 남기게 될 것 같고, 개발이 어느 정도 완료된 뒤에 독자를 위한 형식의 글을 작성할 예정입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;여러 가지 동인들로 인해 지인 분(이하 동료
      
    
    </summary>
    
      <category term="Dev" scheme="https://eclatant.io/categories/Dev/"/>
    
    
      <category term="Dev" scheme="https://eclatant.io/tags/Dev/"/>
    
  </entry>
  
  <entry>
    <title>이번 주에 접했던 것들 #2 : 18-11-25</title>
    <link href="https://eclatant.io/2018/11/25/2018-11-25-WeeklyHistory/"/>
    <id>https://eclatant.io/2018/11/25/2018-11-25-WeeklyHistory/</id>
    <published>2018-11-24T15:00:00.000Z</published>
    <updated>2018-12-02T13:15:31.013Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ESLint-Prettier"><a href="#ESLint-Prettier" class="headerlink" title="ESLint, Prettier"></a>ESLint, Prettier</h3><p><a href="https://velog.io/@velopert/eslint-and-prettier-in-react" target="_blank" rel="noopener">리액트 프로젝트에 ESLint 와 Prettier 끼얹기</a></p><p>결론 : 위 글을 따라가면 VSCode 사용시에 리액트 프로젝트에 ESLint 와 Prettier를 수월하게 설정할 수 있다</p><h3 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h3><p><a href="https://velog.io/@velopert/redux-or-mobx" target="_blank" rel="noopener">상태 관리 라이브러리의 미학: Redux 또는 MobX 를 통한 상태 관리</a></p><p><a href="https://velog.io/@velopert/Redux-1-소개-및-개념정리-zxjlta8ywt" target="_blank" rel="noopener">Redux (1) 소개 및 개념정리</a></p><p><a href="https://velog.io/@velopert/Redux-2-리액트-없이-쓰는-리덕스-cijltabbd7" target="_blank" rel="noopener">Redux (2) 리액트 없이 쓰는 리덕스</a></p><p><a href="https://velog.io/@velopert/Redux-3-리덕스를-리액트와-함께-사용하기-nvjltahf5e" target="_blank" rel="noopener">Redux (3) 리덕스를 리액트와 함께 사용하기</a></p><p><a href="https://velog.io/@velopert/20180908-1909-작성됨-etjltaigd1" target="_blank" rel="noopener">Redux (4) Immutable.js 혹은 Immer.js 를 사용한 더 쉬운 불변성 관리</a></p><p>결론<br>위 글을 통해 Redux가 어떤 방식의 코드 베이스를 가지고 가는지 이해할 수 있다<br>Redux에 대해 좀 더 깊이있는 설명을 원한다면 다른 자료들을 함께 참고해야겠지만, 실용적으로 빠르게 이해 및 입문해서 사용하고자 한다면 최고의 자료일 것</p><h3 id="Redux-middleware"><a href="#Redux-middleware" class="headerlink" title="Redux-middleware"></a>Redux-middleware</h3><p><a href="https://shift.infinite.red/redux-observable-epics-vs-redux-sagas-8e53610c0eda" target="_blank" rel="noopener">Redux-Observable Epics vs Redux-Sagas</a></p><p>결론<br>저자의 의견은 Redux-Saga, 이 글까지만 읽어보았을 때는 내 생각도 동일하다<br>다른 글들도 좀 더 많이 읽어보고 어느 미들웨어를 선택하든 왜? 에 대한 답을 찾아야 할 것</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ESLint-Prettier&quot;&gt;&lt;a href=&quot;#ESLint-Prettier&quot; class=&quot;headerlink&quot; title=&quot;ESLint, Prettier&quot;&gt;&lt;/a&gt;ESLint, Prettier&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https:/
      
    
    </summary>
    
      <category term="Dev" scheme="https://eclatant.io/categories/Dev/"/>
    
    
      <category term="Dev" scheme="https://eclatant.io/tags/Dev/"/>
    
  </entry>
  
  <entry>
    <title>이번 주에 접했던 것들 #1 : 18-11-18</title>
    <link href="https://eclatant.io/2018/11/18/2018-11-18-WeeklyHistory/"/>
    <id>https://eclatant.io/2018/11/18/2018-11-18-WeeklyHistory/</id>
    <published>2018-11-17T15:00:00.000Z</published>
    <updated>2018-12-02T13:15:18.706Z</updated>
    
    <content type="html"><![CDATA[<h3 id="자바스크립트-Form-객체에-직접-접근"><a href="#자바스크립트-Form-객체에-직접-접근" class="headerlink" title="자바스크립트 : Form 객체에 직접 접근"></a>자바스크립트 : Form 객체에 직접 접근</h3><p><a href="https://developer.mozilla.org/ko/docs/Web/API/Document/forms" target="_blank" rel="noopener">Document.forms</a></p><p>결론 : documents.forms를 통해 현재 document에 존재하는 Form element들이 담긴 collection 을 반환받을 수 있다</p><h3 id="자바스크립트-Symbol-gt-String"><a href="#자바스크립트-Symbol-gt-String" class="headerlink" title="자바스크립트 : Symbol -&gt; String"></a>자바스크립트 : Symbol -&gt; String</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/description" target="_blank" rel="noopener">Symbol.prototype.description</a></p><p>결론 : Math.floor를 사용하세요</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>(<span class="string">"desc"</span>).description); <span class="comment">// "desc"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.iterator.description); <span class="comment">// "Symbol.iterator"</span></span><br></pre></td></tr></table></figure><h3 id="자바스크립트-Object에서-key와-value를-동시에-얻고-싶을-때"><a href="#자바스크립트-Object에서-key와-value를-동시에-얻고-싶을-때" class="headerlink" title="자바스크립트 : Object에서 key와 value를 동시에 얻고 싶을 때"></a>자바스크립트 : Object에서 key와 value를 동시에 얻고 싶을 때</h3><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/entries" target="_blank" rel="noopener">Object.entries()</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(obj)); <span class="comment">// [ ['foo', 'bar'], ['baz', 42] ]</span></span><br></pre></td></tr></table></figure><p>주의사항 : forEach, map, filter, reduce 등과 달리 k, v 조합이다</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;자바스크립트-Form-객체에-직접-접근&quot;&gt;&lt;a href=&quot;#자바스크립트-Form-객체에-직접-접근&quot; class=&quot;headerlink&quot; title=&quot;자바스크립트 : Form 객체에 직접 접근&quot;&gt;&lt;/a&gt;자바스크립트 : Form 객체에 직접 
      
    
    </summary>
    
      <category term="Dev" scheme="https://eclatant.io/categories/Dev/"/>
    
    
      <category term="Dev" scheme="https://eclatant.io/tags/Dev/"/>
    
  </entry>
  
  <entry>
    <title>글쓰기 시작</title>
    <link href="https://eclatant.io/2018/11/11/2018-11-11-Start/"/>
    <id>https://eclatant.io/2018/11/11/2018-11-11-Start/</id>
    <published>2018-11-10T15:00:00.000Z</published>
    <updated>2018-11-11T12:25:12.140Z</updated>
    
    <content type="html"><![CDATA[<p>올해 초에 작성했던, 글쓰기 시작 다짐글을 다시 읽어보았다.</p><p>다짐을 지키지 못했다..</p><p>내용 중 일부는 다음과 같았다.</p><hr><p>최근에 읽은 아티클 중에 관련하여 글쓰기와 관련하여 가장 인상적이었던 것은 <a href="https://ppss.kr/archives/16682" target="_blank" rel="noopener">글쓰기가 안 되는 분들을 위한 4단계 작문법</a> 이었다.</p><p>위 내용을 보고 여태까지 글쓰기가 힘들었던 것은 정신병자 단계를 거치지 않고 판사와 같은 마음으로 바라보고 있었기 때문이라는 것을 느꼈다.</p><p>그러다보면 이터레이션 주기가 길어지고, 따라서 성공할 수가 없었던 것이다.</p><p>앞으로 최대한 편안한 마음으로 좋은 글이 아닌, 그저 지각하지 않고 제때 제출하는 것만을 목표로 써보려고 한다.</p><p>그 과정에서 다른 분들과 많이 교류하며 글쓰기 외에도 많은 것들을 얻어갈 수 있기를 바란다.</p><hr><p>이번에도 정말 동일한 마음이다.</p><p>이루지 못했던 이유는 무엇인가?</p><p>늘 그렇듯 너무 부담스러워했던 탓이다.</p><p>그러지 않기 위해선 어떻게 할 수 있는가?</p><p>매일 단 한 문장이라도 써야 한다.</p><p>부담스러운 마음에 멈칫하며 미루면 순식간에 마감일이 찾아온다.</p><p>글 퀄리티가 낮아서 부끄러운 것보다 제출시점을 지키지 못하는 것을 부끄러워하자.</p><p>모든 부담을 내려놓고 편안하게 그러나 꾸준히 하자.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;올해 초에 작성했던, 글쓰기 시작 다짐글을 다시 읽어보았다.&lt;/p&gt;
&lt;p&gt;다짐을 지키지 못했다..&lt;/p&gt;
&lt;p&gt;내용 중 일부는 다음과 같았다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;최근에 읽은 아티클 중에 관련하여 글쓰기와 관련하여 가장 인상적이었던 것은 &lt;a 
      
    
    </summary>
    
      <category term="Essay" scheme="https://eclatant.io/categories/Essay/"/>
    
    
      <category term="Essay" scheme="https://eclatant.io/tags/Essay/"/>
    
  </entry>
  
  <entry>
    <title>이번 주에 접했던 것들 #0 : 18-11-11</title>
    <link href="https://eclatant.io/2018/11/11/2018-11-11-WeeklyHistory/"/>
    <id>https://eclatant.io/2018/11/11/2018-11-11-WeeklyHistory/</id>
    <published>2018-11-10T15:00:00.000Z</published>
    <updated>2018-12-02T13:15:02.836Z</updated>
    
    <content type="html"><![CDATA[<p>몇 달 동안 자바스크립트 및 알고리즘 문제 풀이를 쉬고 있다가, 다시 시작했다</p><p>생각보다 잊어버린 것들이 많았어서 좌절스럽기도 했지만, 그래도 다시 열심히 해보자</p><h3 id="자바스크립트-Integer-gt-String-String-value-vs-value-toString"><a href="#자바스크립트-Integer-gt-String-String-value-vs-value-toString" class="headerlink" title="자바스크립트 : Integer -&gt; String, String(value) vs value.toString()"></a>자바스크립트 : Integer -&gt; String, String(value) vs value.toString()</h3><p><a href="http://2ality.com/2012/03/converting-to-string.html" target="_blank" rel="noopener">Converting a value to string in JavaScript</a></p><p>결론 : value가 undefined || null 일 수 있으니 String(value)를 사용하라</p><h3 id="자바스크립트-String-gt-Integer-parseInt-vs-Math-floor"><a href="#자바스크립트-String-gt-Integer-parseInt-vs-Math-floor" class="headerlink" title="자바스크립트 : String -&gt; Integer, parseInt vs Math.floor"></a>자바스크립트 : String -&gt; Integer, parseInt vs Math.floor</h3><p><a href="http://2ality.com/2013/01/parseint.html" target="_blank" rel="noopener">parseInt() doesn’t always correctly convert to integer</a></p><p>결론 : Math.floor를 사용하세요</p><h3 id="자바스크립트-String-gt-Array-split-은-기대와-다른-동작"><a href="#자바스크립트-String-gt-Array-split-은-기대와-다른-동작" class="headerlink" title="자바스크립트 : String -&gt; Array, split()은 기대와 다른 동작"></a>자바스크립트 : String -&gt; Array, split()은 기대와 다른 동작</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split" target="_blank" rel="noopener">String.prototype.split()</a></p><p><code>str.split([separator[, limit]])</code>, 새로운 문자열을 리턴</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"hello"</span>.split(); <span class="comment">// ["hello"]</span></span><br><span class="line"><span class="string">"hello"</span>.split(<span class="string">""</span>); <span class="comment">// ["h", "e", "l", "l", "o"]</span></span><br><span class="line"><span class="string">"hello"</span>.split(<span class="string">""</span>, <span class="number">3</span>); <span class="comment">// ["h", "e", "l"]</span></span><br></pre></td></tr></table></figure><p>관련 주의사항 : <a href="https://stackoverflow.com/a/34717402" target="_blank" rel="noopener">How do you get a string to a character array in JavaScript?</a></p><p>결론 : ES6를 사용해도 된다면, […str] || Array.from(str) 을 사용하자</p><h3 id="자바스크립트-String-반복"><a href="#자바스크립트-String-반복" class="headerlink" title="자바스크립트 : String 반복"></a>자바스크립트 : String 반복</h3><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/repeat" target="_blank" rel="noopener">String.prototype.repeat()</a> ES6</p><p><code>str.repeat(count)</code>, 새로운 문자열을 리턴</p><p>count는 양의 정수여야 한다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'abc'</span>.repeat(<span class="number">-1</span>);   <span class="comment">// RangeError</span></span><br><span class="line"><span class="string">'abc'</span>.repeat(<span class="number">0</span>);    <span class="comment">// ''</span></span><br><span class="line"><span class="string">'abc'</span>.repeat(<span class="number">1</span>);    <span class="comment">// 'abc'</span></span><br><span class="line"><span class="string">'abc'</span>.repeat(<span class="number">2</span>);    <span class="comment">// 'abcabc'</span></span><br><span class="line"><span class="string">'abc'</span>.repeat(<span class="number">3.5</span>);  <span class="comment">// 'abcabcabc' (count will be converted to integer)</span></span><br></pre></td></tr></table></figure><p>만약 반복한 결과를 Array로 돌려받고 싶다면?</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill" target="_blank" rel="noopener">Array.prototype.fill()</a> ES6</p><p><code>arr.fill(value[, start[, end]])</code>, 부수효과를 일으키는 함수</p><p>순차적으로 증가하는 숫자가 담긴 배열이 필요하다면?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[...Array(<span class="number">5</span> + <span class="number">1</span>).keys()].slice(<span class="number">1</span>); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h3 id="자바스크립트-배열이-특정-길이인지-여부"><a href="#자바스크립트-배열이-특정-길이인지-여부" class="headerlink" title="자바스크립트 : 배열이 특정 길이인지 여부"></a>자바스크립트 : 배열이 특정 길이인지 여부</h3><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" target="_blank" rel="noopener">Array.prototype.includes()</a> ES7</p><p><code>arr.includes(searchElement[, fromIndex])</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">4</span>, <span class="number">6</span>].includes([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]); <span class="comment">// true</span></span><br><span class="line">[<span class="number">4</span>, <span class="number">6</span>].includes([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="자바스크립트-배열-요소중-최대값-구하기"><a href="#자바스크립트-배열-요소중-최대값-구하기" class="headerlink" title="자바스크립트 : 배열 요소중 최대값 구하기"></a>자바스크립트 : 배열 요소중 최대값 구하기</h3><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Math/max" target="_blank" rel="noopener">Math.max()</a></p><p><code>Math.max([값1[, 값2[, ...]]])</code></p><p>만약 인수 중 하나라도 숫자로 변환하지 못한다면 <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/NaN" target="_blank" rel="noopener"><code>NaN</code></a>로 반환합니다.</p><p>만약 아무 요소도 주어지지 않았다면 <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/-Infinity" target="_blank" rel="noopener"><code>-Infinity</code></a>로 반환합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, numberArray);</span><br><span class="line"><span class="built_in">Math</span>.max(...numberArray);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;몇 달 동안 자바스크립트 및 알고리즘 문제 풀이를 쉬고 있다가, 다시 시작했다&lt;/p&gt;
&lt;p&gt;생각보다 잊어버린 것들이 많았어서 좌절스럽기도 했지만, 그래도 다시 열심히 해보자&lt;/p&gt;
&lt;h3 id=&quot;자바스크립트-Integer-gt-String-Str
      
    
    </summary>
    
      <category term="Dev" scheme="https://eclatant.io/categories/Dev/"/>
    
    
      <category term="Dev" scheme="https://eclatant.io/tags/Dev/"/>
    
  </entry>
  
  <entry>
    <title>The Real TDD</title>
    <link href="https://eclatant.io/2018/10/18/2018-10-18-RealTDD/"/>
    <id>https://eclatant.io/2018/10/18/2018-10-18-RealTDD/</id>
    <published>2018-10-17T15:00:00.000Z</published>
    <updated>2018-10-18T17:09:35.016Z</updated>
    
    <content type="html"><![CDATA[<h1 id="The-Real-TDD"><a href="#The-Real-TDD" class="headerlink" title="The Real TDD"></a>The Real TDD</h1><p>테스트 하기 쉬운 코드란?</p><ul><li>순수함수와 같이, 동일 인풋에 동일 아웃풋 (데이터베이스를 조회해야 한다면 항상 같은 값을 리턴받을 것이라 기대하기 힘들 것)<ul><li>Deterministic</li></ul></li><li><p>외부상태를 변경하지 않는 코드</p><ul><li>No side effects</li></ul></li><li><p>유효성 검사</p><ul><li>TDD 맛보기<ul><li>Arrange, Act, Assert</li><li>테스트를 만족하는 만큼만 구현하라</li><li>부가적 코드들은 테스트 커버리지에 포함되지 않을 것</li><li>점진적 구현의 효과도 상실</li></ul></li></ul></li><li>등록된 좌석 수를 디비에서 불러오기<ul><li>테스트하기 힘듬</li><li>테스트하기 쉬운 코드와 어려운 코드를 분리하자<ul><li>간단한 연산을 테스트하기 위해 테스트 데이터 필요</li><li>녹색과 빨간색을 분리하자 (안 그러면 녹색도 테스트하기 어려운 상황)</li><li>디비에서 받아와야 하는 정보는 파라미터로 분리하거나 프로퍼티를 참조</li></ul></li><li>두 부류의 코드는 어디에서 만나야 하나?<ul><li>테스트하기 어려운 코드를 호출해서 사용해야 한다면 호출하는 코드도 테스트하기 어려울 것</li><li>그러니 분리해서 최대한 가장자리에서 만나도록 하자 (테스트하기 어려운 여파가 최대한 덜 미치도록)</li><li>예외 : 로깅, 퍼사드</li></ul></li><li>두 부류가 만나는 가장자리는 어떻게 테스트하나?<ul><li>수동테스트<ul><li>자동화테스트가 불필요할 정도로 간단한 경우</li></ul></li><li>자동테스트<ul><li>작성된 코드 사용을 강제할 수 있나?<ul><li>실제 클래스 대신 목 사용을 위해 이음새(Seam)가 필요<ul><li>인터페이스</li><li>추상클래스</li><li>보철메소드(?)</li></ul></li><li>목을 만들고 생성자에게 넘겨주고, 메소드 내에서 입력받은 인풋을 프로퍼티에 할당하도록 하고 그것을 메소드 실행 후에 assert로 검증</li><li>목 사용으로 작성된 코드 사용을 강제할 수 있다</li><li>하지만 생각해볼 포인트<ul><li>목 사용은 행위 검증<ul><li>행위가 호출되었는가</li><li>불필요한 추상화 유발 가능성</li><li>구현되지 않은 코드에 의존 가능</li><li>아웃사이드인 기법</li></ul></li><li>목 사용하지 않는 것은 상태 검증<ul><li>결과값이 무엇인가</li><li>불필요한 추상화 필요없음</li><li>구현된 코드에만 의존</li><li>인사이드아웃 기법</li></ul></li><li>목 사용의 문제점<ul><li>목을 남발할 가능성이 크다</li><li>적정 수의 목 사용에 대한 답을 찾기 어렵다</li><li>상태 검증으로 돌아가보자</li></ul></li><li>상태검증 문제 극복 방안<ul><li>사후 테스트를 하자</li><li>구현된 코드를 사용하지 않고 굳이 어려운 길을 택할 필요가 없다</li><li>목 사용도 비용이다</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li>요청 좌석 수가 가능한지 판단</li><li>등록 정보 저장<ul><li>테스트하기 힘듬</li></ul></li><li><p>HTTP response</p><p>두 부류의 코드를 분리해서 각각 테스트<br>가장자리에서 맞물려 돌아가는 코드는 주로 수동테스트<br>jwchung.github.io/testing-oh-my<br>테스트 코드가 단순하기에 테스트 코드에 대한 테스트 코드를 작성하지 않듯이 단순하고 실수할 가능성이 낮은 부분에 대해 많은 비용을 들이려하지 않는다<br>두 부류 코드를 섞어 넣고 테스트가 어렵다고 포기하지 마세요</p><p>프라이빗 메소드는 어떻게 테스트?</p></li><li><p>테스트 대상 코드와 테스트 코드의 접촉 면적은 작을수록 좋습니다</p><ul><li>한 가지 메소드를 건들여서 가는게 좋습니다</li><li><p>어떤 것은 퍼블릭 메소드로 할 것인가?</p><p>레거시 코드에 대해서는 어떻게 하는가?</p></li></ul></li><li>목업이 필요할 상황</li><li>레거시 코드와 결합도를 낮춰라</li><li>새로 생성된 코드에 테스트를 가할 것</li><li><p>케릭터라이제이션 테스트</p><ul><li>요구사항만 적어놓고 테스트</li><li><p>테스트 안전망을 두고 리팩토링</p><hr><p>의식적인 연습으로 TDD, 리팩토링 연습하기</p><p>왜 해야 하는지 왜 중요한지는 알고 있다는 가정하에 시작</p><p>비중 : TDD &lt; 리팩토링</p><p>리팩토링을 이야기하는 것도 TDD에 관련된 이야기일 수 밖에 없음</p><p>의식적인 연습이란?<br>의식적인 연습으로 TDD, 리팩토링 연습 과정</p><p>연습을 많이 한다고 잘 할 수 있는가?</p><p>테스트하기 쉬운 코드와 어려운 코드를 보는 눈<br>테스트하기 어려운 코드를 테스트하기 쉬운 코드로 설계하는 감</p><p>많은 수련과 연습이 필요하다</p><p>효과적으로 연습하려면?</p><p>1만 시간의 재발견<br>아마추어와 프로의 결정적 차이</p></li></ul></li><li>목적 의식 있는 연습에 얼마나 많은 시간을 투자하는가?</li><li><p>7원칙</p><ul><li>컴포트존 벗어나기, 현재 능력보다 살짝 넘어가는 작업 지속적 시도</li><li>명확하고 구체적인 목표</li><li>피드백과 피드백에 따른 행동 변경을 수반</li><li><p>기존 습득한 기술의 특정 부분을 집중적으로 개선하고 수정하는 과정 (한 번에 너무 여러 가지를 개선하려고 하지 말 것)</p><p>의식적인 연습을 통한 효과적 개선</p><p>단위 테스트 연습</p></li></ul></li><li>TDD보다 단위 테스트부터 연습하라</li><li>내가 사용하고 있는 API 사용법을 익히기 위한 학습 테스트부터 시작, 인풋과 아웃풋이 명확한 유틸성 메소드에 대한 연습</li><li><p>의도하는데로 잘 동작하는가?</p><p>알고리즘을 학습한다면 알고리즘 구현에 대한 검증을 단위 테스트로 한다, 인풋 아웃풋이 명확해서 테스트하기 수월</p><p>TDD 연습</p><p>지켜야 할 원칙 : 회사 프로젝트에 연습하지 말고 토이 프로젝트를 활용해 연습하자<br>프로덕션 코드는 도입하기가 어렵기 때문에 처음부터 시도하기엔 어려울 것</p><p>어떤 인풋이 들어오면 어떤 아웃풋이 나올지를 미리 정의하고 시작해야 감이 잡힐 것</p><p>테스트 fails, 테스트 passes 까지만 연습해보자</p><p>테스트 코드를 먼저 만드는 것만해도 쉽지 않을 것</p><p>난이도가 낮거나 자신에게 익숙한 문제로 시자가는 것을 추천</p><p>리팩토링 연습</p><p>메소드 분리</p></li><li>모든 프로그래머가 갖춰야 할 기본 역량</li><li>한 메소드에 오직 한 단계의 들여쓰기만 한다, 그 이상은 메소드로 분리</li><li>else를 쓰지 않는다</li><li>한 가지 일만 해도록 하기<ul><li>섬은 스트링을 인트로 바꾸는 과정도 포함하고 있다</li></ul></li><li>로컬 변수가 정말 필요한가?</li><li><p>컴포즈 메소드 패턴 (동등한 수준의 메소드로 분리)</p><ul><li><p>연습할 때는 극단적으로 해야 느끼는 것과 인사이트가 생겨난다</p><p>한 번에 한 가지 명확하고 구체적인 목표를 가지고 연습하라, 한 번이 모든 원칙을 지키면서 리팩토링을 하려고 하면 너무 어렵다, 여유가 없으면 창의적일 수 없음<br>메소드 라인 수 제한을 15 -&gt; 10 -&gt; 8 라인</p></li></ul></li><li><p>설계에 대한 인사이트가 생긴다</p><p>클래스 분리</p></li><li>모든 원시값과 문자열을 포장한다(클래스로 추출하라)<ul><li>Validate이 보장된 클래스</li></ul></li><li>일급 콜렉션을 사용</li><li><p>3개 이상의 인스턴스 메소드가 있는 클래스를 쓰지 않는다</p><ul><li>객체 설계 연습을 정말 많이 하게 되어요</li><li><p>정량적인 연습을 계속 해보세요</p><p>토이 프로젝트 난이도 높이기</p></li></ul></li><li><p>점진적으로 요구사항이 높은 프로그램</p><ul><li>게임</li><li>의존관계가 없는 것</li><li>약간은 복잡한 로직이 있는 프로그램</li><li>로또</li><li>사다리 타기</li><li>볼링게임 점수판</li><li>체스게임</li><li><p>지뢰첮기</p><p>의존 관계 추가를 통한 난이도 높이기</p></li></ul></li><li>의존 관계가 필요한 프로젝트</li><li><p>이때 필요한 역량은 설계 역량, 테스트 하기 쉬운 코드와 어려운 코드를 분리하는 역량</p><p>한 단계 더 나아간 연습</p></li><li>컴파일 에러 최소화</li><li>ATDD 기반으로 응용 애플리케이션 개발</li><li><p>레거시 애플리케이션에 테스트 코드 추가해 리팩토링하기</p><ul><li><p>갈수록 유지보수역량이 뛰어난 사람이 필요할 것이다</p><p>구체적인 목표 연습 찾기</p></li></ul></li><li>소트웍스 앤솔러지<ul><li>객체지향 생활체조 원칙</li></ul></li><li><p>클린코드</p><ul><li>메소드 인수 개수 줄이기(2개 이하)</li><li><p>클래스 크기를 최대한 작게 만들어서 가독성을 확보</p><p>여유, 같은 과제를 반복적으로 구현할 수 있는 인내력, 꾸준히 도전할 수 있는 용기</p><p>컴포트존 극복 노하우</p></li></ul></li><li>경력이 쌓일수록 어렵다</li><li>삶에 여유와 에너지가 있어야 한다</li><li><p>남들이 하는 것을 다 하면서 성장하긴 어렵다, 일정 시간 몰입의 시간이 필요하다</p><p>테스트 코드를 빡빡하게 짜놓을수록 요구사항의 변경시에 발목을 잡는데 노하우가 있는가?</p></li><li>요구사항 변경이 문제가 아니라 설계를 잘못했기에 테스트 코드의 변화가 많아진 것이다</li><li><p>나중에 개선할 수 있는 타이밍이라는 것은 오지 않는다</p><hr><p>Test driven development for code quality</p><p>Overview of TDD<br>The three rules of TDD<br>TDD 이점</p></li><li>테스트 자동화의 장점<ul><li>개발 생산성 향상<ul><li>보통 테스트를 위한 오버헤드와 실제 구현에 드는 리소스를 1:1로 본다</li><li>이펙티브 유닛 테스팅: 어 가이드 포 자바 디벨로퍼스</li></ul></li></ul></li><li><p>테스트 우선의 이점</p><ul><li><p>코드 품질 향상</p><p>Think more about TDD</p><p>코드 퀄리티 : Titanic diemma / jonathan bloom seen versus the unseen</p><p>인터널 퀄리티 + 익스터널 퀄리티</p><p>The seven axes of code quality from sonarcube</p><p>Success with TDD</p><hr><p>테스트 시작하기</p><p>테스트를 할 때는 프로덕션 코드는 건들이지 않는다<br>리팩토링할 때는 테스트 코드는 수정하지 않는다</p><p>not.toThrowError</p><p>테스트가 단언하고 있는 내용이 사용자에게 중요한 가치를 주는 것인가?<br>비즈니스와 관련된 버그인가?<br>유지해서 얻는 이득보다 관리 비용이 더 큰 테스트는 아닌가?<br>중 하나라도 해당하면 테스트하지 않음</p><p>DOM 구조는 변화가 자주 있기 때문에 해당 사항을 고려한 테스트 코드를 짠다</p><p>고민사항</p></li></ul></li><li>픽스쳐 관리</li><li><p>함수로 계속 분리하는게 옳은 방식인가?</p><ul><li>추상화 수준이 낮아서 클라이언트에서 구체적인 내용을 알아야만 사용할 수 있는 것</li><li><p>높은 응집, 낮은 결합 중 낮은 결합만 달성한 것</p><p><a href="mailto:irinso93@gmail.com" target="_blank" rel="noopener">irinso93@gmail.com</a></p><hr><p>테스트 코드는 프로젝트 코드가 사용되는 최초의 장소이며 고객이다</p><p>모든 역사는 테스트 코드부터 시작된다</p><p>숨겨진 본질</p></li><li>낮은 추상화</li><li>들쭉날쭉한 추상화</li><li>끊어진 논리</li><li>알 수 없는 의도<br>욕심쟁이</li><li>테스트가 실패하는 이유는 오직 단 하나여야 함</li><li>하나의 테스트는 오직 한 가지만 검사해야 한다(SRP)<br>인지능력의 과부화</li><li>흩어진 코드와 데이터</li><li>매직넘버<br>깨지기 쉬운 것들</li><li>높은 결합</li><li><p>낮은 응집</p><p>테스트를 이해하려면 그것의 환경을 이해해야 한다</p><p>추상이란?<br>문맥 위에서 오직 관심 있는 것들에 대해서만 집중하여 명확하게 하는 것</p><p>테스트 코드의 의도가 명시적이 될 수 있도록 프로덕션 코드를 개선해나간다</p><p>테스트 코드도 프로덕션 코드의 일부라고 바라보자</p><p>테스트는 과정 수련 스승 거울 제품이다<br>억지로 먼저 하지 마라, 건강하게 하라, 두려워하지 마라, 즐거워해라</p><p>테스트가 우리를 가르쳐줘요</p><p>테스트 코드를 리팩토링하고 피쳐를 추가할 여유가 없다면, 격리를 시켜서 내가 추가해야 할 코드의 사이즈를 줄여놓고 그 부분에 대해서만 진행을 한다</p><hr><p>사이언스 vs 엔지니어링 짤방</p><p>엔지니어링 : 과학과 예산 간의 균형점</p><p>중요한 것은 목표 달성이지, How가 중요하진 않을 수 있다</p><p>과학자가 아니기에 TDD가 문제 해결에 도움이 되면 하고, 아니면 안 한다</p><p>준비가 되지 않았다면 TDD가 아닌 방식으로 먼저 목표를 달성하고, 그 이후에 준비가 되가는만큼 도입해야 한다</p><p>우리가 보호해야 하는 것 = 도메인</p><p>제어할 수 없는 외부 세계를 다루려고 하지 않는다</p></li></ul></li><li>실세계</li><li>인프라</li><li>외부 서비스</li><li><p>레거시</p><p>낮은 결합, 높은 응집, 도메인 모델 보호</p><p>설계를 테스트하라<br>코드가 이루려는 가치를 테스트하라</p></li><li>Stub 간접적인 입력 spy 간접적인 출력</li><li><p>위를 사용해야 하는 것은 구체적인 구현을 알아야 하는 테스트일 가능성이 높다</p><p>정보 숨김 information hiding</p></li><li><p>어려운 설계 결정과 변경될 가능성이 높은 설계 결정들을 다른 모듈로부터 숨기는 것</p><p>테스트 코드가 구현을 아는 것이 아니라 인터페이스를 테스트해야 한다</p><p>어디까지가 인터페이스고 임플리테이션인가?</p><p>레거시와 함께 살기</p><p>어댑터 레이어를 통해 새로 작성하는 코드는 깨끗함을 유지, 해당 레이어는 테스트하지 않고 매뉴얼 테스트로도 테스트 가능하도록 단순하게 짠다</p><p>점진<br>반복<br>Fail-Fast</p><p>가설<br>실험<br>검증</p><p>계획<br>실행<br>평가</p><p>보통은 바로 실험이나 실행만 한다</p><p>팀 내 목표와 지식에 대한 공유 문화가 매우 중요</p><p>스프링과 도메인 모델이 강결합되어있는 것 아닌가, 이러면 도메인 모델이 보호받지 못한다</p><p>도메인 모델, 중요한 코드일수록 플랫폼에서 독립적이어야 한다</p><p>플랫폼 -&gt; 모듈 -&gt; 서비스 -&gt; 비즈니스 로직</p><p>View, View Model, Model</p><p>사용자에게 어떤 가치를 전달할 것인가?<br>두루뭉실하게 해서는 안 된다</p><p>화이트보드를 통해 설계를 하는 것을 통해 목표와 목적을 공유할 수 있습니다</p><p>목적 달성을 위해선 시스템에 어떤 변경이 필요한가?</p><p>소프트웨어 변경은 어떤 세부 작업들이 있는가?<br>각 작업들은 어떤 순서로 진행되어야 하는가?<br>각 작업들은 누가 담당하는가?</p><p>ATDD + TDD<br>ATDD Red -&gt; unit test red -&gt; green -&gt; refactor -&gt; ATDD green</p><p>이 작업에는 어떤 코드 변경(커밋)이 필요한가?</p><p>작업을 구체적으로 설계하고 실제로 내가 했을 때와의 간극을 끊임없이 검증해서 내가 사전적으로 놓친 것을 파악해야 할 것</p><p>그린 단계에서는 방금 작성한 코드 뿐 아니라 모든 테스트가 통과해야만 한다</p><p>레드 단계의 에러 메시지를 살피지 않으면 테스트가 완성되지 않은 상태에서 그린으로 넘어가려고 할 수 있으니 주의할 것</p><p>피드백</p></li><li>단위 테스팅</li><li>코드 리뷰</li><li>기능 테스킹</li><li>수동 테스팅</li><li><p>사용자 반응 수집</p><p>코딩만 페어 프로그래밍을 하는 것이 아니라 테스크를 처리하는 과정까지 모두 페어링을 하였음</p><p>유저 스토리를 비즈니스팀에서 러프하게 주면, 화이트보드에 그림을 그려보면서 검증, 초기 분석을 가지고 목록화, 어싸인되지 않은 유저스토리를 가져간다, 분석해서 어떤 코드를 작성해야하는지 판단하여 기재하여 리뷰를 요청하고, 테스크를 혼자 또는 나누어 진행할 수 있게 분배, 분배 후 페어링 또는 개별 분석을 통해 진행</p><p>통합 테스트<br>단위 테스트만으로는 불안감이 해소되지 않는다<br>단위 테스트는 다 성공하는데 기능 테스트는 깨지는 때<br>조합이 잘 되었는지 확인이 필요<br>외부 서비스 같은 경우에는 페이크 서비스를 만들어서 잘 결합하는지 확인</p><hr><p>패널토크</p><p>TDD가 왜 더 나은가? 어떻게 납득시킬 수 있는가?</p><p>수많은 방법론 중에 왜 TDD인가?</p></li><li>테스트 코드를 짜면 프로덕션 코드에 대해 애정이 생기고 섬세하게 다루게 된다</li><li><p>가장 빠른 피드백을 준다</p><p>프로그램의 본질은 구현체인데, 본질적 가치가 아닌 테스트나 리팩토링 등을 납득시킬 수 있는가?</p></li><li>굉장히 외롭습니다, 퀄리티를 위해 테스트를 한다, 설계적인 관점에 이점을 준다, 프로덕션에 영향을 주는 방법이다, 의사가 멸균을 하듯이 자연스럽게 이루어져야 하는 과정이다</li><li>주니어 개발자라면 다른 이를 설득하지 말고 내 만족을 위해서 하세요 그런데 내가 만들어놓은 코드에 대해 타인이 궁금해하면 전파하면 된다고 생각합니다, 전파에 너무 집착하지 마세요, 의사결정자가 되었을 때 가치있는 소프트웨어를 만드는데 필요하다는 확신이 들면 도입하면 좋겠어요</li><li>피드백을 빠르게 받는게 직무탈진율을 낮춘다, 삶의 퀄리티를 높여줍니다, TDD가 어디서부터 생긴 것인가? 애자일에서 발생한 것, 애자일한 환경이 갖춰졌을 때 TDD가 중요할 수 있다, 애자일에서는 개발을 사회적 활동으로 봅니다, 어떻게 하면 같이 할 수 있을까를 고민해봐야 합니다, 애자일은 모든 것이 모호한 상황에서 시도하는 곳이기에 다 준비되고 시작할 때 한다는 것은 애자일하지 않은 것일 수 있다, 주니어일 때 남들과 TDD를 같이 하기 수월할 수 있다</li><li>팀원들이 문제를 계속해서 끌어내도록 환경을 만들어서 팀원들로부터 짝 프로그래밍 등을 하자고 제안하도록 만든다, 팀장이 아닌 팀원이 드라이빙하도록 해서 하나씩 변화를 만들어간다, 팀원일 때는 변화를 만들어내기 위한 잽을 던지는 근육을 만들어야 시니어가 되었을 때 변화를 도입할 수 있다고 생각합니다</li><li><p>애자일을 도입할 때 애자일하게 도입하지 않는 경우가 많습니다, 마찬가지로 TDD도 점진적으로 도입시킬 수 있도록 작게 나누어서 도입시키고, TDD는 테스트의 순서가 대단히 중요한데 작지만 에센스한 것을 선택해야 합니다, 작은 것을 하되 에센스가 무엇인지 찾아야 합니다, 동료 개발자들의 문제 의식일 수도 있는 등 작지만 중요한게 무엇일까에 대한 생각을 해보는 것이 중요할 것 같습니다</p><p>코드 커버리지를 어떤 기준으로?</p></li><li><p>매트릭스 자체에 집중하면 원래 얻고자 하는 것을 잃는 경우가 많습니다, 테스트 품질 자체도 대단히 중요합니다, 지표가 정해지면 그 지표만을 위한 테스트 케이스들이 만들어질테니 좋지 않다고 봅니다, 쉽지 않지만 테스트 커버리지에 집착하지 않는게 중요하고 실제 프로덕션 코드에 대한 이해를 높인다는 관점으로 접근하면 좋겠습니다, TDD 자체에 집착하지 말고 새로운 문제 등일 때 아직 명확하지 않을 때 조건과 인풋 아웃풋을 다듬어가면서 가야 할 때는 TDD에게 문제 해결방안을 얻어가면 좋겠습니다</p><p>신입이 TDD 공부할 때 추천 콘텐츠</p></li><li>페어 프로그래밍 후 혼자 연습, 정진욱님 블로그 정주행</li><li>아트 오브 유닛 테스팅 -&gt; XUnit patterns(Arrange가 대단히 어려운데, 테스트에서 일어나는 모든 상황이 정리되어있습니다, 케이스를 선택할 수 있었습니다) -&gt; goos</li><li>테스트 주도 개발, 리팩토링</li><li>유튜브에 리팩토링이나 TDD 관련 카타 라고 검색하면 굉장히 많이 나옵니다</li><li><p>TDD는 종합예술같은 것이에요, 모든 것들이 결집되어 나타나는 산출물이기 때문에 한 번에 얻어내긴 어려우실 거에요, 테스트가 주는 이점을 많이 느끼고 그것을 바탕으로 성장하는게 필요합니다</p><p>도메인 모델과 스프링의 접점을 왜 줄여야 하는가?</p></li><li>새로 나오는 좋은 도구와 플랫폼이 나와도 옮겨갈 수 없다, 중요한 도메인 모델이 덜 중요한 플랫폼에 종속하도록 하는 것은 좋은 결정이 아니라고 생각합니다</li><li>스프링이나 데이터베이스 기반이 아니라 순수 언어 기반으로 프로그래밍 연습을 하고 변경을 최소화하면서 외부 세계와의 접점을 늘려가세요, 많은 프로그래머들이 프레임워크 기반으로 연습을 하다보니까 순수한 언어 기반 연습을 잘 안하게 되는데 그것을 하고 나서 프레임워크로 가보면 또 다른 인사이트를 느낄 수 있습니다</li><li>도메인 모델, DTO, 퍼시스턴트 오브젝트 등으로 모두 분리할 수 있는가, 복잡하지 않을 때는 공유하는게 이점이 있을 것</li><li>도메인 모델에 로직이 있어야 하는데 스프링 영역으로 내려오면 테스트가 힘들어집니다, 객체지향적 사고를 해야 합니다</li><li>DDD에서 도메인과 기술을 구분하는 것에는 동의하지만, 프레임워크가 도메인에 침투되는 것은 어쩔 수 없지만 얼마나 최소화하느냐 그리고 우리 상황에 얼마나 맞게 할 수 있느냐가 중요합니다, 무조건적인 분리를 이루려고 하면 또 잃는게 많을 수 있습니다</li><li><p>자바가 아닌 스프링으로 시작하는 것에 대한 저항감을 가지고 있는 것이 주니어 입장에서 좋겠습니다</p><p>레거시에 도입</p></li><li>그냥 두는 것이 방법이라고 생각합니다, 비즈니스적으로 이유가 없다면, 있을 때도 변경을 최소화하는게 필요하다고 생각합니다, 레거시에는 하지 않고 새로운 것을 도입할 때 하는게 좋다고 생각합니다, 최소한 변경하는 것은 또 디자인의 문제입니다</li><li>레거시가 방대한데 우리는 그 곳에서 또 살아야 합니다, 방치할 수는 없습니다, 팀 문화가 괜찮다면 점진적으로 리팩토링해나가야죠, 전체적으로 문화를 만들어야만 전체적인 리팩토링을 이룰 수 있다고 생각합니다</li><li>레거시와 친하게 지내세요, 착한 레거시도 있어요, 잘 나눠줘야되어요, 나쁜 레거시는 잘 인정해주어야 되어요, 그와 소통하는 인터페이스만 잘 만들어주면 되는 거에요, 비즈니스를 위해 일을 해야 합니다, 잘 일하고 있는 착한 레거시를 가만히 둡시다</li><li>개발자들은 ROI를 항상 생각해야 합니다, 그렇지 않으면 무의미한 것에 매몰될 수 있습니다, 3000라인 17중첩 일주일에 한 두 번 수정하면서 if문 추가 대마왕 7천라인 얘는 3천라인, 소마왕 해결하고 싶은데 도와줄 수 있냐, 2~3시간 만에 50라인으로 줄였어요, 모두가 공감하고 있었고 그래서 수정했기 때문에 계속 혜택을 누리게 되면 동참하게 되어요, 그냥 레거시를 다 적으로 생각하지 말고, 모두 ROI를 기반으로 판단하시면 항상 복리효과를 누리실 수 있을 것이라 생각합니다–</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;The-Real-TDD&quot;&gt;&lt;a href=&quot;#The-Real-TDD&quot; class=&quot;headerlink&quot; title=&quot;The Real TDD&quot;&gt;&lt;/a&gt;The Real TDD&lt;/h1&gt;&lt;p&gt;테스트 하기 쉬운 코드란?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;순수
      
    
    </summary>
    
    
      <category term="TDD" scheme="https://eclatant.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title>코드스피츠 3기 함수와 OOP - 3강</title>
    <link href="https://eclatant.io/2018/09/20/CodeSpitz-3-3/"/>
    <id>https://eclatant.io/2018/09/20/CodeSpitz-3-3/</id>
    <published>2018-09-19T15:00:00.000Z</published>
    <updated>2018-09-20T17:10:42.245Z</updated>
    
    <content type="html"><![CDATA[<p>어플리케이션을 짤 때, 대부분의 경우는 인식하여 구조화해서 프로그래밍 해야 하는 경우가 대부분</p><p>HTML 파서를 짤려면 HTML 을 보고 구조적으로 분석해야 함</p><p>구조화를 무한히 하면 무한한 케이스가 될 뿐, 구조화의 목표는 단순한 원리의 조합이나 창발을 통해서 설명할 수 있고자 하는 것</p><p>A = <tag>BODY</tag></p><p>B = <tag></tag></p><p>C = TEXT</p><p>BODY = (A | B | C)N</p><p>위와 같이 간단한 원리로 압축하여 그것의 창발로 현상을 설명할 수 있어야, 알고리즘도 간단한 만큼만 구현할 수 있다</p><p>HTML 을 장황하게 설명하면, 장황함을 커버하는 알고리즘을 짜야 한다</p><p>현상을 보고 구조적이고 재귀적인 형태의 파악을 할 수 있는가? 데이터 구조를 만들어 낼 수 있는가? 가 핵심이다</p><p>내부 구성요소로부터 응용 구성요소로 확장하는 것을 BNF 정의방식이라고 함</p><p>A 는 BODY 를 가지고 있는데 BODY 는 A 를 가지고 있을 수 있으므로 재귀가 시작됨</p><p>재귀적인 센스가 없다면 위와 같이 사물을 바라보기가 어렵다</p><p>재귀적으로 짜지 않으면 모든 케이스를 다 처리하기 위한 조건문이 필요해진다</p><p>재귀적으로 처리하는 과제를 수행해보게 되면, 그 다음부터는 해당 계열의 문제를 해결할 수 있고 그러면 사물을 그렇게 바라볼 수 있게 되고, 그렇게 되면 많은 부분들을 개발할 수 있게 됨</p><p>케이스가 확정적인 것만 구현할 수 있다면 초급개발자, 케이스가 재귀적이면서 복합적인 상황들을 처리할 수 있다면 중급개발자</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parser = <span class="function"><span class="params">input</span> =&gt;</span> &#123;</span><br><span class="line">  input = input.trim();</span><br><span class="line">  <span class="keyword">const</span> result = &#123; <span class="attr">name</span>: <span class="string">"ROOT"</span>, <span class="attr">type</span>: <span class="string">"node"</span>, <span class="attr">children</span>: [] &#125;;</span><br><span class="line">  <span class="keyword">const</span> stack = [&#123; <span class="attr">tag</span>: result &#125;];</span><br><span class="line">  <span class="keyword">let</span> curr,</span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    j = input.length;</span><br><span class="line">  <span class="keyword">while</span> ((curr = stack.pop())) &#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>함수를 디자인할 때는 인풋값과 리턴값을 디자인하는 것입니다</p><p>이 함수가 무엇을 하는지는 어떤 시그니처를 가지고 있느냐에 달려있습니다</p><p>parser 가 동작하는 방향은 children 을 어떻게 채우느냐에 달려있습니다</p><p>텍스트 덩어리는 구조적인 객체화를 시켜서 리턴하고 싶습니다</p><p>일차원 루프로는 순환적인 문제를 풀 수 없습니다</p><p>스택 수준을 오갈 수 있어야지만 일관된 루프로 처리할 수 있습니다</p><p>대상을 처리하는 것은 하나의 알고리즘이지만, 대상을 바꾸려면 스택을 오가야 하기 때문입니다</p><p>그래서 스택 구조가 바깥에 있고, 안에 알고리즘 구조가 있는 식으로 구현되어있습니다</p><p>현재 처리중인 스택을 curr 라고 부르기로 합니다</p><p>stack 은 전체 stack 루프를 위한 것입니다</p><p>tag 라는 것은 가상의 DOM 객체를 의미합니다</p><p>동적으로 루프가 변하는 루프를 짜봐야 합니다</p><p>안에 있는 이너루프는 j 값이 확정적입니다, 이 루프는 중간에 변하지 않습니다</p><p>그에 비해서 스택 루프는 루프회수가 얼마나 될지 결정되지 않았습니다</p><p>이너루프에서 스택에 변하면 루프회수가 늘어나거나 줄어듭니다, 따라서 동적 계획에 따른 루프입니다</p><p>계획되지 않은 루프는 위험하다고 생각하시면 안 됩니다</p><p>고급루프는 모두 런타임에서 루프회수가 변합니다</p><p>input 값에 따라 루프회수가 변합니다</p><p>동적 계획에 따른 루프 : 루프를 결정하는 요인이 이너루프를 돌면서 변할 수 있는 루프</p><p>중급 이상에서는 오히려 이런 루프가 기본입니다</p><p>루프를 돌 때, 무한루프가 될 수 있으니 안정적으로 확정루프가 될 수 있는지 확인하고 루프를 쓰라는 것은 모두 주니어들만을 위한 이야기입니다</p><p>실제로 루프회수가 얼마나 될지는 루프를 돌다가 깨닫는 경우가 많습니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parser = <span class="function"><span class="params">input</span> =&gt;</span> &#123;</span><br><span class="line">  input = input.trim();</span><br><span class="line">  <span class="keyword">const</span> result = &#123; <span class="attr">name</span>: <span class="string">"ROOT"</span>, <span class="attr">type</span>: <span class="string">"node"</span>, <span class="attr">children</span>: [] &#125;;</span><br><span class="line">  <span class="keyword">const</span> stack = [&#123; <span class="attr">tag</span>: result &#125;];</span><br><span class="line">  <span class="keyword">let</span> curr,</span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    j = input.length;</span><br><span class="line">  <span class="keyword">while</span> ((curr = stack.pop())) &#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">      <span class="keyword">const</span> cursor = i;</span><br><span class="line">      <span class="keyword">if</span> (input[cursor] === <span class="string">"&lt;"</span>) &#123;</span><br><span class="line">        <span class="comment">// A, B의 경우</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// C의 경우</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>처음부터 끝까지 쭉 훑는 것을 스캐너라고 부른다</p><p>이너루프는 받아온 문자열을 처음부터 끝까지 도는 것이니 스캐너이다</p><p>이너루프안에서 로직계산시에 i 를 건들일 수 있는데 i 는 루프를 결정하는 것이므로 위험하므로 i 를 cursor 에 대입함</p><p>&lt;로 시작하면 태그로 볼 수 있다, 태그가 아니라면 C 즉 TEXT 타입이다</p><p>C 가 더 쉬우니 TEXT 처리부터 진행한다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parser = <span class="function"><span class="params">input</span> =&gt;</span> &#123;</span><br><span class="line">  input = input.trim();</span><br><span class="line">  <span class="keyword">const</span> result = &#123; <span class="attr">name</span>: <span class="string">"ROOT"</span>, <span class="attr">type</span>: <span class="string">"node"</span>, <span class="attr">children</span>: [] &#125;;</span><br><span class="line">  <span class="keyword">const</span> stack = [&#123; <span class="attr">tag</span>: result &#125;];</span><br><span class="line">  <span class="keyword">let</span> curr,</span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    j = input.length;</span><br><span class="line">  <span class="keyword">while</span> ((curr = stack.pop())) &#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">      <span class="keyword">const</span> cursor = i;</span><br><span class="line">      <span class="keyword">if</span> (input[cursor] === <span class="string">"&lt;"</span>) &#123;</span><br><span class="line">        <span class="comment">// A, B의 경우</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> idx = input.indexOf(<span class="string">"&lt;"</span>, cursor);</span><br><span class="line">        curr.tag.children.push(&#123;</span><br><span class="line">          type: <span class="string">"text"</span>,</span><br><span class="line">          text: input.substring(cursor, idx)</span><br><span class="line">        &#125;);</span><br><span class="line">        i = idx;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  a</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span>&gt;</span>b<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  c</span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span>/&gt;</span></span><br><span class="line">  d</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;div&gt;</code> 뒤부터 <code>&lt;a&gt;</code> 앞까지는 모두 텍스트로 볼 수 있다</p><p>현재 바라보고 있는 스택에 있는 tag 의 자식에 텍스트 노드를 집어넣는다</p><p>그리고 그것을 처리해준 뒤 시점으로 i 를 이동시킨다</p><p>읽기에도 사용하고 쓰기에도 사용하면 혼란스러울 수 있으니<br>읽기 즉 조회 용도로 cursor 를 만들어서 알고리즘에서 사용하고,<br>실제로 인덱스를 옮겨야 하는 이벤트 시점에만 i 를 업데이트한다</p><p>코드가 별 것 아닐 때 역할을 인식해야 한다</p><p>이 역할은 독립적인가?</p><p>&lt;를 찾기 직전까지를 묶어서 텍스트 노드로 만들어서 현재 스택의 자식으로 넣어준다 라는 알고리즘이 역할상 독립적입니다</p><p>그렇다면 즉시 함수화 시킨다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> textNode = <span class="function">(<span class="params">input, cursor, curr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> idx = input.indexOf(<span class="string">"&lt;"</span>, cursor);</span><br><span class="line">  curr.tag.children.push(&#123;</span><br><span class="line">    type: <span class="string">"text"</span>,</span><br><span class="line">    text: input.substring(cursor, idx)</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> idx;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>역할이 분리된 순간 즉시 함수로 간다, 코드 관리를 위해서</p><p>나중에 텍스트 노드에 더 많은 기능을 넣고 싶으면 함수만 수정하면 된다</p><p>단 cursor 나 curr 는 지역변수가 아니다, 그렇기에 인자로 받을 수 밖에 없다</p><p>코드를 그대로 보내고 모자란 것들을 인자로 만든다</p><p>바깥 쪽에 있는 프리미티브 변수를 갱신해야 할 때는 return 을 사용하여 바깥 쪽에서 갱신하도록 함</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> textNode = <span class="function">(<span class="params">input, cursor, curr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> idx = input.indexOf(<span class="string">"&lt;"</span>, cursor);</span><br><span class="line">  curr.tag.children.push(&#123;</span><br><span class="line">    type: <span class="string">"text"</span>,</span><br><span class="line">    text: input.substring(cursor, idx)</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> idx;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parser = <span class="function"><span class="params">input</span> =&gt;</span> &#123;</span><br><span class="line">  input = input.trim();</span><br><span class="line">  <span class="keyword">const</span> result = &#123; <span class="attr">name</span>: <span class="string">"ROOT"</span>, <span class="attr">type</span>: <span class="string">"node"</span>, <span class="attr">children</span>: [] &#125;;</span><br><span class="line">  <span class="keyword">const</span> stack = [&#123; <span class="attr">tag</span>: result &#125;];</span><br><span class="line">  <span class="keyword">let</span> curr,</span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    j = input.length;</span><br><span class="line">  <span class="keyword">while</span> ((curr = stack.pop())) &#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">      <span class="keyword">const</span> cursor = i;</span><br><span class="line">      <span class="keyword">if</span> (input[cursor] === <span class="string">"&lt;"</span>) &#123;</span><br><span class="line">        <span class="comment">// A, B의 경우</span></span><br><span class="line">      &#125; <span class="keyword">else</span> i = textNode(input, cursor, curr);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>역할을 인식한 순간 함수화를 하지 못하면 끝장이다, 겉잡을 수 없게 된다</p><p>이 시점에 분리해야지만 가능하다, 나중에 뜯어서 분리하려고 하면 새로 짜는 수 밖에 없다</p><p>이미 너무 많이 오염되어있을 것, 인식하자마자 바꿔야 한다</p><p>input 과 cursor 는 값에 의한 복사니까 문제없지만 curr 는 객체이니 나쁜 것은 아닌가?</p><p>나쁘다, 그러나 방지하려면 curr 를 받지 않고 idx 와 텍스트 노드 객체를 함께 담아 배열로 리턴하여 바깥 쪽에서 하나는 i 를, 하나는 curr 를 수정하는 식으로 구현할 수도 있다</p><p>코드는 응집성을 가지면서 결합도를 낮춰야 한다, 그 밸런스를 맞춰야 한다, 둘 모두를 추구할 수는 없다</p><p>여기서는 응집성을 추구한 것, 항상 선택의 기로에 서게 됩니다</p><p>만약 위처럼 curr 를 받지 않으면 응집성과 의존성 모두 낮아진다</p><p>항상 의사결정을 할 수 밖에 없습니다,</p><p>밸런스를 어떻게 지킬 것이냐는 상황에 따라 다르기 때문에 그 센스를 갖기가 어려워서 좋은 개발자가 되기 힘든 것이다</p><p>실무에서는 정답을 하나로 정할 수 없습니다, 항상 밸런스 문제가 있습니다</p><p>&lt; 라는 weak 한 것에 의존하여 분기처리를 해도 되는가? HTML 도 그렇다</p><p>그래서 &lt;으로 이스케이프하지 않으면 &lt;를 발동 트리거로 쓸 수 없다</p><p>닫는 태그(&gt;)는 발동 트리거가 아니기 때문에 무관하다</p><p>이런 parser 들을 구현하다보면 separator 혹은 token 이라고 불리는 문자열들이 만들어지기 마련이다</p><p>얘네들은 값으로 쓰고 싶다면 이스케이프 처리가 필요하다</p><p>중요한 요령은 무조건 쉬운 것부터 처리한다는 것</p><p>왜 그런가? 쉬운 코드는 의존성이 낮고 독립된 기능일 가능성이 높습니다</p><p>쉬운 것부터 구현해야 그것을 의존하는 다른 코드를 짜기가 수월합니다</p><p>복잡한 것부터 짜면 자기 것인줄 알았던 부분이 공유되어야 하는 부분도 크고,</p><p>남에게 의존할 것이 있었는데 자기가 처리하게 되면서 중복도 생겨나곤 합니다</p><p>되도록이면 쉬운 것부터 짜야 합니다</p><p>그래야지 더 견고하고 의존성이 낮은 모듈로부터 의존성 높은 모듈을 짜나갈 수 있습니다</p><p>항상 쉬운 것부터 짜세요</p><p>&lt; 로 발동되는 케이스는 열린 태그, 닫힌 태그, self 종료 태그(<img>) 세 가지로 나눌 수 있습니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> textNode = <span class="function">(<span class="params">input, cursor, curr</span>) =&gt;</span> &#123;...&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parser = <span class="function"><span class="params">input</span> =&gt;</span> &#123;</span><br><span class="line">  input = input.trim();</span><br><span class="line">  <span class="keyword">const</span> result = &#123; <span class="attr">name</span>: <span class="string">"ROOT"</span>, <span class="attr">type</span>: <span class="string">"node"</span>, <span class="attr">children</span>: [] &#125;;</span><br><span class="line">  <span class="keyword">const</span> stack = [&#123; <span class="attr">tag</span>: result &#125;];</span><br><span class="line">  <span class="keyword">let</span> curr,</span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    j = input.length;</span><br><span class="line">  <span class="keyword">while</span> ((curr = stack.pop())) &#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">      <span class="keyword">const</span> cursor = i;</span><br><span class="line">      <span class="keyword">if</span> (input[cursor] === <span class="string">"&lt;"</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> idx = input.indexOf(<span class="string">'&gt;'</span>, cursor);</span><br><span class="line">        i = idx + <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> i = textNode(input, cursor, curr);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>indexOf 의 두 번째 인자를 주지 않으면 우리가 의도한 곳을 찾지 못할 것입니다</p><p>세 가지 케이스 중에 무엇인지와 무관하게 그 다음 번 i 가 무엇인지는 확정지을 수 있습니다</p><p>A 와 B 케이스의 공통점은 &lt;로 시작해서 &gt;로 끝난다는 것, 즉 태그이다</p><p>코드를 잘 짜면 코드를 읽을 수 있습니다</p><p>케이스의 공통점을 찾아서 먼저 처리해준다, 코드가 중복되지 않도록</p><p>이렇게 바라보지 않으면 똑같은 행동을 세 번 처리하게 되고 나중에 중복을 제거하기가 어려워진다</p><p>그럴 것이면 미리 눈을 훈련해서 공통점을 추출할 수 있도록 하는 수 밖에 없습니다</p><p>가볍게 보지 말고, 함부로 보지 말고, 더 깊게 바라보세요</p><p>얘네들은 분명 친척일거야 라는 관점으로-</p><p>똑같은 애들부터 찾아서 처리해야 합니다</p><p>남들이 짠 코드에도 많은 고민과 의도가 숨겨져있을 것이라 생각하고 바라보셔야 합니다</p><p>오픈소스나 프로개발자들이 짠 코드에는 굉장히 많은 메타포가 숨어있습니다</p><p>언어 사용에 익숙한 사람들에게는 그것이 읽힙니다</p><p>한국어로 다양하게 노란색을 표현해도 뉘앙스를 느끼시듯이 언어에 익숙해지면 코드를 보고 뉘앙스를 느낍니다 똑같이</p><p>그러려면 여러분들이 뉘앙스를 표현할만큼 언어를 깊이 써야 합니다</p><p>코드에 다 의도가 있습니다</p><p><div> 와 <img>는 태그를 연다는 공통점이 있습니다, 는 외톨이</div></p><p>태그를 열면 어떤 일이 일어나야 하는가? 태그가 닫힐 때까지의 그 이후 내용들은 모두 해당 태그의 자식이 되어야 함</p><p>물론 <img>는 열리자마자 닫혀서 그 이후 태그들에게 내용들이 향해야 곳에 주지 않지만, 열어서 새로운 태그를 만들어냈다는 점은 동일</p><p>사물을 보고 데이터 애널리시스를 하는데 추상화된 공통점과 재귀적인 로직을 발견하는 것이 우리의 몫입니다</p><p>그것을 못하면 코드는 계속 길어지고 if 로 분기만 하게 됩니다</p><p>단위테스트를 만들거나 TDD 를 해도 나쁜 개발자는 나쁜 데이터 애널리시스를 하고 나쁜 로직을 짰기 때문에</p><p>테스트 케이스를 100 개 만들면 100 개의 케이스가 통과한 것만 증명하지, 101 번째 케이스에 문제가 없다는 것을 증명하지 못합니다</p><p>원래 코드가 나쁘거나 설계가 잘못 되었으면 TDD 를 해도 소용이 없다</p><p>TDD 를 도입하는 것과 데이터를 바라보거나 추상적인 로직을 이해하는 것은 별개의 문제이다</p><p>어차피 데이터 애널리시스를 잘못하면 무엇을 해도 나쁜 코드가 나온다</p><p>좋은 코드를 짜는 비밀은 TDD 에 있는 것이 아니라 데이터를 이해하고 재귀적인 로직을 찾아내거나 추상화된 공통점을 찾아낼 수 있는지 역할을 이해하는지 여부에 달려있다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> textNode = <span class="function">(<span class="params">input, cursor, curr</span>) =&gt;</span> &#123;...&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parser = <span class="function"><span class="params">input</span> =&gt;</span> &#123;</span><br><span class="line">  input = input.trim();</span><br><span class="line">  <span class="keyword">const</span> result = &#123; <span class="attr">name</span>: <span class="string">"ROOT"</span>, <span class="attr">type</span>: <span class="string">"node"</span>, <span class="attr">children</span>: [] &#125;;</span><br><span class="line">  <span class="keyword">const</span> stack = [&#123; <span class="attr">tag</span>: result &#125;];</span><br><span class="line">  <span class="keyword">let</span> curr,</span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    j = input.length;</span><br><span class="line">  <span class="keyword">while</span> ((curr = stack.pop())) &#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">      <span class="keyword">const</span> cursor = i;</span><br><span class="line">      <span class="keyword">if</span> (input[cursor] === <span class="string">"&lt;"</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> idx = input.indexOf(<span class="string">'&gt;'</span>, cursor);</span><br><span class="line">        i = idx + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (input[cursor + <span class="number">1</span>] === <span class="string">'/'</span>) &#123;&#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (input[idx - <span class="number">1</span>] === <span class="string">'/'</span>) &#123;&#125;</span><br><span class="line">          <span class="keyword">else</span> &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> i = textNode(input, cursor, curr);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>input[cursor + 1] === &#39;/&#39;</code>는  케이스</p><p>그 뒤에 <code>input[idx - 1] === &#39;/&#39;</code> 여부로 <img> (true)와 <div> (false)를 나눈다</div></p><p>멘탈 모델이 그려지면, 코드로도 똑같이 표현되는 것이 정상이에요, 그래야 유지보수를 할 수 있습니다</p><p>그렇기 때문에 주석이 불필요합니다</p><p>그럼에도 주석이 필요하다고 느낀다면 개발자를 그만 둘 때입니다</p><p>여는 태그는 닫는 태그를 알아야 하고, 닫는 태그는 여는 태그를 알아야 하니, <img>부터 구현하도록 합니다</p><p>현실 세계를 인식해서 그 현실 세계를 해결할 코드를 짠다면 반대로 현실 세계에 대입해도 코드가 정확히 매핑되어야 합니다</p><p>바른 데이터 애널리시스를 했다면 코드는 거의 매핑이다, 어렵지 않습니다</p><p>여러분들이 알고리즘을 짜는데 어려움을 겪거나 애플리케이션을 못 만들어내겠다면 데이터 애널리시스에 실패한 것입니다</p><p>데이터 애널리시스를 잘 했으면 바로 매핑됩니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> textNode = <span class="function">(<span class="params">input, cursor, curr</span>) =&gt;</span> &#123;...&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parser = <span class="function"><span class="params">input</span> =&gt;</span> &#123;</span><br><span class="line">  input = input.trim();</span><br><span class="line">  <span class="keyword">const</span> result = &#123; <span class="attr">name</span>: <span class="string">"ROOT"</span>, <span class="attr">type</span>: <span class="string">"node"</span>, <span class="attr">children</span>: [] &#125;;</span><br><span class="line">  <span class="keyword">const</span> stack = [&#123; <span class="attr">tag</span>: result &#125;];</span><br><span class="line">  <span class="keyword">let</span> curr,</span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    j = input.length;</span><br><span class="line">  <span class="keyword">while</span> ((curr = stack.pop())) &#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">      <span class="keyword">const</span> cursor = i;</span><br><span class="line">      <span class="keyword">if</span> (input[cursor] === <span class="string">"&lt;"</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> idx = input.indexOf(<span class="string">'&gt;'</span>, cursor);</span><br><span class="line">        i = idx + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (input[cursor + <span class="number">1</span>] === <span class="string">'/'</span>) &#123;&#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> name, isClose;</span><br><span class="line">          <span class="keyword">if</span> (input[idx - <span class="number">1</span>] === <span class="string">'/'</span>) &#123;</span><br><span class="line">            name = input.substring(cursor + <span class="number">1</span>, idx - <span class="number">1</span>), isClose = <span class="literal">true</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            name = input.substring(cursor + <span class="number">1</span>, idx), isClose = <span class="literal">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> i = textNode(input, cursor, curr);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>대응되도록 똑같은 쌍을 만들어줍니다, 느껴지는 차이를 그대로 코드로 옮겨온 것입니다, 한국어를 코드로 번역하는 과정</p><p>정확하게 한국어로 상황을 인식할 수 있다면 코드는 그냥 번역하면 됩니다</p><p>번역할 때 뉘앙스를 줘라, if else 라는 두 가지 이지선다를 주고 이지선다가 똑같이 동형으로 똑같은 리듬이 느껴지는 것을 원했습니다</p><p>조건에 따라 약간의 차이가 존재한다는 뉘앙스가 전달되어야 합니다</p><p>문학적인 표현이 필요한게 아니라, 데이터 애널리시스에 대한 관점을 정확하게 표현하는 것은 유지보수를 위해 항상 필요합니다</p><p>섬세하다고 느껴지시면 맞습니다, 고급 개발자들은 언어에 익숙하기 때문에 섬세하게 짭니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> idx = input.indexOf(<span class="string">"&gt;"</span>, cursor);</span><br><span class="line">i = idx + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (input[cursor + <span class="number">1</span>] === <span class="string">"/"</span>) &#123;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> name, isClose;</span><br><span class="line">  <span class="keyword">if</span> (input[idx - <span class="number">1</span>] === <span class="string">"/"</span>) &#123;</span><br><span class="line">    (name = input.substring(cursor + <span class="number">1</span>, idx - <span class="number">1</span>)), (isClose = <span class="literal">true</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    (name = input.substring(cursor + <span class="number">1</span>, idx)), (isClose = <span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> tag = &#123; name, <span class="attr">type</span>: <span class="string">"node"</span>, <span class="attr">children</span>: [] &#125;;</span><br><span class="line">  curr.tag.children.push(tag);</span><br><span class="line">  <span class="keyword">if</span> (!isClose) &#123;</span><br><span class="line">    stack.push(&#123; tag, <span class="attr">back</span>: curr &#125;);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>차이점을 처리했다면 더이상 차이를 케이스로 인식하지 않아도 됩니다</p><p>원래 케이스였던 것을 값으로 흡수한 뒤에는 더이상 케이스를 인식하지 않고 값을 사용하는 일반화된 알고리즘이 나옵니다</p><p>메모리와 연산은 교환됩니다</p><p>차이를 일으키는 연산을 메모리로 흡수한 다음에, 메모리를 가리키는 하나의 연산만 기술하면 됩니다</p><p>name 을 화이트리스트라고 부릅니다, 함수의 인자를 필터링해서 안정적인 조건을 만든다든지 서버에서 내려준 JSON 을 View 가 소비하기 좋게 바꾼다는지 등</p><p>알고리즘은 그러한 복잡성을 모두 제거하고 복잡성이 모두 제거되어 안정화된 상태에서 화이트리스트를 가지고 알고리즘을 하나만 구현하는 것이 제일 최선이다</p><p>알고리즘으로 함부로 돌입하지 말고, 화이트리스트 작성에 굉장히 공을 많이 들인 다음에 완전히 정제되어있는 화이트리스트용 알고리즘만 하나 구현하시는 것이 최선입니다, 가장 유지보수도 수월합니다</p><p>번역층을 거치면 화이트리스트를 기반으로 이 알고리즘은 잘 동작할 것이라고 보장됩니다</p><p>stack 에 push 후 break 를 하는 것은 마치 함수를 호출할 때 리턴포인트를 알고 끝나면 그곳으로 돌아가는 것의 수동 버전과 같습니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> elementNode = <span class="function">(<span class="params">input, cursor, idx, curr, stack</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> name, isClose;</span><br><span class="line">  <span class="keyword">if</span> (input[idx - <span class="number">1</span>] === <span class="string">'/'</span>) &#123;</span><br><span class="line">    name = input.substring(cursor + <span class="number">1</span>, idx - <span class="number">1</span>), isClose = <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    name = input.substring(cursor + <span class="number">1</span>, idx), isClose = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> tag = &#123;name, <span class="attr">type</span>: <span class="string">'node'</span>, <span class="attr">children</span>: []&#125;;</span><br><span class="line">  curr.tag.children.push(tag);</span><br><span class="line">  <span class="keyword">if</span> (!isClose) &#123;</span><br><span class="line">    stack.push(&#123; tag, <span class="attr">back</span>: curr &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> textNode = <span class="function">(<span class="params">input, cursor, curr</span>) =&gt;</span> &#123;...&#125;;</span><br><span class="line"><span class="keyword">const</span> parser = <span class="function"><span class="params">input</span> =&gt;</span> &#123;</span><br><span class="line">  input = input.trim();</span><br><span class="line">  <span class="keyword">const</span> result = &#123; <span class="attr">name</span>: <span class="string">'ROOT'</span>, <span class="attr">type</span>: <span class="string">'node'</span>, <span class="attr">children</span>: [] &#125;, stack = [&#123; <span class="attr">tag</span>: result &#125;];</span><br><span class="line">  <span class="keyword">let</span> curr, i = <span class="number">0</span>, j = input.length;</span><br><span class="line">  <span class="keyword">while</span> (curr = stack.pop()) &#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">      <span class="keyword">const</span> cursor = i;</span><br><span class="line">      <span class="keyword">if</span> (input[cursor] === <span class="string">'&lt;'</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> idx = input.indexOf(<span class="string">'&gt;'</span>, cursor);</span><br><span class="line">        i = idx + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (input[cursor + <span class="number">1</span>] === <span class="string">'/'</span>) &#123;</span><br><span class="line">          curr = curr.back;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (elementNode(input, cursor, idx, curr, stack)) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> i = textNode(input, cursor, curr);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>break 는 외부 제어 통제이므로 elementNode 함수 안에서 통제할 수 없으므로 flag 변수로 리턴해줍니다</p><p>코드의 가독성은 어떻게 확보하는가?</p><p>변수명, 코드컨벤션 등으로 가독성이 확보되지 않습니다</p><p>알고리즘, 수학적 함수, 연산 등은 어렵습니다</p><p>컴퓨터가 연산해야 할 것을 머리속으로 생각하면서 읽어야 하기 때문입니다</p><p>어떤 코드가 읽기 쉬운가? 역할에게 위임하는 코드</p><p>역할을 인식해서 역할에게 위임하는 코드를 짜야 합니다, 오직 그것만이 쉽게 합니다</p><p>알고리즘 등은 원래 무조건 어렵습니다</p><p>적절한 역할모델로 위임되어서 그것들간의 통신과 협업만 볼 수 있는 코드가 가독성 높은 코드입니다</p><p>console.log(parser(<code>&lt;div&gt;a&lt;a&gt;b&lt;/a&gt;c&lt;img/&gt;d&lt;/div&gt;</code>));</p><p>HTML 에서 태그간 엔터만 쳐도 텍스트노드가 생성됩니다</p><p>HTML 압축은 DOM 의 렌더링 대상을 줄여줄 수 있게 됩니다</p><p>CSS, JS 압축보다 HTML 압축을 하면 생성되는 노드수를 줄일 수 있다, 브라우저 부하를 줄일 수 있습니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> elementNode = <span class="function">(<span class="params">input, cursor, idx, curr, stack</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> isClose = input[idx - <span class="number">1</span>] === <span class="string">"/"</span>;</span><br><span class="line">  <span class="keyword">const</span> tag = &#123;</span><br><span class="line">    name: input.substring(cursor + <span class="number">1</span>, idx - (isClose ? <span class="number">1</span> : <span class="number">0</span>)),</span><br><span class="line">    type: <span class="string">"node"</span>,</span><br><span class="line">    children: []</span><br><span class="line">  &#125;;</span><br><span class="line">  curr.tag.children.push(tag);</span><br><span class="line">  <span class="keyword">if</span> (!isClose) &#123;</span><br><span class="line">    stack.push(&#123; tag, <span class="attr">back</span>: curr &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>중복된 코드를 줄이는 수준은 우리의 수준에 달려있어요</p><p>켄트벡이 말하길, 중복은 제거하는게 아니라 발견하는 것이라 했습니다</p><p>프로그래머의 수준에 따라서 코드 수준의 중복, 아키텍처 수준의 중복, 데이터 상의 중복 등을 깨닫게 됩니다</p><p>궁극적으로 개발 중복을 다 인식하게 되면, 개발을 모두 직접 짜는 행위가 없어지고 솔루션화 됩니다</p><p>처음에는 케이스 바이 케이스로 코드로 만들다가 공통되는 부분들이 자동으로 처리되다가 나중에는 코드로 구현할 것이 하나도 없이 명령만으로 다 되게끔 바뀝니다</p><p>코드를 이따금씩 바라보면서 중복이 보일 때마다 내 실력이 올라갔구나 라고 느끼시면 됩니다</p><p>코드 수준의 중복을 바라보는 것과 아키텍처 수준의 중복을 발견해내는 것이 동시에 올라가는 것이 아니라 따로 따로 훈련해야 올라가게 되어있습니다</p><p>코드 수준의 중복에 대한 이해는 언어에 대한 바른 이해와 문법적인 해박한 사용방법에 대해 이해할수록 높일 수 있습니다</p><p>의미를 훼손하지 않고 줄였음에도 초보자들에게는 암호처럼 보일 수 있습니다</p><p>왜냐하면 초보자들은 언어를 네이티브처럼 쓰지 않기 때문입니다</p><p>아키텍처 레벨은 역할 관계를 인식하고, 책임이 어디까지 닿아있는지, 얼마나 확장가능성이 있는지 등을 보는 눈에서부터 어디가 중복이고 어디를 레이어로 나눌지에 대한 눈이 생겨야 합니다</p><p>데이터 중복은 전통적인 RDB 에 있는 정규화를 비롯해서 다양한 데이터에 대한 중복을 제거하는 안정적인 로직들이 많이 있습니다</p><p>제가 코드를 인정하는 기준은 딱 하나에요, 컴퓨터가 인정하면 나도 인정</p><p>여러분들이 남의 코드를 바라보면서 스트레스를 받는 이유는, 자꾸 비이성적인 것들이 프레임처럼 작용해서 가로막고 있어서 코드를 못 읽게 만들기 때문입니다</p><p>심리적인 장벽이 힘들게 만듭니다</p><p>남의 코드를 바라보면서 내가 원하는 스타일이 아니면 힘들게 여기는 것입니다</p><p>심리적인 장벽을 없애고 선입견을 내려놓고 바라보면 그냥 보입니다</p><p>사람들은 자기 코드를 인정해주고 잘 돌아가지 않는 부분에 대해서 조언을 해주거나 더 좋은 코드가 되기 위한 알고리즘을 제안해주는 사람을 따르기 마련입니다</p><p>여러분들이 선입견을 버리지 않으면 그렇지 못한 사람이 될 것입니다</p><p>코드는 잘 동작하고 바른 로직으로 되어있으면 다 바른 코드입니다</p><p>스타일은 별로 중요하지 않습니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> textNode = <span class="function">(<span class="params">input, cursor, curr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> idx = input.indexOf(<span class="string">"&lt;"</span>, cursor);</span><br><span class="line">  curr.tag.children.push(&#123;</span><br><span class="line">    type: <span class="string">"text"</span>,</span><br><span class="line">    text: input.substring(cursor, idx)</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> idx;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> elementNode = <span class="function">(<span class="params">input, cursor, idx, curr, stack</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> isClose = input[idx - <span class="number">1</span>] === <span class="string">"/"</span>;</span><br><span class="line">  <span class="keyword">const</span> tag = &#123;</span><br><span class="line">    name: input.substring(cursor + <span class="number">1</span>, idx - (isClose ? <span class="number">1</span> : <span class="number">0</span>)),</span><br><span class="line">    type: <span class="string">"node"</span>,</span><br><span class="line">    children: []</span><br><span class="line">  &#125;;</span><br><span class="line">  curr.tag.children.push(tag);</span><br><span class="line">  <span class="keyword">if</span> (!isClose) &#123;</span><br><span class="line">    stack.push(&#123; tag, <span class="attr">back</span>: curr &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parser = <span class="function"><span class="params">input</span> =&gt;</span> &#123;</span><br><span class="line">  input = input.trim();</span><br><span class="line">  <span class="keyword">const</span> result = &#123; <span class="attr">name</span>: <span class="string">"ROOT"</span>, <span class="attr">type</span>: <span class="string">"node"</span>, <span class="attr">children</span>: [] &#125;,</span><br><span class="line">    stack = [&#123; <span class="attr">tag</span>: result &#125;];</span><br><span class="line">  <span class="keyword">let</span> curr,</span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    j = input.length;</span><br><span class="line">  <span class="keyword">while</span> ((curr = stack.pop())) &#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">      <span class="keyword">const</span> cursor = i;</span><br><span class="line">      <span class="keyword">if</span> (input[cursor] === <span class="string">"&lt;"</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> idx = input.indexOf(<span class="string">"&gt;"</span>, cursor);</span><br><span class="line">        i = idx + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (input[cursor + <span class="number">1</span>] === <span class="string">"/"</span>) &#123;</span><br><span class="line">          curr = curr.back;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (elementNode(input, cursor, idx, curr, stack)) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> i = textNode(input, cursor, curr);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(parser(<span class="string">`&lt;div&gt;a&lt;a&gt;b&lt;/a&gt;c&lt;img/&gt;d&lt;/div&gt;`</span>));</span><br></pre></td></tr></table></figure><p>HTML 은 멀티 스택 상황이 발생하지 않습니다, 컨텍스트가 동시에 두 개가 진행되지 않습니다, 이런 경우에는 스택 배열이 필요없고 하나의 변수에서만 교체해주면 됩니다, 하지만 많은 경우에는 여러 개를 동시에 유지하면서 따로 따로 주기를 가지고 컨텍스트가 교체되곤 합니다, 지금은 curr 하나만 가지고 있으면 됩니다</p><p>코드를 만드는데 차이는 디테일에서 생겨납니다, 오늘까지 해서 함수를 배우신 것입니다, 게다가 함수형 프로그래밍은 다루지 않았고, 루틴을 다루는 방법만 배운 것입니다, 루틴에 먼저 익숙해지는 것이야말로 중급개발자로 가는 기본이고, 루틴에 익숙하지 않은 사람은 객체구조를 만들어도 어차피 엉망으로 만들게 되어있습니다</p><p>Q0. 위 구조를 꼬리물기 최적화되는 재귀로 바꿀 수는 없는가? (위를 2 단 루프로 구성한 것은 stack point 를 인식해서 재귀함수로 만들기 더 쉬우시라는 의미였다, 이너루프만 함수로 만들면 되기 때문에)</p><p>Q1. stack 을 벗어날 때는 바깥 쪽 stack 으로 나가지 않으면서 왜 stack 을 추가할 때는 바깥 쪽 stack 으로 나갔다가 들어오지? stack 구조를 모두 지우고 curr 를 교체하는 것만으로 구현할 수 있지 않은가?</p><p>Q2. JSON 문자열을 받아 JSON Object 를 리턴해주는 JSON Parser, HTML 에서의 C 타입에 해당하는 것이 string, integer, boolean, null 인 것, 그리고 object 시작하면 object 닫아야 하고, array 시작했으면 array 닫아야 함, “ 안에 중괄호나 대괄호가 있으면 그저 문자입니다, HTML 와 달리 이스케이프를 지원해주어야 합니다</p><p>Q3. 속성이 포함된 html 을 파싱하기 <code>&lt;div style=&quot;background:red&quot; class=&quot;test&quot;&gt;...&lt;/div&gt;</code> 이런 식으로 태그 안의 여러 속성을 각 노드에서 attribute 라는 별도의 배열에 저장하기</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;어플리케이션을 짤 때, 대부분의 경우는 인식하여 구조화해서 프로그래밍 해야 하는 경우가 대부분&lt;/p&gt;
&lt;p&gt;HTML 파서를 짤려면 HTML 을 보고 구조적으로 분석해야 함&lt;/p&gt;
&lt;p&gt;구조화를 무한히 하면 무한한 케이스가 될 뿐, 구조화의 목표는
      
    
    </summary>
    
      <category term="Dev" scheme="https://eclatant.io/categories/Dev/"/>
    
    
      <category term="Dev" scheme="https://eclatant.io/tags/Dev/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 교과서</title>
    <link href="https://eclatant.io/2018/08/12/NodeJS-TextBook/"/>
    <id>https://eclatant.io/2018/08/12/NodeJS-TextBook/</id>
    <published>2018-08-11T15:00:00.000Z</published>
    <updated>2018-12-10T09:48:32.814Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1장-Node-js-시작하기"><a href="#1장-Node-js-시작하기" class="headerlink" title="1장 Node.js 시작하기"></a>1장 Node.js 시작하기</h2><p>Node.js란 무엇인가?</p><p>Node.js, JavaScript Runtime Environment</p><p>런타임은 특정 언어로 만든 프로그램들을 실행할 수 있는 환경</p><p>따라서 는 자바스크립트를 웹 브라우저 밖에서 실행할 수 있게 해주는 환경</p><p>Node.js는 두 가지 버전 체계를 운영함, LTS(Long Term Support) / Current</p><p>LTS의 대상이 되는 버전은 짝수버전이며, LTS 스케쥴은 여기에서 확인할 수 있다 <a href="https://github.com/nodejs/Release#release-schedule" target="_blank" rel="noopener">Link</a></p><p>Node.js 설치 방법은 다양하나, 여러 가지 버전을 동시에 관리해야 한다면 <a href="https://github.com/nodenv/nodenv" target="_blank" rel="noopener">nodenv</a> 를 추천함</p><p>Node.js 내부 구조는 Node.js Core Library, Node.js Bindings, V8(자바스크립트 엔진), libuv(비동기 I/O) 로 되어있다고 함</p><p>Node.js는 libuv 라이브러리를 통해 이벤트 기반, 논 블록킹 I/O 모델을 차용했다고 하는데, 두 가지는 각각 어떤 의미인가?</p><hr><p>이벤트 루프에 대해서는 다음 두 개념을 이해한 뒤 아티클을 읽어보는 것이 가장 좋을 것이라 생각한다</p><p>프로세스란 운영체제에서 할당하는 자원의 단위이다</p><p>스레드는 프로세스 내에서 실행되는 흐름의 단위이다, 하나의 프로세스는 스레드를 여러 개 가지며 부모 프로세스의 자원을 공유할 수 있어서 같은 메모리에 접근할 수 있다</p><p><a href="https://meetup.toast.com/posts/89" target="_blank" rel="noopener">자바스크립트와 이벤트 루프</a></p><hr><p>논 블록킹 I/O에 대해 이해하기 위해서 Blocking, NonBlocking, Sync, Async 에 대해 살펴보자</p><ul><li><a href="https://eclatant.io/2018/12/09/2018-12-09-Block-NonBlock-Sync-Async/">Block, NonBlock, Sync, Async</a></li></ul><hr><h2 id="2장-알아두어야-할-자바스크립트"><a href="#2장-알아두어야-할-자바스크립트" class="headerlink" title="2장 알아두어야 할 자바스크립트"></a>2장 알아두어야 할 자바스크립트</h2><h3 id="ES2015"><a href="#ES2015" class="headerlink" title="ES2015+"></a>ES2015+</h3><h4 id="const-let"><a href="#const-let" class="headerlink" title="const, let"></a>const, let</h4><p>var와 달리 block scope이고 재선언이 불가능하고 hoisting이 이루어지지만 TDZ가 존재한다는 점이 중요하다</p><p>또한 let과 const는 재할당 가능 여부에 따라 차이가 존재한다</p><p>마지막으로 const 변수에 담긴 것이 Primitive가 아닌 Reference Type일 경우 Immutable하다고 볼 수 없다</p><p>어떠한 객체가 가진 주소값은 동일할지라도 해당 객체에 담긴 값들은 바뀔 수 있기 때문이다</p><ul><li><a href="https://jaeyeophan.github.io/2017/04/18/let-const/" target="_blank" rel="noopener">1. let &amp; const</a></li><li><a href="https://poiemaweb.com/es6-block-scope" target="_blank" rel="noopener">let, const와 블록 레벨 스코프</a></li><li><a href="https://medium.com/korbit-engineering/let과-const는-호이스팅-될까-72fcf2fac365" target="_blank" rel="noopener">let과 const는 호이스팅 될까?</a></li></ul><h4 id="템플릿-문자열"><a href="#템플릿-문자열" class="headerlink" title="템플릿 문자열"></a>템플릿 문자열</h4><p><code>${variable}</code> 형태의 string interpolation 또는 template substitution는 어렵지 않지만,  훨씬 어렵고 소중한 부분은 tagged templates이다, reduce와 결합하면 템플릿 엔진 부럽지 않게 만들 수 있다</p><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Template_literals#Tagged_templates" target="_blank" rel="noopener">Tagged templates</a></li><li><a href="http://hacks.mozilla.or.kr/2015/08/es6-in-depth-template-strings-2/" target="_blank" rel="noopener">ES6 In Depth: 템플릿 문자열</a></li></ul><h4 id="화살표-함수"><a href="#화살표-함수" class="headerlink" title="화살표 함수"></a>화살표 함수</h4><p>단순 문법을 넘어서서 함수와 결정적 차이는 책에 나오는 this binding 이외에도 prototype와 arguments이다</p><p>인자의 정보를 받아오고 싶다면 Rest parameter를 사용하거나, scope chain을 통해 상위 함수(당연히 이 함수는 화살표 함수가 아니어야 한다)의 arguments를 참조해야 한다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> func = <span class="function">(<span class="params">...args</span>) =&gt;</span> <span class="built_in">console</span>.log(...args);</span><br><span class="line">func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hoc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">hoc(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)();</span><br></pre></td></tr></table></figure><ul><li><a href="https://poiemaweb.com/es6-arrow-function#42-prototype" target="_blank" rel="noopener">화살표 함수 - prototype</a></li><li><a href="http://hacks.mozilla.or.kr/2015/08/es6-in-depth-rest-parameters-and-defaults/" target="_blank" rel="noopener">ES6 In Depth: 레스트 파라메터와 디폴트 파라메터</a></li></ul><h4 id="비구조화-할당"><a href="#비구조화-할당" class="headerlink" title="비구조화 할당"></a>비구조화 할당</h4><ul><li><a href="http://hacks.mozilla.or.kr/2015/09/es6-in-depth-destructuring/" target="_blank" rel="noopener">ES6 In Depth: 디스트럭처링(Destructuring)</a></li></ul><h4 id="프로미스"><a href="#프로미스" class="headerlink" title="프로미스"></a>프로미스</h4><p>비동기 연산을 다루는 객체이다</p><ul><li><a href="https://eclatant.io/2018/12/10/2018-12-10-Async/">Async</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1장-Node-js-시작하기&quot;&gt;&lt;a href=&quot;#1장-Node-js-시작하기&quot; class=&quot;headerlink&quot; title=&quot;1장 Node.js 시작하기&quot;&gt;&lt;/a&gt;1장 Node.js 시작하기&lt;/h2&gt;&lt;p&gt;Node.js란 무엇인가?&lt;/p&gt;
      
    
    </summary>
    
      <category term="node" scheme="https://eclatant.io/categories/node/"/>
    
    
      <category term="node" scheme="https://eclatant.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>실용적인 함수형 자바스크립트 Intro</title>
    <link href="https://eclatant.io/2018/07/09/Functional-Programming-Intro/"/>
    <id>https://eclatant.io/2018/07/09/Functional-Programming-Intro/</id>
    <published>2018-07-08T15:00:00.000Z</published>
    <updated>2019-02-10T18:30:22.917Z</updated>
    
    <content type="html"><![CDATA[<h1 id="자바스크립트로-알아보는-함수형-프로그래밍"><a href="#자바스크립트로-알아보는-함수형-프로그래밍" class="headerlink" title="자바스크립트로 알아보는 함수형 프로그래밍"></a>자바스크립트로 알아보는 함수형 프로그래밍</h1><h2 id="함수형-프로그래밍-개요"><a href="#함수형-프로그래밍-개요" class="headerlink" title="함수형 프로그래밍 개요"></a>함수형 프로그래밍 개요</h2><h3 id="함수형-프로그래밍-정의-순수함수"><a href="#함수형-프로그래밍-정의-순수함수" class="headerlink" title="함수형 프로그래밍 정의, 순수함수"></a>함수형 프로그래밍 정의, 순수함수</h3><p>성공적인 프로그래밍이란?</p><ul><li>좋은 프로그램을 만드는 일<ul><li>사용성, 성능, 확장성, 기획 변경에 대한 대응력이 좋은 것</li></ul></li><li>위 사항들을 효율적이고 생산적으로 이루어지는 것이 성공적인 프로그래밍</li></ul><p>함수형 프로그래밍은 성공적인 프로그래밍을 위해 부수효과를 미워하고 조합성을 강조하는 프로그래밍 패러다임</p><ul><li>부수효과를 미워한다 =&gt; 순수함수를 만든다<ul><li>순수함수란?<ul><li>부수효과가 없음<ul><li>외부의 대상에 영향을 끼치지 않음</li><li>인자를 변경하지 않음</li><li>리턴 값 외에는 외부와 소통하는 것이 없음</li></ul></li><li>수학적 함수</li><li>인자가 동일하면 동일한 결과를 반환</li><li>상수적 자유변수를 참조할 수 없다는 것은 아님</li></ul></li><li>오류는 적고 안정성은 높다</li></ul></li><li>조합성을 강조한다 =&gt; 모듈화 수준을 높인다<ul><li>순수함수의 조합으로 프로그래밍 진행</li><li>모듈화 수준이 높다 = 생산성을 높인다<ul><li>모듈화 수준이 높다는 것은 성공적인 프로그래밍의 척도</li><li>재사용성이 높고 팀웍도 좋고 기획 변경에 대한 대응력이 높음</li></ul></li></ul></li></ul><p>순수함수란?</p><ul><li>인자가 동일하면 동일한 결과를 반환<ul><li>평가 시점이 중요하지 않음<ul><li>평가시점을 개발자가 다룰 수 있음<ul><li>다양한 로직과 이점을 취할 수 있음</li></ul></li><li>항상 동일한 결과를 리턴할 것이기에 안전하고 다루기 쉬운 함수이고 따라서 조합성을 강조시킬 수 있음<ul><li>다른 함수의 인자로 넘겨주거나, 전혀 다른 곳에서 함수를 평가시켜도 항상 동일한 결과를 리턴</li></ul></li><li>그렇지 않은 함수들은 평가 시점에 따라 결과가 달라지게 됨</li></ul></li></ul></li><li>부수효과가 없음<ul><li>리턴 외의 출력이 없음</li><li>인자를 변경하지 않음<ul><li>원하는 부분이 변형된 새로운 값을 만들어 리턴하는 방식으로 진행</li></ul></li></ul></li></ul><hr><h3 id="일급함수-add-maker-함수로-함수-실행하기"><a href="#일급함수-add-maker-함수로-함수-실행하기" class="headerlink" title="일급함수, add_maker, 함수로 함수 실행하기"></a>일급함수, add_maker, 함수로 함수 실행하기</h3><p>일급함수</p><ul><li>함수를 값으로 다룰 수 있음<ul><li>변수에 담을 수 있음</li><li>인자로 넘겨줄 수 있음</li></ul></li><li>런타임에서 언제든 정의할 수 있다</li><li>원할 때 평가할 수 있다<ul><li>다른 함수가 실행하도록 할 수 있음</li></ul></li></ul><p>일급함수 개념과 순수함수 특징을 이용해서 함수의 조합성을 높여나가는 것이 함수형 프로그래밍</p><p>평가 시점에서 자유로운 순수함수들을 만들고, 순수함수들을 값으로 가지고 다니면서 적절한 시점마다 평가를 하는 다양한 로직을 만들어나가는 것이 함수형 프로그래밍</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add_maker</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add10 = add_maker(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( add10(<span class="number">20</span>) ); <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><p>순수함수, 일급함수와 클로저가 함께 사용되는 예제</p><ul><li>내부함수는 자신의 입장에선 a를 변경하지 않고, 늘 같은 a를 바라보고 있는 순수함수</li><li>내부함수는 a를 참조하는 클로저</li><li>add_maker(10)의 결과를 add10에 담을 수 있는 것은 일급함수의 성질</li></ul><p>내 나름대로의 클로저 정의</p><ul><li>자유변수를 참조하는 함수</li><li>스코프</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f4</span>(<span class="params">f1, f2, f3</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> f3(f1() + f2());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  f4(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123; <span class="keyword">return</span> a * a; &#125;</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>함수가 어떤 함수들을 인자로 받아서 그 함수가 원하는 로직대로 원하는 시점에 원하는 인자를 적용하면서 프로그램을 완성해나가는 것이 함수형 프로그래밍</p><p>순수함수들을 조합하고, 최종적으로 어떠한 결과를 만들어가는 것</p><p>순수함수를 만들고 조합하는 평가시점과 방법, 어떤 로직 사이에서 평가를 할 것인지 결정하면서 큰 로직을 구성</p><h2 id="비동기-동시성을-확보할-수-있도록-원하는-시점까지-값으로-함수를-가지고-다니다가-원하는-시점-또는-필요한-부분에서-받아둔-함수를-여러-번-실행하는-등의-로직을-구현-가능"><a href="#비동기-동시성을-확보할-수-있도록-원하는-시점까지-값으로-함수를-가지고-다니다가-원하는-시점-또는-필요한-부분에서-받아둔-함수를-여러-번-실행하는-등의-로직을-구현-가능" class="headerlink" title="비동기, 동시성을 확보할 수 있도록 원하는 시점까지 값으로 함수를 가지고 다니다가 원하는 시점 또는 필요한 부분에서 받아둔 함수를 여러 번 실행하는 등의 로직을 구현 가능"></a>비동기, 동시성을 확보할 수 있도록 원하는 시점까지 값으로 함수를 가지고 다니다가 원하는 시점 또는 필요한 부분에서 받아둔 함수를 여러 번 실행하는 등의 로직을 구현 가능</h2><h3 id="요즘-개발-이야기-함수형-프로그래밍-정의"><a href="#요즘-개발-이야기-함수형-프로그래밍-정의" class="headerlink" title="요즘 개발 이야기, 함수형 프로그래밍 정의"></a>요즘 개발 이야기, 함수형 프로그래밍 정의</h3><p>요즘 개발 이야기</p><ul><li>재미/실시간성 : 라이브 방송, 실시간 댓글, 협업, 메신저</li><li>독창성/완성도 : 애니메이션, 무한스크롤, Masonry</li><li>더 많아져야하는 동시성 : 비동기 I/O, CSP, Actor, STM</li><li>더 빨라야하는 반응성/고가용성 : ELB, Auto Scailing, OTP Supervisor</li><li>대용량/정확성/병렬성 : MapReduce, Clojure Reducers</li><li>복잡도/MSA/… : 많아지고 세밀해지는 도구들</li></ul><p>스멀스멀 다가오는 FP</p><ul><li>좋아지는 하드웨어 성능과 컴파일러, 함수형 프로그래밍 기술, 좋아지는 분산/리액티브 환경, 동시성 + 병렬성 관련 기술, 성공적인 적용 사례와 영향</li></ul><p>마이클 포거스</p><ul><li>함수형 프로그래밍은 애플리케이션, 함수의 구성요소, 더 나아가서 언어 자체를 함수처럼 여기도록 만들고, 이러한 함수 개념을 가장 우선순위에 놓는다.</li><li>함수형 사고방식은 문제의 해결 방법을 동사(함수)들로 구성(조합)하는 것</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 데이터(객체) 기준</span></span><br><span class="line">duck.moveLeft();</span><br><span class="line">duck.moveRight();</span><br><span class="line">dog.moveLeft();</span><br><span class="line">dog.moveRight();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수 기준</span></span><br><span class="line">moveLeft(dog);</span><br><span class="line">moveRight(duck);</span><br><span class="line">moveLeft(&#123; <span class="attr">x</span>: <span class="number">5</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;);</span><br><span class="line">moveRight(dog);</span><br></pre></td></tr></table></figure><p>함수가 먼저 나오느냐, 객체가 먼저 나오느냐 (FP, OOP)</p><ul><li>객체지향에서는 데이터를 먼저 디자인하고, 그 데이터에 맞는 메소드를 만드는 방식으로 진행하고, 함수형은 함수를 만들고 함수에 맞게 데이터셋을 구성하는 방식으로 진행한다 (데이터의 형태를 함수를 사용할 수 있도록 디자인)</li></ul><h2 id="왜-보다는-어떻게-를-다루겠다고-하셨음-어떻게를-알려면-어떻게-전환하는가-전환해왔는가-를-아는-것이-중요함"><a href="#왜-보다는-어떻게-를-다루겠다고-하셨음-어떻게를-알려면-어떻게-전환하는가-전환해왔는가-를-아는-것이-중요함" class="headerlink" title="왜? 보다는 어떻게!를 다루겠다고 하셨음, 어떻게를 알려면 어떻게 전환하는가? 전환해왔는가? 를 아는 것이 중요함"></a>왜? 보다는 어떻게!를 다루겠다고 하셨음, 어떻게를 알려면 어떻게 전환하는가? 전환해왔는가? 를 아는 것이 중요함</h2><h2 id="함수형으로-전환하기"><a href="#함수형으로-전환하기" class="headerlink" title="함수형으로 전환하기"></a>함수형으로 전환하기</h2><h3 id="회원-목록-map-filter"><a href="#회원-목록-map-filter" class="headerlink" title="회원 목록, map, filter"></a>회원 목록, map, filter</h3><p>응용형 함수, 콜렉션을 다루는 함수</p><p>함수형 프로그래밍에서는 원래 있는 값을 직접 변경하지 않고 변형된 새로운 값을 리턴합니다</p><p>중복을 제거하거나 추상화할 때 함수를 이용해서 프로그래밍하는 것이 함수형 프로그래밍</p><p>조건을 인자로 올 함수에게 위임</p><p>응용형 함수, 응용형 프로그래밍, 적용형 프로그래밍</p><ul><li>함수가 함수를 받아서 원하는 시점에 인자를 적용하는 형식으로 프로그래밍</li></ul><p>고차함수</p><ul><li>함수를 받거나, 함수를 리턴하거나, 인자로 받은 함수를 실행</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tempUsers = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; users.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (users[i].age &gt;= <span class="number">30</span>) &#123;</span><br><span class="line">    tempUsers.push(users[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tempUsers);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 프로그래머가 _filter 함수를 호출할 때, 어떤 데이터가 넘어가는지와 처리하고자 하는 조건에 대해 인지하고 있기에 재활용성이 매우 높은 함수가 되었음</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// users -&gt; list로 일반화 가능</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_filter</span>(<span class="params">users, predicate</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newList = [];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; users.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (predicate(users[i])) &#123;</span><br><span class="line">      newList.push(users[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> newList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> names = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; tempUsers.length; i++) &#123;</span><br><span class="line">  names.push(tempUsers[i].name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(names);</span><br><span class="line"></span><br><span class="line"><span class="comment">// list : 어떤 배열이든 무관, mapper : 어떤 데이터를 수집할지 위임</span></span><br><span class="line"><span class="comment">// 다형성이 높고, 데이터가 구체적으로 어떻게 생겼는지 보이지 않음 -&gt; 관심사의 분리</span></span><br><span class="line"><span class="comment">// mapper 예시 : user =&gt; user.name</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_map</span>(<span class="params">list, mapper</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newList = [];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">    newList.push(mapper(list[i]));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> newList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  _map(</span><br><span class="line">    _filter(users, <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123; <span class="keyword">return</span> user.age &gt;= <span class="number">30</span>; &#125;),</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123; <span class="keyword">return</span> user.name; &#125;</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 현재 동일한 Loop를 두 번 도는 중복이 존재합니다</span></span><br></pre></td></tr></table></figure><p>함수형 프로그래밍에서는 대입문을 많이 사용하지 않음</p><p>값을 만들어놓고 문장을 내려가면서 변형해가는 것이 아니라, 함수를 통과해가면서 한 번에 값을 새롭게 만들어가는 방식으로 함수형 프로그래밍이 진행됨</p><h2 id="대입문이-없으면-보다-간결한-코드를-만들-수-있습니다"><a href="#대입문이-없으면-보다-간결한-코드를-만들-수-있습니다" class="headerlink" title="대입문이 없으면 보다 간결한 코드를 만들 수 있습니다"></a>대입문이 없으면 보다 간결한 코드를 만들 수 있습니다</h2><h3 id="each"><a href="#each" class="headerlink" title="each"></a>each</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Loop를 돌면서 적용할 로직에 대해선 인자에 올 함수에게 위임</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_each</span>(<span class="params">list, iterate</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">    iterate(list[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_map</span>(<span class="params">list, mapper</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newList = [];</span><br><span class="line">  </span><br><span class="line">  _each(list, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    newList.push(mapper(val));</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> newList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_filter</span>(<span class="params">list, predicate</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newList = [];</span><br><span class="line">  </span><br><span class="line">  _each(list, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (predicate(val)) newList.push(val);</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> newList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="코드가-점점-간결해지고-명령적인-코드가-숨고-선언적인-코드표현-단순해지고-오류가-줄어들고-보다-정확하게-코딩을-하고-있다는-확신을-쉽게-느낄-수-있음"><a href="#코드가-점점-간결해지고-명령적인-코드가-숨고-선언적인-코드표현-단순해지고-오류가-줄어들고-보다-정확하게-코딩을-하고-있다는-확신을-쉽게-느낄-수-있음" class="headerlink" title="코드가 점점 간결해지고, 명령적인 코드가 숨고 선언적인 코드표현, 단순해지고 오류가 줄어들고 보다 정확하게 코딩을 하고 있다는 확신을 쉽게 느낄 수 있음"></a>코드가 점점 간결해지고, 명령적인 코드가 숨고 선언적인 코드표현, 단순해지고 오류가 줄어들고 보다 정확하게 코딩을 하고 있다는 확신을 쉽게 느낄 수 있음</h2><h3 id="다형성"><a href="#다형성" class="headerlink" title="다형성"></a>다형성</h3><p>이미 자바스크립트에는 map, filter와 같은 함수들이 구현되어있는데, 우리는 왜 또다시 구현했을까?</p><p>자바스크립트에 이미 있는 그것들은 함수가 아니라 메소드이다 (순수함수 X, 객체의 상태에 따라 결과가 달라지는)</p><p>메소드는 해당 클래스의 인스턴스에서만 사용가능 (jQuery 객체나 document.querySelectorAll 의 결과인 array-like에서는 array method 사용불가) 다형성을 지원하기 어려움</p><p>함수가 기준이 되는 함수형 프로그래밍에서는 함수를 먼저 만들고 그 함수에 맞는 데이터를 구성하여 함수에게 전달하는 식으로 프로그래밍하므로 높은 다형성을 만들어내고 유용하고 실용적일 수 있게 된다</p><p>배열이 아니더라도 length property가 숫자이면 map이나 each 모두 사용가능하게 됨</p><p>함수가 먼저 나오는 프로그래밍 VS 데이터가 먼저 나오는 프로그래밍<br>(데이터가 먼저 나오는 프로그래밍은 데이터가 있어야만 메소드가 생길 수 있다, 그래서 객체지향에서는 평가의 순서가 대단히 중요해진다, 해당 객체가 있어야만 기능 수행 가능)</p><p>함수가 먼저 나오는 프로그래밍은 평가시점에 있어 훨씬 유연해질 수 있다 =&gt; 더 높은 조합성<br>(함수가 먼저 나오는 프로그래밍은 함수가 우선 먼저 홀로 존재하기 때문에 데이터가 없더라도 평가 시점이 상대적으로 훨씬 유연해진다)</p><p>응용형 함수의 장점</p><p>함수형 프로그래밍에서는 보조함수가 어떤 역할을 하느냐에 따라 굉장히 다양한 이름을 갖게 되는 점이 중요합니다</p><p>콜백함수는 어떤 일들을 수행한 뒤에 맨 끝에서 다시 돌려주는 함수만을 뜻함</p><p>predicate : 조건을 리턴하는 함수</p><p>iteratee : Loop를 돌면서 반복적으로 실행되는 함수</p><p>mapper : 무엇과 무엇을 매핑하는 함수</p><p>각각의 역할에 맞게 보조함수를 지칭해줄 것, 그렇게 할 때 다양한 좋은 응용형 고차함수들을 만들어 낼 수 있을 것</p><p>내부 다형성</p><p>외부의 다형성 (array-like도 돌릴 수 있게 되는 것)은 _map과 같은 고차함수가 어떻게 구현되었는지에 따라 만들어지지만, 배열 안에 어떤 값이 담겨있든 수행할 수 있도록 만들어주는 내부의 다형성은 보조함수(predi, iter, mapper)가 만들어낸다</p><p>개발자가 함수에 넘겨줄 데이터에 대한 이해를 바탕으로 보조함수를 결정할 수 있고, 고차함수에서는 데이터에 대해 언급하는 코드 없이 보조함수에게 위임하기 때문에 데이터 형에 있어서 굉장히 자유롭고 다형성을 높이는데 유리합니다</p><blockquote><p>명령형 코드인 for, if 등을 대체하는 것으로 출발해서, 메서드 내부 구현을 함수형으로 해나가는 것이 충분히 가능합니다, 또한 배열 형태의 데이터를 유사배열 객체로 디자인해서 다루거나, 클래스 내부의 본체 객체들을 함수형으로 다루는 것도 충분히 가능하며, 자바스크립트에서는 객체 지향과 함수 지향 조합이 충분히 편리합니다.</p><p>객체지향은 상태 변화가 문제가 아니라 객체지향의 해법이기 때문에 어느지점까지를 함수형으로 할지에 대한 선택이 필요하다고 생각합니다.</p><p>상태를 변경하는 일이 특정 함수나 동작의 마지막 즈음에서만 이러난다면, 좀 더 상태를 다루기 쉽지 않으실까 생각됩니다. 반대 되는 경우를 설명해보자면 객체의 특정 값을 변경해둔 상태에 의존해서 다음 메서드가 실행되어 그것에 따라 달리 동작하도록 하는식으로 코딩한다면 상대적으로 거미줄 처럼 전체 코드들이 엮이면서 관리가 어려워지기 시작합니다.</p><p>함수형과 조합할 때는 뷰를 갱신하기위한 최종 상태만 변경하는 식으로 코딩하는 것이 유리합니다. 하나씩 해보시면 감이 오실거라 생각이 됩니다.</p></blockquote><hr><h3 id="커링-curry-curryr"><a href="#커링-curry-curryr" class="headerlink" title="커링, curry, curryr"></a>커링, curry, curryr</h3><p>커링은 함수와 인자를 다루는 기법, 함수에 인자를 하나씩 저장해나가다가 필요한 인자가 모두 채워지면 함수의 본체를 실행하는 기법, 일급함수가 지원되고 평가시점를 자유롭게 다룰 수 있으므로 구현 가능하다</p><p>커링 함수는 인자로 함수를 받고, 함수를 리턴합니다, 해당 함수는 첫 번째 인자를 받고 또 다시 함수를 리턴합니다, 인자를 모두 받으면 받았던 인자들을 미리 받아두었던 함수에 적용하면서 평가하는 함수입니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_curry</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> fn(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">10</span>, <span class="number">5</span>)); <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add = _curry(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add10 = add(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(add10(<span class="number">5</span>));</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">5</span>)(<span class="number">3</span>));</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">10</span>)(<span class="number">3</span>));</span><br></pre></td></tr></table></figure><p>본체 함수를 값으로 들고 있다가 원하는 시점까지 평가를 지연시켰다가 최종 시점에 평가하는 기법입니다</p><p>함수가 함수를 대신 실행하거나 함수가 함수를 리턴할 수 있도록 함수를 조합해나가는 방식으로 프로그래밍하는 것이 함수형 프로그래밍입니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_curry</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length == <span class="number">2</span>) <span class="keyword">return</span> fn(a, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> fn(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_curry</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">arguments</span>.length == <span class="number">2</span> ? fn(a, b) : <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123; <span class="keyword">return</span> fn(a, b); &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sub = _curry(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sub10 = sub(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sub10(<span class="number">5</span>)); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>_curry 만으로는 표현력이 아쉽다고 느껴지므로 오른쪽에서부터 인자를 적용해나가는 _curryr을 만들면 좋을 것</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_curryr</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">arguments</span>.length == <span class="number">2</span> ? fn(a, b) : <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123; <span class="keyword">return</span> fn(b, a); &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sub = _curryr(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sub(<span class="number">10</span>, <span class="number">5</span>)); <span class="comment">// 5</span></span><br><span class="line"><span class="keyword">var</span> sub10 = sub(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sub10(<span class="number">5</span>)); <span class="comment">// -5</span></span><br></pre></td></tr></table></figure><p>_get : object에 있는 값을 안전하게 참조하는 함수</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_get</span>(<span class="params">obj, key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj == <span class="literal">null</span> ? <span class="literal">undefined</span> : obj[key];</span><br><span class="line">  <span class="comment">// if (obj &amp;&amp; obj.hasOwnProperty(key)) &#123; return obj[key]; &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user1 = &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">"ID"</span>, <span class="attr">age</span>: <span class="number">36</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(user1.name);</span><br><span class="line"><span class="built_in">console</span>.log(_get(user1, <span class="string">'name'</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _get = _curryr(_get);</span><br><span class="line"><span class="keyword">var</span> get_name = _get(<span class="string">'name'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(get_name(user1));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  _map(</span><br><span class="line">    _filter(users, <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123; <span class="keyword">return</span> user.age &gt;= <span class="number">30</span>; &#125;),</span><br><span class="line">    _get(<span class="string">'name'</span>) <span class="comment">// function(user) &#123; return user.name; &#125;</span></span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  _map(</span><br><span class="line">    _filter(users, <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123; <span class="keyword">return</span> user.age &lt; <span class="number">30</span>; &#125;),</span><br><span class="line">    _get(<span class="string">'age'</span>) <span class="comment">// function(user) &#123; return user.age; &#125;</span></span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="함수를-통해서-또-다른-함수를-만들어서-map의-iteratee로-활용할-수-있다"><a href="#함수를-통해서-또-다른-함수를-만들어서-map의-iteratee로-활용할-수-있다" class="headerlink" title="함수를 통해서 또 다른 함수를 만들어서 map의 iteratee로 활용할 수 있다"></a>함수를 통해서 또 다른 함수를 만들어서 map의 iteratee로 활용할 수 있다</h2><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p>재귀적으로 연속적으로 실행한 결과를 만들어주는 함수</p><p>데이터를 받아 보조함수로 축약시킨 새로운 값을 반환, 입력된 자료구조를 축약시킨 자료구조로 만들 때 주로 사용함</p><p>map, filter 는 array로 들어온 것을 array로 리턴하기 위해서 보통 사용</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_reduce</span>(<span class="params">list, iter, memo</span>) </span>&#123;</span><br><span class="line">  _each(list, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    memo = iter(memo, val);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> memo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_reduce([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>복잡하거나 어려운 로직을 단순하게 구현할 수 있도록 도와주는 함수</p><p>어떻게 memo를 축약해나갈지와 데이터 모두에 보조함수를 적용한 결과를 반환하겠다는 내용이 추상화되고 선언적인 코드만 존재함</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_reduce</span>(<span class="params">list, iter, memo</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>.length == <span class="number">2</span>) &#123;</span><br><span class="line">    memo = list[<span class="number">0</span>];</span><br><span class="line">    list = list.slice(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  _each(list, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    memo = iter(memo, val);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> memo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>slice라는 method를 활용하게 되면 Array가 아닐 때 사용할 수 없게 됨, 아래와 같이 활용할 수도 있음</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">document</span>.querySelectorAll(<span class="string">'*'</span>);</span><br><span class="line"><span class="keyword">var</span> slice = <span class="built_in">Array</span>.prototype.slice;</span><br><span class="line">slice.call(a, <span class="number">2</span>);</span><br><span class="line">slice.call(a, <span class="number">2</span>).constructor; <span class="comment">// function Array() &#123; [native code] &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_rest</span>(<span class="params">list, num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> slice = <span class="built_in">Array</span>.prototype.slice;</span><br><span class="line">  <span class="keyword">return</span> slice.call(list, num || <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_reduce</span>(<span class="params">list, iter, memo</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>.length == <span class="number">2</span>) &#123;</span><br><span class="line">    memo = list[<span class="number">0</span>];</span><br><span class="line">    list = _rest(list);</span><br><span class="line">  &#125;</span><br><span class="line">  _each(list, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    memo = iter(memo, val);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> memo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(_reduce([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], add)); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(_reduce([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], add, <span class="number">10</span>)); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><h2 id="reduce는-받은-iteratee를-list의-값들에-연속적으로-적용하면서-memo라는-결과로-축약해나가는-함수"><a href="#reduce는-받은-iteratee를-list의-값들에-연속적으로-적용하면서-memo라는-결과로-축약해나가는-함수" class="headerlink" title="reduce는 받은 iteratee를 list의 값들에 연속적으로 적용하면서 memo라는 결과로 축약해나가는 함수"></a>reduce는 받은 iteratee를 list의 값들에 연속적으로 적용하면서 memo라는 결과로 축약해나가는 함수</h2><h3 id="파이프라인-go-pipe-화살표-함수"><a href="#파이프라인-go-pipe-화살표-함수" class="headerlink" title="파이프라인, _go, _pipe, 화살표 함수"></a>파이프라인, _go, _pipe, 화살표 함수</h3><p>pipe는 reduce를 활용해서 만들 수 있습니다, 함수를 리턴해주는 함수인데, 함수들을 인자로 받아서 이 함수들을 연속적으로 실행해주는 함수를 리턴해주는 함수입니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_pipe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> fns = <span class="built_in">arguments</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _reduce(fns, <span class="function"><span class="keyword">function</span>(<span class="params">arg, fn</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> fn(arg);</span><br><span class="line">    &#125;, arg)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f1 = _pipe(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123; <span class="keyword">return</span> a + <span class="number">1</span>; &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123; <span class="keyword">return</span> a * <span class="number">2</span>; &#125;</span><br><span class="line">)</span><br><span class="line"><span class="built_in">console</span>.log(f1(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>함수형 프로그래밍에서는 이와 같이 함수를 다루는 함수를 많이 사용합니다</p><p>pipe는 결국 reduce입니다, pipe의 보다 추상화된 레벨이 reduce입니다, pipe는 reduce를 좀 더 특화시킨 함수입니다</p><p>pipe는 함수들이라는 배열에 있는 값들을 인자에 연속적으로 적용하여 축약하는 함수라고 볼 수 있습니다</p><p>go는 pipe 함수인데 즉시실행되는 함수입니다, 첫 번째 인자로는 시작값을 받고, 두 번째 인자부터는 함수를 받아 결과를 바로 만드는 함수입니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_go</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> fns = _rest(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> _pipe.apply(<span class="literal">null</span>, fns)(arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_go(<span class="number">1</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123; <span class="keyword">return</span> a + <span class="number">1</span>; &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123; <span class="keyword">return</span> a * <span class="number">2</span>; &#125;,</span><br><span class="line">  <span class="built_in">console</span>.log</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>그간 만든 함수들을 가지고 실제 사용을 해보도록 하겠습니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> users = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'ID'</span>, <span class="attr">age</span>: <span class="number">36</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'BJ'</span>, <span class="attr">age</span>: <span class="number">32</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'JM'</span>, <span class="attr">age</span>: <span class="number">32</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">'PJ'</span>, <span class="attr">age</span>: <span class="number">27</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">name</span>: <span class="string">'HA'</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">name</span>: <span class="string">'JE'</span>, <span class="attr">age</span>: <span class="number">26</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">7</span>, <span class="attr">name</span>: <span class="string">'JI'</span>, <span class="attr">age</span>: <span class="number">31</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">8</span>, <span class="attr">name</span>: <span class="string">'MP'</span>, <span class="attr">age</span>: <span class="number">23</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  _map(</span><br><span class="line">    _filter(users, <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123; <span class="keyword">return</span> user.age &gt;= <span class="number">30</span>; &#125;),</span><br><span class="line">    _get(<span class="string">'name'</span>)</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">_go(users,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">users</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _filter(users, <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> user.age &gt;= <span class="number">30</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">users</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _map(users, _get(<span class="string">'name'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">console</span>.log</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>curryr을 통해 표현력을 높여보도록 하겠습니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _map = _curryr(_map), _filter = _curryr(_filter);</span><br><span class="line"></span><br><span class="line">_map([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123; <span class="keyword">return</span> val * <span class="number">2</span>&#125;));</span><br><span class="line">_map(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123; <span class="keyword">return</span> val * <span class="number">2</span>&#125;)([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">_go(users,</span><br><span class="line">  _filter(<span class="function"><span class="keyword">function</span>(<span class="params">users</span>) </span>&#123; <span class="keyword">return</span> user.age &gt;= <span class="number">30</span>; &#125;),</span><br><span class="line">  _map(_get(<span class="string">'name'</span>)),</span><br><span class="line">  <span class="built_in">console</span>.log</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">_go(users,</span><br><span class="line">  _filter(<span class="function"><span class="params">user</span> =&gt;</span> user.age &lt; <span class="number">30</span>),</span><br><span class="line">  _map(_get(<span class="string">'age'</span>)),</span><br><span class="line">  <span class="built_in">console</span>.log</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>_filter 함수를 만들 때, curryr을 사용해서 만들었고, _filter에 인자를 하나만 넘겼을 때 인자가 오른쪽에서부터 적용될 또 다른 함수를 리턴하게 되고, _go라는 함수는 함수들을 받아서 함수들을 연속적으로 실행하면서 결과를 다음 함수에게 전달하는 방식으로, 함수가 함수를 실행하고 함수가 함수를 리턴하는 방식으로 프로그래밍을 하는 것이 함수형 프로그래밍입니다</p><p>함수의 평가시점이나 인자가 적용되어가는 과정에서 하나 하나의 함수들이 모두 부수효과가 없고 순수함수들로 구성될 때 이런 조합성을 만들어낼 수 있습니다</p><p>순수함수들을 평가시점을 다루면서 조합성을 강조하는 프로그래밍, 추상화의 단위를 함수로 하는 프로그래밍을 함수형 프로그래밍이라고 합니다</p><p>화살표 함수는 아래와 같이 사용할 수 있습니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123; <span class="keyword">return</span> user.age &gt;= <span class="number">30</span>; &#125;;</span><br><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="params">user</span> =&gt;</span> user.age &gt;= <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123; <span class="keyword">return</span> a + b; &#125;;</span><br><span class="line"><span class="keyword">var</span> = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"><span class="keyword">var</span> = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123; <span class="keyword">return</span> a + b; &#125;;</span><br><span class="line"><span class="keyword">var</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> (&#123; <span class="attr">val</span>: a + b&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="다형성-높이기-keys-에러"><a href="#다형성-높이기-keys-에러" class="headerlink" title="다형성 높이기, _keys, 에러"></a>다형성 높이기, _keys, 에러</h3><p>다형성, 데이터 다루는 방법, 에러를 다루는 방법 등을 이야기해보도록 하겠습니다</p><p>함수형 프로그래밍에서는 예외적인 데이터가 들어오는 것에 대해 다형성을 통해 대응하기도 합니다</p><p>_each에 null이 들어와도 에러가 나지 않도록 하는 케이스</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_curryr</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">arguments</span>.length == <span class="number">2</span> ? fn(a, b) : <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123; <span class="keyword">return</span> fn(b, a); &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _get = _curryr(<span class="function"><span class="keyword">function</span>(<span class="params">obj, key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj == <span class="literal">null</span> ? <span class="literal">undefined</span> : obj[key];</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _length = _get(<span class="string">'length'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_each</span>(<span class="params">list, iter</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// for (var i = 0; i &lt; list.length; i++) &#123;</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = _length(list); i &lt; len; i++) &#123;</span><br><span class="line">    iter(list[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_each(<span class="literal">null</span>, <span class="built_in">console</span>.log);</span><br><span class="line"><span class="built_in">console</span>.log(_map(<span class="literal">null</span>, <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123; <span class="keyword">return</span> v; &#125;)); <span class="comment">// []</span></span><br><span class="line"><span class="built_in">console</span>.log(_filter(<span class="literal">null</span>, <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123; <span class="keyword">return</span> v; &#125;)); <span class="comment">// []</span></span><br></pre></td></tr></table></figure><p>_map과 _filter 모두 _each를 활용하고 있기에 null에 대해 적절한 다형성을 가지게 되었습니다</p><p>함수형 프로그래밍에서는 함수의 연속 실행을 할 때, 잘못된 값이 들어와도 에러가 발생하지 않고 흘려보낼 수 있도록 하는 전략을 많이 취합니다</p><p>언더스코어에서도 서로가 return하는 값이 무엇이냐와 무관하게 그럴싸한 결과값들을 내도록 코드가 많이 고려가 되어있습니다</p><p>형체크를 하지 않고 try catch를 하지 않는 이런식의 에러 처리가 불안하다고 느낄 수도 있지만, 데이터를 다루는 라이브러리들도 언더스코어나 로대시 등을 내부에서 많이 사용하고 있습니다</p><p>실용적이고 장점이 많고 에러를 내지 않고 정확하게 데이터를 다룰 수 있게 해주는 좋은 방법입니다</p><p>_keys 만들기</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(&#123; <span class="attr">name</span>: <span class="string">'ID'</span>, <span class="attr">age</span>: <span class="number">33</span> &#125;)); <span class="comment">// ["name", "age"]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])); <span class="comment">// ["0", "1", "2", "3"]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(<span class="number">10</span>)); <span class="comment">// []</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(<span class="literal">null</span>)); <span class="comment">// Error</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_is_object</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> obj == <span class="string">'object'</span> &amp;&amp; !!obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_keys</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _is_object(obj) ? <span class="built_in">Object</span>.keys(obj) : [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(_keys(<span class="literal">null</span>)); <span class="comment">// []</span></span><br></pre></td></tr></table></figure><p>_each 외부 다형성 높이기</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 기존 each로는, 객체에 length가 없고, index가 0부터가 아니어서 에러 발생</span></span><br><span class="line">_each(&#123;</span><br><span class="line">  <span class="number">13</span>: <span class="string">'ID'</span>,</span><br><span class="line">  <span class="number">19</span>: <span class="string">'HD'</span>,</span><br><span class="line">  <span class="number">29</span>: <span class="string">'YD'</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_is_object</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> obj == <span class="string">'object'</span> &amp;&amp; !!obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_keys</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _is_object(obj) ? <span class="built_in">Object</span>.keys(obj) : [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_each</span>(<span class="params">list, iter</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> keys = _keys(list); <span class="comment">// keys는 반드시 올바른 배열을 리턴</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = keys.length; i &lt; len; i++) &#123; <span class="comment">// 따라서 length가 반드시 있을 것이라 확신할 수 있다</span></span><br><span class="line">    iter(list[keys[i]]); <span class="comment">// array, key/value 모두 잘 동작</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>함수형 프로그래밍에서는 해당하는 고차함수가 주재료로 받는 인자의 데이터 형에 따라 내부 동작을 모두 지원하도록 최대한 다형성이 높도록 코드를 구성하고, 인자가 하나만 들어오면 함수를 리턴하는 등 인자와 함수를 잘 다루는 방식으로 프로그래밍합니다, 어떤 데이터가 들어오든지 최대한 흘러갈 수 있도록 하여 연속 실행에  큰 문제가 없도록 하는 방식으로 함수를 구성합니다</p><h2 id="형을-굉장히-강하게-체크하면서-프로그래밍하는-방식도-있지만-이렇게-다형성을-극대화시키면서-프로그래밍하는-방식도-있습니다"><a href="#형을-굉장히-강하게-체크하면서-프로그래밍하는-방식도-있지만-이렇게-다형성을-극대화시키면서-프로그래밍하는-방식도-있습니다" class="headerlink" title="형을 굉장히 강하게 체크하면서 프로그래밍하는 방식도 있지만, 이렇게 다형성을 극대화시키면서 프로그래밍하는 방식도 있습니다"></a>형을 굉장히 강하게 체크하면서 프로그래밍하는 방식도 있지만, 이렇게 다형성을 극대화시키면서 프로그래밍하는 방식도 있습니다</h2><h2 id="컬렉션-중심-프로그래밍"><a href="#컬렉션-중심-프로그래밍" class="headerlink" title="컬렉션 중심 프로그래밍"></a>컬렉션 중심 프로그래밍</h2><h3 id="수집하기-map-values-pluck-등"><a href="#수집하기-map-values-pluck-등" class="headerlink" title="수집하기 - map, values, pluck 등"></a>수집하기 - map, values, pluck 등</h3><p>컬렉션은 배열이나 돌림직한 데이터를 뜻한다<br>컬렉션을 잘 다루는 함수 세트들을 구성해나가는 프로그래밍 방식을 컬렉션 중심 프로그래밍이라고 합니다</p><p>대표적인 컬렉션을 위한 함수들을 map, filter, reduce 입니다</p><p>크게 네 가지 유형으로 나누어서 바라볼 수 있습니다</p><ul><li>수집하기 - map, values, pluck 등</li><li>거르기 - filter, reject, compact, without 등</li><li>찾아내기 - find, some, every 등</li><li>접기 - reduce, min, max, group_by, count_by</li></ul><p>가장 앞에 있는 함수들이 가장 추상화 레벨이 높기 때문에 대표함수라고 지칭합니다, 각 유형별 대표함수들을 활용해서 케이스별 특화함수들을 만들 수 있게 됩니다</p><p>이러한 기준으로 문제를 바라보고 해결해나가는 식으로 프로그래밍하는 것이 컬렉션 중심 프로그래밍이라고 할 수 있고, map/filter/reduce/find 등의 고차함수들을 중심으로 하는 프로그래밍이라고 볼 수 있습니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_identity</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(_identity(a)); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 값을 수집하는 함수</span></span><br><span class="line"><span class="comment">// function _values(data) &#123;</span></span><br><span class="line"><span class="comment">//   return _map(data, _identity);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _values = _map(_identity);</span><br><span class="line">_values(users[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(users[<span class="number">0</span>]); <span class="comment">// &#123;id: 10, name: "ID", age: 36&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(_keys(users[<span class="number">0</span>])); <span class="comment">// ["id", "name", "age"]</span></span><br><span class="line"><span class="built_in">console</span>.log(_values(users[<span class="number">0</span>])); <span class="comment">// [10, "ID", 36]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열 내부에 있는 객체에 있는 키를 통해서 꺼내진 값들을 수집하는 함수</span></span><br><span class="line"><span class="comment">// 내부에 있는 값을 수집한다면 _map을 활용하면 됩니다</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_pluck</span>(<span class="params">data, key</span>) </span>&#123;</span><br><span class="line"><span class="comment">//   return _map(data, function(obj) &#123;</span></span><br><span class="line"><span class="comment">//     return obj[key];</span></span><br><span class="line"><span class="comment">//   &#125;);</span></span><br><span class="line">  <span class="keyword">return</span> _map(data, _get(key));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(_pluck(users, <span class="string">'age'</span>)); <span class="comment">// [36, 32, 32, ...]</span></span><br></pre></td></tr></table></figure><hr><h3 id="거르기-reject-compact"><a href="#거르기-reject-compact" class="headerlink" title="거르기 - reject, compact"></a>거르기 - reject, compact</h3><p>reject 함수는 filter 함수를 반대로 동작시킨 함수입니다, true 평가된 값들을 제외시키는 함수입니다, 고차함수의 변경을 통해 보다 선언적으로 프로그래밍해나갈 수 있습니다</p><p>순수함수들의 평가시점들을 다루거나 함수가 함수를 리턴하거나 실행해주거나 인자로 받은 함수를 실행해준 뒤에 결과를 반대로 바꿔 리턴해준다거나 함수들의 응용과 조합을 강조하는 것이 함수형 프로그래밍입니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  _filter(users, <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> user.age &gt; <span class="number">30</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_negate</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !func(val);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// function _reject(data, predi) &#123;</span></span><br><span class="line"><span class="comment">//   return _filter(data, function(val) &#123;</span></span><br><span class="line"><span class="comment">//     return !predi(val);</span></span><br><span class="line"><span class="comment">//   &#125;)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_reject</span>(<span class="params">data, predi</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _filter(data, _negate(predi));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  _reject(users, <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> user.age &gt; <span class="number">30</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>compact 함수는 truthy한 값만 남기는 함수입니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _compact = _filter(_identity);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(_compact([<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="literal">false</span>, <span class="literal">null</span>, &#123;&#125;])); <span class="comment">// [1, 2, &#123;&#125;]</span></span><br></pre></td></tr></table></figure><p>함수형 프로그래밍에선 함수를 간결하게 조합시켜서 약간 변경된 다양한 로직을 가진 함수들을 만드는 것을 목표로 합니다, 컬렉션 중심 프로그래밍도 마찬가지로 이러한 컬렉션을 다루는 다양하고 약간씩 다른 함수세트들을 모으는 것이 목표입니다</p><h2 id="10개의-굉장히-복잡한-많은-기능을-하는-함수나-클래스를-만드는-것보다-서로-다른-100개의-함수를-만드는-것이-프로그래밍-하는-것에-있어-훨씬-유리합니다"><a href="#10개의-굉장히-복잡한-많은-기능을-하는-함수나-클래스를-만드는-것보다-서로-다른-100개의-함수를-만드는-것이-프로그래밍-하는-것에-있어-훨씬-유리합니다" class="headerlink" title="10개의 굉장히 복잡한 많은 기능을 하는 함수나 클래스를 만드는 것보다, 서로 다른 100개의 함수를 만드는 것이 프로그래밍 하는 것에 있어 훨씬 유리합니다"></a>10개의 굉장히 복잡한 많은 기능을 하는 함수나 클래스를 만드는 것보다, 서로 다른 100개의 함수를 만드는 것이 프로그래밍 하는 것에 있어 훨씬 유리합니다</h2><h3 id="찾아내기-find-find-index-some-every"><a href="#찾아내기-find-find-index-some-every" class="headerlink" title="찾아내기- find, find_index, some, every"></a>찾아내기- find, find_index, some, every</h3><p>find는 조건에 해당하는 값을 처음 만났을 때 리턴해주는 함수입니다<br>findIndex는 해당하는 값을 처음 만났을 때 index값을 리턴해주는 함수입니다</p><p>filter 함수는 predicate를 거친 결과가 truthy한 모든 값을 수집하는 것이라면, find는 걸러지는 그 값 하나만을 리턴해주는 함수입니다</p><p>나중에 다룰 지연평가와도 연관이 있는 중요한 함수입니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_find</span>(<span class="params">list, predi</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> keys = _keys(list);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = keys.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> val = list[keys[i]];</span><br><span class="line">    <span class="keyword">if</span> (predi(val)) <span class="keyword">return</span> val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  _find(users, <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> user.age &lt; <span class="number">30</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  _find(users, <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> user.id == <span class="number">20</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_find_index</span>(<span class="params">list, predi</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> keys = _keys(list);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = keys.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (predi(list[keys[i]])) <span class="keyword">return</span> i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;다</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  _find_index(users, <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> user.name == <span class="string">'BJ'</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  _get(_find_index(users, <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> user.id == <span class="number">20</span>;</span><br><span class="line">  &#125;), <span class="string">'name'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _find = curryr(_find), _find_index = curryr(_find_index);</span><br><span class="line"></span><br><span class="line">_go(users,</span><br><span class="line">  _find(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123; <span class="keyword">return</span> user.id == <span class="number">50</span>; &#125;),</span><br><span class="line">  _get(<span class="string">'name'</span>),</span><br><span class="line">  <span class="built_in">console</span>.log</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">_go(users,</span><br><span class="line">  _find_index(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123; <span class="keyword">return</span> user.id == <span class="number">50</span>; &#125;),</span><br><span class="line">  <span class="built_in">console</span>.log</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>some은 조건에 만족하는 값이 존재하면 true를 리턴해주는 함수입니다, every는 모든 값이 조건을 만족하면 true를 리턴해주는 함수입니다<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_some</span>(<span class="params">data, predi</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _find_index(data, predi) != <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_every</span>(<span class="params">data, predi</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _find_index(data, _negate(predi)) == <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(_some([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>], <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val &gt; <span class="number">10</span>;</span><br><span class="line">&#125;)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(_every([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>], <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val &gt; <span class="number">10</span>;</span><br><span class="line">&#125;) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><p>some과 every는 predi가 없어도 동작을 해야 합니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">10</span>], _identity) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(_some([<span class="literal">null</span>, <span class="literal">false</span>, <span class="number">0</span>], _identity)) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_some</span>(<span class="params">data, predi</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _find_index(data, predi || _identity) != <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_every</span>(<span class="params">data, predi</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _find_index(data, _negate(predi || _identity)) == <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(_some([<span class="literal">null</span>, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">1</span>])) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  _some(users, <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> user.age &lt; <span class="number">20</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>find, find_index, some, every 모두 고차함수로 쓰여 보조함수를 받기 때문에, 많은 것들을 해낼 수 있습니다</p><p>find_index의 경우, indexOf는 완전히 값이 같은 경우만을 해당하는 값이 몇 번째 인덱스에 있는지 찾을 수 있는 것과 달리, 보조함수를 만족하는 첫 번째 값이 몇 번째에 있는지 확인할 수 있습니다</p><p>some, every를 활용하면, 있긴 있느냐 모두 그러하냐 등도 확인할 수 있습니다</p><p>고차함수와 보조함수의 합으로 프로그래밍하는 것은 로직을 조합해나가는 것과 동일한 것입니다</p><p>하나라도 그러하느냐 =&gt; some, 그러한 조건이 무엇이냐 =&gt; predicate</p><h2 id="이런-식으로-로직을-완성해나가는-것이-함수형-프로그래밍입니다"><a href="#이런-식으로-로직을-완성해나가는-것이-함수형-프로그래밍입니다" class="headerlink" title="이런 식으로 로직을 완성해나가는 것이 함수형 프로그래밍입니다"></a>이런 식으로 로직을 완성해나가는 것이 함수형 프로그래밍입니다</h2><h3 id="접기-reduce-min-by-max-by"><a href="#접기-reduce-min-by-max-by" class="headerlink" title="접기 - reduce, min_by, max_by"></a>접기 - reduce, min_by, max_by</h3><p>접기 또는 축약이라 볼 수 있습니다</p><p>Array안의 값이나 Iterable한 객체에 있는 값들을 통해서, 접혀진 값을 만들기 위해 사용합니다</p><p>순차적인 for문을 대체하는 식으로 reduce를 사용하기 보다는 함수형적인 관점에서 바라보는 것이 중요합니다</p><p>순수함수로서 평가 순서에 상관없이 접어나가는 함수로서 이해하는 것이 필요합니다</p><p>find와 달리 전체를 확인하고 특정 값으로 접어내는 함수입니다</p><p>평가순서와 상관없이 어떤 해당하는 결과를 만들 수 있는 식으로 사고하는 것이 좋습니다, 값들이 앞에서부터 순서대로 들어온다고 생각하지 않고 프로그래밍하는 것이 중요합니다, reduce라는 함수가 모든 값들을 특정 함수에게 평가시킬 것이니까 순서와 상관없도록 한 가지 로직만 생각하면서 작성하는 것입니다</p><p>reduce를 for문을 대체하는 형태로 사용한다면 그다지 함수형 프로그래밍이라고 보기 어렵고, 좋은 코드가 나오지 않을 가능성이 높습니다, 그냥 두 개의 값이 있다는 식으로 생각하면서 프로그래밍할 수 있습니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// _min을 작성할 때 다른 고민할 필요없이 reduce를 작성하는 것이 좋습니다</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_min</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _reduce(data, <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b ? a : b; <span class="comment">// 두 개를 비교해서 작은 값을 리턴해나가다보면 reduce에 의해 하나의 값으로 접힐 것</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_max</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _reduce(data, <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_min([<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">-4</span>]); <span class="comment">// -4</span></span><br><span class="line">_max([<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">-4</span>]); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>min_by와 max_by는 어떤 조건을 통해서 비교를 할 것이냐를 추가적인 iteratee를 받는 것입니다, min과 max는 값을 직접 비교하는데 그래서 다형성이 상대적으로 낮습니다, 그러나 min_by나 max_by는 filter와 같이 보조함수를 받기 때문에 들어있는 값이 어떤 값이든지 어떤 것을 가지고 비교할지 보조함수가 한 번 더 가능성을 열어주기 때문에 더 많은 것들을 할 수 있는 min, max함수가 될 수 있습니다</p><p>예를 들어서 절대값으로의 변환 후에 비교도 가능합니다<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_min_by</span>(<span class="params">data, iter</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _reduce(data, <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> iter(a) &lt; iter(b) ? a : b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_max_by</span>(<span class="params">data, iter</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _reduce(data, <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> iter(a) &gt; iter(b) ? a : b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_min_by([<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">-4</span>], <span class="built_in">Math</span>.abs);</span><br><span class="line">_max_by([<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">-4</span>, <span class="number">-11</span>], <span class="built_in">Math</span>.abs);</span><br></pre></td></tr></table></figure></p><p>상태를 변화시키지 않고 비교한다는 점이 대단히 중요한데, 만약 map을 거친 뒤에 max를 하게 되면 -11이 있을 때 -11이 나오는 것이 아니라 11이 나와버리게 됩니다, 그러면 코딩이 어려워집니다, 따라서 값을 변경시키지 않고 비교해주는 max_by와 같은 함수가 있는 것을 통해 더 쉽게 프로그래밍할 수 있게 됩니다</p><p>이런 함수적 아이디어를 통해서 계속해서 특정 부분의 다형성을 높이거나 특정 부분의 확장성을 높여서 다양한 로직들을 만들어갈 수 있게 됩니다</p><p>숫자형 데이터가 아니더라도 실무적인 데이터에도 사용할 수 있게 됩니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">_max_by(users, <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123; <span class="keyword">return</span> user.age; &#125;);</span><br><span class="line">_min_by(users, <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123; <span class="keyword">return</span> user.age; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _min_by = _curryr(_min_by), _max_by = _curryr(_max_by), _reject = _curryr(_reject);</span><br><span class="line"></span><br><span class="line">_go(</span><br><span class="line">  users,</span><br><span class="line">  _filter(<span class="function"><span class="params">user</span> =&gt;</span> user.age &gt;= <span class="number">30</span>),</span><br><span class="line">  _min_by(_get(<span class="string">'age'</span>)),</span><br><span class="line">  _get(<span class="string">'age'</span>),</span><br><span class="line">  <span class="built_in">console</span>.log</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">_go(</span><br><span class="line">  users,</span><br><span class="line">  _filter(<span class="function"><span class="params">user</span> =&gt;</span> user.age &gt;= <span class="number">30</span>),</span><br><span class="line">  _map(_get(<span class="string">'age'</span>)),</span><br><span class="line">  _min,</span><br><span class="line">  <span class="built_in">console</span>.log</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">_go(</span><br><span class="line">  users,</span><br><span class="line">  _reject(<span class="function"><span class="params">user</span> =&gt;</span> user.age &gt;= <span class="number">30</span>),</span><br><span class="line">  _max_by(_get(<span class="string">'age'</span>)), <span class="comment">// max_by가 있기 때문에 나이가 아닌 user를 리턴할 수 있습니다</span></span><br><span class="line">  _get(<span class="string">'name'</span>), <span class="comment">// 추가적으로 필요한 로직 적용</span></span><br><span class="line">  <span class="built_in">console</span>.log</span><br><span class="line">)</span><br></pre></td></tr></table></figure><hr><h3 id="접기-group-by-count-by"><a href="#접기-group-by-count-by" class="headerlink" title="접기 - group_by, count_by"></a>접기 - group_by, count_by</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> users = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">10</span>, <span class="attr">name</span>: <span class="string">'ID'</span>, <span class="attr">age</span>: <span class="number">36</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">20</span>, <span class="attr">name</span>: <span class="string">'BJ'</span>, <span class="attr">age</span>: <span class="number">32</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">30</span>, <span class="attr">name</span>: <span class="string">'JM'</span>, <span class="attr">age</span>: <span class="number">32</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">40</span>, <span class="attr">name</span>: <span class="string">'PJ'</span>, <span class="attr">age</span>: <span class="number">27</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">50</span>, <span class="attr">name</span>: <span class="string">'HA'</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">60</span>, <span class="attr">name</span>: <span class="string">'JE'</span>, <span class="attr">age</span>: <span class="number">26</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">70</span>, <span class="attr">name</span>: <span class="string">'JI'</span>, <span class="attr">age</span>: <span class="number">31</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">80</span>, <span class="attr">name</span>: <span class="string">'MP'</span>, <span class="attr">age</span>: <span class="number">23</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">90</span>, <span class="attr">name</span>: <span class="string">'FP'</span>, <span class="attr">age</span>: <span class="number">13</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// group_by 결과물</span></span><br><span class="line"><span class="keyword">var</span> users2 = &#123;</span><br><span class="line">  <span class="number">36</span>: [&#123; <span class="attr">id</span>: <span class="number">10</span>, <span class="attr">name</span>: <span class="string">'ID'</span>, <span class="attr">age</span>: <span class="number">36</span> &#125;],</span><br><span class="line"><span class="number">32</span>: [&#123; <span class="attr">id</span>: <span class="number">20</span>, <span class="attr">name</span>: <span class="string">'BJ'</span>, <span class="attr">age</span>: <span class="number">32</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">30</span>, <span class="attr">name</span>: <span class="string">'JM'</span>, <span class="attr">age</span>: <span class="number">32</span> &#125;],</span><br><span class="line">  <span class="number">27</span>: [],</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 이 시점까지는 아무런 고민없이 코딩할 수 있습니다</span></span><br><span class="line"><span class="comment">// 배열을 통해 새로운 형태의 데이터를 만들 것이기 때문에 접기이고요, 그러니 reduce를 사용해야 하고, data를 주고 익명함수를 주고, 이 결과(&#123;&#125;)로 만들어나가겠다, 무엇을 조건으로 group_by를 할 것인지를 iterate에게 위임합니다</span></span><br><span class="line"><span class="keyword">var</span> group_by = _curryr(<span class="function"><span class="keyword">function</span>(<span class="params">data, iter</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _reduce(data, <span class="function"><span class="keyword">function</span>(<span class="params">grouped, val</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> group_by = _curryr(<span class="function"><span class="keyword">function</span>(<span class="params">data, iter</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _reduce(data, <span class="function"><span class="keyword">function</span>(<span class="params">grouped, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> key = iter(val);</span><br><span class="line">    (grouped[key] = grouped[key] || []).push(val);</span><br><span class="line">    <span class="keyword">return</span> grouped;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_push</span>(<span class="params">obj, key, val</span>) </span>&#123;</span><br><span class="line">  (obj[key] = obj[key] || []).push(val);</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> group_by = _curryr(<span class="function"><span class="keyword">function</span>(<span class="params">data, iter</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _reduce(data, <span class="function"><span class="keyword">function</span>(<span class="params">grouped, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _push(grouped, iter(val), val);</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">_go(users,</span><br><span class="line">  _group_by(_get(<span class="string">'age'</span>)),</span><br><span class="line">  <span class="built_in">console</span>.log</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">_go(users,</span><br><span class="line">  _group_by(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> user.age - user.age % <span class="number">10</span>;</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="built_in">console</span>.log</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">_go(users,</span><br><span class="line">  _group_by(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> user.name[<span class="number">0</span>];</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="built_in">console</span>.log</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _head = <span class="function"><span class="keyword">function</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> list[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_go(users,</span><br><span class="line">  _group_by(_pipe(_get(<span class="string">'name'</span>), _head)),</span><br><span class="line">  <span class="built_in">console</span>.log</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>로직을 함수로 분리해내면 변수 선언이 줄어드는 결과를 볼 수 있습니다</p><p>group_by는 보조함수에게 어떤 기준으로 묶을 것인지를 위임하는데 이렇게 하면 유연성이 굉장히 높아져서 다양한 방식으로 group_by를 할 수 있게 됩니다</p><p>작은 로직도 함수의 연속 실행을 통해 만들어가는 프로그래밍이 함수형 프로그래밍입니다</p><p>count_by는 group_by로 만들어낸 결과에 있는 key의 개수를 리턴해주는 함수입니다, 동일한 보조함수를 넘겨주면 키에 담긴 값이 data냐 length냐의 차이만 있습니다</p><p>계속해서 이러한 접기를 만들 때, for문을 머릿 속에서 지우고 코딩을 하면 됩니다</p><p>reduce를 하면서 모든 값들을 돌면서 특정 함수를 실행시킨 결과값이 나올 것이다, 순서보다는 들어온 값에 대해서 어떤 값을 리턴해주어야 하는지를 연속적으로 했을 때 결과가 나오도록 만들면 되는 것입니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _count_by = _curryr(<span class="function"><span class="keyword">function</span>(<span class="params">data, iter</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _reduce(data, <span class="function"><span class="keyword">function</span>(<span class="params">count, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> key = iter(val);</span><br><span class="line">    count[key] = count[key]++ ? count[key] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">  &#125;, &#123;&#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">_count_by(users, <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> user.age;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">_count_by(users, <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> user.age - user.age % <span class="number">10</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _inc = <span class="function"><span class="keyword">function</span>(<span class="params">count, key</span>) </span>&#123;</span><br><span class="line">  count[key] = count[key]++ ? count[key] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _count_by = _curryr(<span class="function"><span class="keyword">function</span>(<span class="params">data, iter</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _reduce(data, <span class="function"><span class="keyword">function</span>(<span class="params">count, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _inc(count, iter(val));</span><br><span class="line">  &#125;, &#123;&#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>조금 더 실무적인 예제를 만들어보겠습니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_each</span>(<span class="params">list, iter</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> keys = _keys(list);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = keys.length; i &lt; len; i++) &#123;</span><br><span class="line">    iter(list[keys[i]], keys[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_map</span>(<span class="params">list, mapper</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> new_list = [];</span><br><span class="line">  _each(list, <span class="function"><span class="keyword">function</span>(<span class="params">val, key</span>) </span>&#123;</span><br><span class="line">    new_list.push(mapper(val, key));</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> new_list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_map(users[<span class="number">0</span>], <span class="built_in">console</span>.log); <span class="comment">// 10 "id", ID name, 36 "age"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// underscore의 pairs</span></span><br><span class="line"><span class="keyword">var</span> pairs = _map(<span class="function"><span class="keyword">function</span>(<span class="params">val, key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [key, val];</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pairs = _map(<span class="function">(<span class="params">val, key</span>) =&gt;</span> [key, val]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(pairs(users[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _document_write = <span class="built_in">document</span>.write.bind(<span class="built_in">document</span>);</span><br><span class="line"></span><br><span class="line">_go(users,</span><br><span class="line">  _reject(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123; <span class="keyword">return</span> user.age &lt; <span class="number">20</span>; &#125;),</span><br><span class="line">  _count_by(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123; <span class="keyword">return</span> user.age - user.age % <span class="number">10</span>; &#125;),</span><br><span class="line">  _map(<span class="function">(<span class="params">count, key</span>) =&gt;</span> <span class="string">`&lt;li&gt;<span class="subst">$&#123;key&#125;</span>대는 <span class="subst">$&#123;count&#125;</span>명 입니다.&lt;/li&gt;`</span>),</span><br><span class="line">  list =&gt; <span class="string">`&lt;ul&gt;<span class="subst">$&#123;list.join(<span class="string">''</span>)&#125;</span>&lt;/ul&gt;`</span>,</span><br><span class="line">  <span class="built_in">document</span>.write.bind(<span class="built_in">document</span>) <span class="comment">// this에 대한 바인딩이 되어있어야만 document.write 사용 가능</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f1 = _pipe(users,</span><br><span class="line">  _count_by(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123; <span class="keyword">return</span> user.age - user.age % <span class="number">10</span>; &#125;),</span><br><span class="line">  _map(<span class="function">(<span class="params">count, key</span>) =&gt;</span> <span class="string">`&lt;li&gt;<span class="subst">$&#123;key&#125;</span>대는 <span class="subst">$&#123;count&#125;</span>명 입니다.&lt;/li&gt;`</span>),</span><br><span class="line">  list =&gt; <span class="string">`&lt;ul&gt;<span class="subst">$&#123;list.join(<span class="string">''</span>)&#125;</span>&lt;/ul&gt;`</span>,</span><br><span class="line">  <span class="built_in">document</span>.write.bind(<span class="built_in">document</span>) <span class="comment">// this에 대한 바인딩이 되어있어야만 document.write 사용 가능</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">f1(users);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f2 = _pipe(_reject(<span class="function"><span class="params">user</span> =&gt;</span> user.age &lt; <span class="number">20</span>), f1);</span><br><span class="line"></span><br><span class="line">f2(users);</span><br><span class="line">_go(users, _reject(<span class="function"><span class="params">user</span> =&gt;</span> user.age &lt; <span class="number">20</span>), f1);</span><br></pre></td></tr></table></figure><p>어떤 로직을 만들 때, 값을 수집하는 것인지 걸러내는 것인지 특정 값을 찾아내는 것인지, 접는 것인지에 대한 유형을 먼저 분석한 다음에 프로그래밍을 해나가는 것이 좋습니다</p><p>그러면 문제를 보다 잘 정리된 패턴으로 분석을 할 수 있고 과제가 쉬워져서 프로그래밍이 좀 더 쉽게 이루어지고, i의 변화나 for문 등이 없고, 모든 함수들이 다형성이 있으면서도 안정성이 확보된 함수들을 조립하면서 프로그래밍을 하기 때문에 내가 만든 이 로직이 잘 돌아갈 것이라는 확신을 좀 더 빨리 얻을 수 있고, 테스트도 훨씬 쉽습니다</p><p>이미 테스트가 잘 된 함수들의 조합을 통해서 프로그래밍을 해나가면 보다 빠르게 이 코드가 잘 동작할 것이라는 확신을 가지면서 쉽게 함수조합을 해나갈 수 있습니다</p><hr><h2 id="자바스크립트에서의-지연-평가"><a href="#자바스크립트에서의-지연-평가" class="headerlink" title="자바스크립트에서의 지연 평가"></a>자바스크립트에서의 지연 평가</h2><h3 id="지연-평가"><a href="#지연-평가" class="headerlink" title="지연 평가"></a>지연 평가</h3><p>지연 평가를 시작시키고 유지시키는(이어 가는) 함수</p><ul><li>map, filter, reject</li></ul><p>지연 평가를 끝내는 함수</p><ul><li>take, some, every, find</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mi = <span class="number">0</span>, fi = <span class="number">0</span>;</span><br><span class="line">_.go(</span><br><span class="line">  _.range(<span class="number">100</span>),</span><br><span class="line">  _.map(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    ++mi;</span><br><span class="line">    <span class="keyword">return</span> val * val;</span><br><span class="line">  &#125;),</span><br><span class="line">  _.filter(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    ++fi;</span><br><span class="line">    <span class="keyword">return</span> val % <span class="number">2</span>;</span><br><span class="line">  &#125;),</span><br><span class="line">  _.take(<span class="number">5</span>),</span><br><span class="line">  <span class="built_in">console</span>.log</span><br><span class="line">)</span><br><span class="line"><span class="built_in">console</span>.log(mi, fi); <span class="comment">// 100, 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mi = <span class="number">0</span>, fi = <span class="number">0</span>;</span><br><span class="line">_.go(</span><br><span class="line">  _.range(<span class="number">100</span>),</span><br><span class="line">  L.map(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    ++mi;</span><br><span class="line">    <span class="keyword">return</span> val * val;</span><br><span class="line">  &#125;),</span><br><span class="line">  L.filter(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    ++fi;</span><br><span class="line">    <span class="keyword">return</span> val % <span class="number">2</span>;</span><br><span class="line">  &#125;),</span><br><span class="line">  L.take(<span class="number">5</span>),</span><br><span class="line">  <span class="built_in">console</span>.log</span><br><span class="line">)</span><br><span class="line"><span class="built_in">console</span>.log(mi, fi); <span class="comment">// 10, 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mi = <span class="number">0</span>, fi = <span class="number">0</span>;</span><br><span class="line">_.go(</span><br><span class="line">  _.range(<span class="number">100</span>),</span><br><span class="line">  L.map(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    ++mi;</span><br><span class="line">    <span class="keyword">return</span> val * val;</span><br><span class="line">  &#125;),</span><br><span class="line">  L.filter(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    ++fi;</span><br><span class="line">    <span class="keyword">return</span> val % <span class="number">2</span>;</span><br><span class="line">  &#125;),</span><br><span class="line">  L.some(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val &gt; <span class="number">100</span>;</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="built_in">console</span>.log</span><br><span class="line">)</span><br><span class="line"><span class="built_in">console</span>.log(mi, fi); <span class="comment">// 12, 12</span></span><br></pre></td></tr></table></figure><p>순수함수로 이루어져있기에 가능합니다</p><p>순수함수란 어느 시점에 평가를 해도 항상 동일한 결과를 돌려주기 때문입니다</p><p>그렇기에 내부적으로 순서를 재배치함으로서 최적화할 수 있는 여지가 생깁니다</p><h3 id="요약-클로저-엘릭서-병렬성"><a href="#요약-클로저-엘릭서-병렬성" class="headerlink" title="요약, 클로저, 엘릭서, 병렬성"></a>요약, 클로저, 엘릭서, 병렬성</h3><ul><li>함수를 되도록 작게 만들기</li><li>다형성 높은 함수 만들기</li><li>상태를 변경하지 않거나 정확히 다루어 부수 효과를 최소화 하기<ul><li>부수효과가 없을 수는 없습니다, 다만 부수효과는 해당 로직의 최종 목적이 되니, 부수효과 전까지의 과정에서는 상태를 변경하지 않는 프로그래밍을 하다가 (과정에서는 지속적으로 부수효과를 일으키거나 상태를 변경해나가면서 프로그래밍 하는 것이 아니라) 마지막에 목적이자 결과로 부수효과를 발생시키도록 프로그래밍합니다</li></ul></li><li>동일한 인자를 받으면 항상 동일한 결과를 리턴하는 순수 함수 만들기</li><li>복잡한 객체 하나를 인자로 사용하기보다 되도록 일반적인 값 여러 개를 인자로 사용하기</li><li>큰 로직을 고차 함수로 만들고 세부 로직을 보조 함수로 완성하기</li><li>어느 곳에서든 바로 혹은 미뤄서 실행할 수 있도록 (메소드가 아닌) 일반 함수이자 순수 함수로 선언하기</li><li>모델이나 컬렉션 등의 커스텀 객체보다는 (언어에서 지원하는 자료형인) 기본 객체를 이용하기</li><li>로직의 흐름을 최대한 단방향으로 흐르게 하기</li><li>작은 함수를 조합해서 큰 함수 만들기</li></ul><p>아래와 같은 데이터 흐름 프로그래밍을 하기</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">_go(users,</span><br><span class="line">  _filter(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123; <span class="keyword">return</span> user.age &lt; <span class="number">30</span> &#125;),</span><br><span class="line">  _map(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123; <span class="keyword">return</span> user.age; &#125;),</span><br><span class="line">  <span class="built_in">console</span>.log)</span><br><span class="line"></span><br><span class="line">_go(users,</span><br><span class="line">  _filter(<span class="function"><span class="params">user</span> =&gt;</span> user.age &gt;= <span class="number">30</span>),</span><br><span class="line">  _map(<span class="function"><span class="params">user</span> =&gt;</span> user.name),</span><br><span class="line">  <span class="built_in">console</span>.log)</span><br></pre></td></tr></table></figure><h4 id="데이터-흐름-프로그래밍의-중요성"><a href="#데이터-흐름-프로그래밍의-중요성" class="headerlink" title="데이터 흐름 프로그래밍의 중요성"></a>데이터 흐름 프로그래밍의 중요성</h4><p>함수형 프로그래밍은 특정 언어에 국한되는 것이 아니라 언어 위에 있는 패러다임입니다<br>따라서 언어와 무관하게 적용 가능합니다</p><p>Clojure와 Elixer 읽기</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> users [</span><br><span class="line">  &#123; <span class="symbol">:id</span> <span class="number">1</span> <span class="symbol">:name</span> 'ID' <span class="symbol">:age</span> <span class="number">36</span> &#125;</span><br><span class="line">  &#123; <span class="symbol">:id</span> <span class="number">2</span> <span class="symbol">:name</span> 'BJ' <span class="symbol">:age</span> <span class="number">32</span> &#125;</span><br><span class="line">  &#123; <span class="symbol">:id</span> <span class="number">3</span> <span class="symbol">:name</span> 'JM' <span class="symbol">:age</span> <span class="number">34</span> &#125;</span><br><span class="line">  &#123; <span class="symbol">:id</span> <span class="number">4</span> <span class="symbol">:name</span> 'PJ' <span class="symbol">:age</span> <span class="number">27</span> &#125;</span><br><span class="line">  &#123; <span class="symbol">:id</span> <span class="number">5</span> <span class="symbol">:name</span> 'HA' <span class="symbol">:age</span> <span class="number">25</span> &#125;</span><br><span class="line">  &#123; <span class="symbol">:id</span> <span class="number">6</span> <span class="symbol">:name</span> 'JE' <span class="symbol">:age</span> <span class="number">26</span> &#125;</span><br><span class="line">  &#123; <span class="symbol">:id</span> <span class="number">7</span> <span class="symbol">:name</span> 'JI' <span class="symbol">:age</span> <span class="number">31</span> &#125;</span><br><span class="line">  &#123; <span class="symbol">:id</span> <span class="number">8</span> <span class="symbol">:name</span> 'MP' <span class="symbol">:age</span> <span class="number">23</span> &#125;])</span><br><span class="line"></span><br><span class="line">(<span class="name">println</span></span><br><span class="line"> (<span class="name"><span class="builtin-name">map</span></span> (<span class="name"><span class="builtin-name">fn</span></span> [user] (<span class="symbol">:name</span> user))</span><br><span class="line">      (<span class="name"><span class="builtin-name">filter</span></span> (<span class="name"><span class="builtin-name">fn</span></span> [user] (<span class="name"><span class="builtin-name">&lt;</span></span> (<span class="symbol">:age</span> user) <span class="number">30</span>)) users)))</span><br><span class="line"><span class="comment">;(PJ' HA' JE' MP')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;  console.log(</span></span><br><span class="line"><span class="comment">;    _map(user =&gt; user.age)</span></span><br><span class="line"><span class="comment">;      (_filter(user =&gt; user.age &lt; 30)(users)));</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">-&gt;&gt;</span></span> users</span><br><span class="line">     (<span class="name"><span class="builtin-name">filter</span></span> (<span class="name"><span class="builtin-name">fn</span></span> [user] (<span class="name"><span class="builtin-name">&lt;</span></span> (<span class="symbol">:age</span> user) <span class="number">30</span>)))</span><br><span class="line">     (<span class="name"><span class="builtin-name">map</span></span> (<span class="name"><span class="builtin-name">fn</span></span> [user] (<span class="symbol">:name</span> user)))</span><br><span class="line">     println)</span><br><span class="line"><span class="comment">; (PJ' HA' JE' MP')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;  _go(users,</span></span><br><span class="line"><span class="comment">;    _filter(user =&gt; user.age &lt; 30),</span></span><br><span class="line"><span class="comment">;    _map(user =&gt; user.name),</span></span><br><span class="line"><span class="comment">;    console.log);</span></span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">-&gt;&gt;</span></span> users</span><br><span class="line">     (<span class="name"><span class="builtin-name">filter</span></span> #(<span class="name"><span class="builtin-name">&gt;=</span></span> (<span class="symbol">:age</span> %) <span class="number">30</span>))</span><br><span class="line">     (<span class="name"><span class="builtin-name">map</span></span> #(<span class="symbol">:name</span> %))</span><br><span class="line">     println)</span><br><span class="line"><span class="comment">;(ID' BJ' JM' JI')</span></span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">-&gt;&gt;</span></span> users</span><br><span class="line">     (<span class="name"><span class="builtin-name">filter</span></span> (<span class="name"><span class="builtin-name">fn</span></span> [user] (<span class="name"><span class="builtin-name">&lt;</span></span> (<span class="symbol">:age</span> user) <span class="number">30</span>)))</span><br><span class="line">     (<span class="name"><span class="builtin-name">map</span></span> (<span class="name"><span class="builtin-name">fn</span></span> [user] (<span class="symbol">:age</span> user)))</span><br><span class="line">     println)</span><br><span class="line"><span class="comment">; (27 25 26 23)</span></span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">-&gt;&gt;</span></span> users</span><br><span class="line">     (<span class="name"><span class="builtin-name">filter</span></span> #(<span class="name"><span class="builtin-name">&lt;</span></span> (<span class="symbol">:age</span> %) <span class="number">30</span>))</span><br><span class="line">     (<span class="name"><span class="builtin-name">map</span></span> #(<span class="symbol">:age</span> %))</span><br><span class="line">     (<span class="name"><span class="builtin-name">reduce</span></span> +)</span><br><span class="line">     println)</span><br><span class="line"><span class="comment">; 101</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">; 병렬 처리</span></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> word-frequency1 [text]</span><br><span class="line">  (<span class="name"><span class="builtin-name">-&gt;&gt;</span></span></span><br><span class="line">   (<span class="name">s/split</span> text #<span class="string">"\s+"</span>)</span><br><span class="line">   (<span class="name">r/map</span> s/lower-case)</span><br><span class="line">   (<span class="name">r/remove</span> (<span class="name"><span class="builtin-name">fn</span></span> [word] (<span class="name">s/starts-with?</span> word <span class="string">"function"</span>)))</span><br><span class="line">   (<span class="name">r/map</span> (<span class="name"><span class="builtin-name">fn</span></span> [word] &#123; word <span class="number">1</span> &#125;))</span><br><span class="line">   (<span class="name">r/fold</span> (<span class="name"><span class="builtin-name">partial</span></span> merge-with +))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> -main []</span><br><span class="line">  (<span class="name"><span class="builtin-name">time</span></span> (<span class="name">word-frequency1</span> page))</span><br><span class="line">  (<span class="name"><span class="builtin-name">time</span></span> (<span class="name">word-frequency1</span> page))</span><br><span class="line">  (<span class="name"><span class="builtin-name">time</span></span> (<span class="name">word-frequency1</span> page))</span><br><span class="line">  (<span class="name"><span class="builtin-name">time</span></span> (<span class="name">word-frequency1</span> page)))</span><br></pre></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Console</span></span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log</span></span>(v) <span class="keyword">do</span></span><br><span class="line">        IO.puts(inspect(v))</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">users = [</span><br><span class="line">    %&#123; <span class="symbol">id:</span> <span class="number">1</span>, <span class="symbol">name:</span> <span class="string">'ID'</span>, <span class="symbol">age:</span> <span class="number">36</span> &#125;,</span><br><span class="line">    %&#123; <span class="symbol">id:</span> <span class="number">2</span>, <span class="symbol">name:</span> <span class="string">'BJ'</span>, <span class="symbol">age:</span> <span class="number">32</span> &#125;,</span><br><span class="line">    %&#123; <span class="symbol">id:</span> <span class="number">3</span>, <span class="symbol">name:</span> <span class="string">'JM'</span>, <span class="symbol">age:</span> <span class="number">34</span> &#125;,</span><br><span class="line">    %&#123; <span class="symbol">id:</span> <span class="number">4</span>, <span class="symbol">name:</span> <span class="string">'PJ'</span>, <span class="symbol">age:</span> <span class="number">27</span> &#125;,</span><br><span class="line">    %&#123; <span class="symbol">id:</span> <span class="number">5</span>, <span class="symbol">name:</span> <span class="string">'HA'</span>, <span class="symbol">age:</span> <span class="number">25</span> &#125;,</span><br><span class="line">    %&#123; <span class="symbol">id:</span> <span class="number">6</span>, <span class="symbol">name:</span> <span class="string">'JE'</span>, <span class="symbol">age:</span> <span class="number">26</span> &#125;,</span><br><span class="line">    %&#123; <span class="symbol">id:</span> <span class="number">7</span>, <span class="symbol">name:</span> <span class="string">'JI'</span>, <span class="symbol">age:</span> <span class="number">31</span> &#125;,</span><br><span class="line">    %&#123; <span class="symbol">id:</span> <span class="number">8</span>, <span class="symbol">name:</span> <span class="string">'MP'</span>, <span class="symbol">age:</span> <span class="number">23</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">filtered = Enum.filter(users, <span class="keyword">fn</span> u -&gt; u.age &gt;= <span class="number">30</span> <span class="keyword">end</span>);</span><br><span class="line">Console.log(filtered);</span><br><span class="line"></span><br><span class="line"><span class="comment"># [%&#123;age: 36, id: 1, name: 'ID'&#125;,</span></span><br><span class="line"><span class="comment">#  %&#123;age: 32, id: 2, name: 'BJ'&#125;,</span></span><br><span class="line"><span class="comment">#  %&#123;age: 34, id: 3, name: 'JM'&#125;,</span></span><br><span class="line"><span class="comment">#  %&#123;age: 31, id: 7, name: 'JI'&#125;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Console.log(</span><br><span class="line">    Enum.map(</span><br><span class="line">        Enum.filter(users, <span class="keyword">fn</span> user -&gt; user.age &gt;= <span class="number">30</span> <span class="keyword">end</span>),</span><br><span class="line">        <span class="keyword">fn</span> user -&gt; user.name <span class="keyword">end</span>))</span><br><span class="line"><span class="comment"># ['ID', 'BJ', 'JM', 'JI']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># console.log(</span></span><br><span class="line"><span class="comment">#   _map(</span></span><br><span class="line"><span class="comment">#     _filter(users, function(user) &#123; return user.age &gt;= 30; &#125;),</span></span><br><span class="line"><span class="comment">#     function(user) &#123; return user.name; &#125;));</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">users</span><br><span class="line">    |&gt; Enum.filter(&amp;(&amp;<span class="number">1</span>.age &gt;= <span class="number">30</span>))</span><br><span class="line">    |&gt; Enum.map(&amp;(&amp;<span class="number">1</span>.name))</span><br><span class="line">    |&gt; Console.log</span><br><span class="line">    <span class="comment"># ['ID', 'BJ', 'JM', 'JI']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  _go(users,</span></span><br><span class="line"><span class="comment">#    _filter(u =&gt; u.age &gt;= 30),</span></span><br><span class="line"><span class="comment">#    _map(u =&gt; u.name),</span></span><br><span class="line"><span class="comment">#    console.log);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">users</span><br><span class="line">    |&gt; Enum.filter(&amp;(&amp;<span class="number">1</span>.age &lt; <span class="number">30</span>))</span><br><span class="line">    |&gt; Enum.map(&amp;(&amp;<span class="number">1</span>.age))</span><br><span class="line">    |&gt; Console.log</span><br><span class="line">    <span class="comment"># [27, 25, 26, 23]</span></span><br><span class="line"></span><br><span class="line">users</span><br><span class="line">    |&gt; Enum.filter_map(&amp;(&amp;<span class="number">1</span>.age &lt; <span class="number">30</span>), &amp;(&amp;<span class="number">1</span>.age))</span><br><span class="line">    |&gt; Console.log</span><br><span class="line">    <span class="comment"># [27, 25, 26, 23]</span></span><br><span class="line"></span><br><span class="line">users</span><br><span class="line">    |&gt; Enum.filter_map(&amp;(&amp;<span class="number">1</span>.age &lt; <span class="number">30</span>), &amp;(&amp;<span class="number">1</span>.age))</span><br><span class="line">    |&gt; Enum.reduce(&amp;(&amp;<span class="number">1</span> + &amp;<span class="number">2</span>))</span><br><span class="line">    |&gt; Console.log</span><br><span class="line">    <span class="comment"># 121</span></span><br><span class="line"></span><br><span class="line">users</span><br><span class="line">    |&gt; Enum.filter(&amp;(&amp;<span class="number">1</span>.age &lt; <span class="number">30</span>))</span><br><span class="line">    |&gt; Enum.map_reduce(<span class="number">0</span>, <span class="keyword">fn</span>(u, total) -&gt; &#123;u.age, u.age + total&#125; <span class="keyword">end</span>)</span><br><span class="line">    |&gt; Console.log</span><br><span class="line">    <span class="comment"># &#123;[27, 25, 26, 23], 101&#125;</span></span><br></pre></td></tr></table></figure><h4 id="지연평가-병렬성-동시성"><a href="#지연평가-병렬성-동시성" class="headerlink" title="지연평가 + 병렬성 + 동시성"></a>지연평가 + 병렬성 + 동시성</h4><p>지연평가가 가능한 것은 언제 평가해도 동일한 순수함수의 조합으로 프로그래밍을 하기 때문입니다, 마찬가지로 어느 시점에 평가해도 상관없는 순수함수는 동시에 다른 쓰레드에서 평가를 해도 상관이 없습니다, 따라서 병렬성과 동시성에 있어서 굉장히 유리합니다</p><p>이 부분은 직접 강의를 들어봐야만 전달받을 수 있을 것!</p><h4 id="비동기-I-O-NodeJS"><a href="#비동기-I-O-NodeJS" class="headerlink" title="비동기 I/O NodeJS"></a>비동기 I/O NodeJS</h4><p>뒷 수업에서 다루기로!</p><hr><h2 id="실전코드조각-1"><a href="#실전코드조각-1" class="headerlink" title="실전코드조각 1"></a>실전코드조각 1</h2><h3 id="users-posts-comments"><a href="#users-posts-comments" class="headerlink" title="users, posts, comments"></a>users, posts, comments</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> users = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">101</span>, <span class="attr">name</span>: <span class="string">'ID'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">102</span>, <span class="attr">name</span>: <span class="string">'BJ'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">103</span>, <span class="attr">name</span>: <span class="string">'PJ'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">104</span>, <span class="attr">name</span>: <span class="string">'HA'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">105</span>, <span class="attr">name</span>: <span class="string">'JE'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">106</span>, <span class="attr">name</span>: <span class="string">'JI'</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> posts = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">201</span>, <span class="attr">body</span>: <span class="string">'내용1'</span>, <span class="attr">user_id</span>: <span class="number">101</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">202</span>, <span class="attr">body</span>: <span class="string">'내용2'</span>, <span class="attr">user_id</span>: <span class="number">102</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">203</span>, <span class="attr">body</span>: <span class="string">'내용3'</span>, <span class="attr">user_id</span>: <span class="number">103</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">204</span>, <span class="attr">body</span>: <span class="string">'내용4'</span>, <span class="attr">user_id</span>: <span class="number">102</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">205</span>, <span class="attr">body</span>: <span class="string">'내용5'</span>, <span class="attr">user_id</span>: <span class="number">101</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> comments = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">301</span>, <span class="attr">body</span>: <span class="string">'댓글1'</span>, <span class="attr">user_id</span>: <span class="number">105</span>, <span class="attr">post_id</span>: <span class="number">201</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">302</span>, <span class="attr">body</span>: <span class="string">'댓글2'</span>, <span class="attr">user_id</span>: <span class="number">104</span>, <span class="attr">post_id</span>: <span class="number">201</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">303</span>, <span class="attr">body</span>: <span class="string">'댓글3'</span>, <span class="attr">user_id</span>: <span class="number">104</span>, <span class="attr">post_id</span>: <span class="number">202</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">304</span>, <span class="attr">body</span>: <span class="string">'댓글4'</span>, <span class="attr">user_id</span>: <span class="number">105</span>, <span class="attr">post_id</span>: <span class="number">203</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">305</span>, <span class="attr">body</span>: <span class="string">'댓글5'</span>, <span class="attr">user_id</span>: <span class="number">106</span>, <span class="attr">post_id</span>: <span class="number">203</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">306</span>, <span class="attr">body</span>: <span class="string">'댓글6'</span>, <span class="attr">user_id</span>: <span class="number">106</span>, <span class="attr">post_id</span>: <span class="number">204</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">307</span>, <span class="attr">body</span>: <span class="string">'댓글7'</span>, <span class="attr">user_id</span>: <span class="number">102</span>, <span class="attr">post_id</span>: <span class="number">205</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">308</span>, <span class="attr">body</span>: <span class="string">'댓글8'</span>, <span class="attr">user_id</span>: <span class="number">103</span>, <span class="attr">post_id</span>: <span class="number">204</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">309</span>, <span class="attr">body</span>: <span class="string">'댓글9'</span>, <span class="attr">user_id</span>: <span class="number">103</span>, <span class="attr">post_id</span>: <span class="number">202</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">310</span>, <span class="attr">body</span>: <span class="string">'댓글10'</span>, <span class="attr">user_id</span>: <span class="number">105</span>, <span class="attr">post_id</span>: <span class="number">201</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 특정인의 posts의 모든 comments 거르기</span></span><br><span class="line">_.go(</span><br><span class="line">  _.filter(posts, <span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> post.user_id == <span class="number">101</span>;</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">posts</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _.filter(comments, <span class="function"><span class="keyword">function</span>(<span class="params">comment</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> _.find(posts, <span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> post.id == comment.post_id;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="built_in">console</span>.log</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">_.go(</span><br><span class="line">  _.filter(posts, <span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> post.user_id == <span class="number">101</span>;</span><br><span class="line">  &#125;),</span><br><span class="line">  _.map(<span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> post.id;</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">post_ids</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _.filter(comments, <span class="function"><span class="keyword">function</span>(<span class="params">comment</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> _.contains(post_ids, comment.post_id);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">console</span>.log</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">_.go(</span><br><span class="line">  _.filter(posts, <span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> post.user_id == <span class="number">101</span>;</span><br><span class="line">  &#125;),</span><br><span class="line">  _.pluck(<span class="string">'id'</span>),</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">post_ids</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _.filter(comments, <span class="function"><span class="keyword">function</span>(<span class="params">comment</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> _.contains(post_ids, comment.post_id);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">console</span>.log</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">_.go(</span><br><span class="line">  _.where(posts, &#123; <span class="attr">user_id</span>: <span class="number">101</span> &#125;),</span><br><span class="line">  _.pluck(<span class="string">'id'</span>),</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">post_ids</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _.filter(comments, <span class="function"><span class="keyword">function</span>(<span class="params">comment</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> _.contains(post_ids, comment.post_id);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">console</span>.log</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">posts_by</span>(<span class="params">attr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _.where(posts, attr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> comments_by_posts = _.pipe(</span><br><span class="line">  _.pluck(<span class="string">'id'</span>),</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">post_ids</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _.filter(comments, <span class="function"><span class="keyword">function</span>(<span class="params">comment</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> _.contains(post_ids, comment.post_id);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f1 = _.pipe(posts_by, comments_by_posts);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f1(&#123; <span class="attr">user_id</span>: <span class="number">101</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 특정인의 posts에 comments를 단 친구의 이름들 뽑기</span></span><br><span class="line">_.go(</span><br><span class="line">  _.where(posts, &#123; <span class="attr">user_id</span>: <span class="number">101</span> &#125;),</span><br><span class="line">  _.pluck(<span class="string">'id'</span>),</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">post_ids</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _.filter(comments, <span class="function"><span class="keyword">function</span>(<span class="params">comment</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> _.contains(post_ids, comment.post_id);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  _.map(<span class="function"><span class="keyword">function</span>(<span class="params">comment</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _.find(users, <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> user.id == comment.user.id;</span><br><span class="line">    &#125;).name;</span><br><span class="line">  &#125;),</span><br><span class="line">  _.uniq,</span><br><span class="line">  <span class="built_in">console</span>.log</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">posts_by</span>(<span class="params">attr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _.where(posts, attr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_.go(</span><br><span class="line">  posts_by(&#123; <span class="attr">users_id</span>: <span class="number">101</span> &#125;),</span><br><span class="line">  _.pluck(<span class="string">'id'</span>),</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">post_ids</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _.filter(comments, <span class="function"><span class="keyword">function</span>(<span class="params">comment</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> _.contains(post_ids, comment.post_id);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  _.map(<span class="function"><span class="keyword">function</span>(<span class="params">comment</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _.find(users, <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> user.id == comment.user.id;</span><br><span class="line">    &#125;).name;</span><br><span class="line">  &#125;),</span><br><span class="line">  _.uniq,</span><br><span class="line">  <span class="built_in">console</span>.log</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">_.go(</span><br><span class="line">  &#123; <span class="attr">users_id</span>: <span class="number">101</span> &#125;,</span><br><span class="line">  posts_by,</span><br><span class="line">  _.pluck(<span class="string">'id'</span>),</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">post_ids</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _.filter(comments, <span class="function"><span class="keyword">function</span>(<span class="params">comment</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> _.contains(post_ids, comment.post_id);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  _.map(<span class="function"><span class="keyword">function</span>(<span class="params">comment</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _.find(users, <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> user.id == comment.user.id;</span><br><span class="line">    &#125;).name;</span><br><span class="line">  &#125;),</span><br><span class="line">  _.uniq,</span><br><span class="line">  <span class="built_in">console</span>.log</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> comments_by_posts = _.pipe(</span><br><span class="line">  _.pluck(<span class="string">'id'</span>),</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">post_ids</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _.filter(comments, <span class="function"><span class="keyword">function</span>(<span class="params">comment</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> _.contains(post_ids, comment.post_id);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">_.go(&#123; <span class="attr">user_id</span>: <span class="number">101</span> &#125;,</span><br><span class="line">  posts_by,</span><br><span class="line">  comments_by_posts,</span><br><span class="line">  _.map(<span class="function"><span class="keyword">function</span>(<span class="params">comment</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _.find(users, <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> user.id == comment.user.id;</span><br><span class="line">    &#125;).name;</span><br><span class="line">  &#125;),</span><br><span class="line">  _.uniq,</span><br><span class="line">  <span class="built_in">console</span>.log</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f2 = _.pipe(</span><br><span class="line">  f1,</span><br><span class="line">  _.map(<span class="function"><span class="keyword">function</span>(<span class="params">comment</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _.find(users, <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> user.id == comment.user.id;</span><br><span class="line">    &#125;).name;</span><br><span class="line">  &#125;),</span><br><span class="line">  _.uniq);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f2(&#123; <span class="attr">user_id</span>: <span class="number">101</span>&#125;));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">user_names_by_comments</span>(<span class="params">comments</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _.map(comments, <span class="function"><span class="keyword">function</span>(<span class="params">comment</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _.find(users, <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> user.id == comment.user_id;</span><br><span class="line">    &#125;).name;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user_names_by_comments = _.map(<span class="function"><span class="keyword">function</span>(<span class="params">comment</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _.find(users, <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> user.id == comment.user_id;</span><br><span class="line">    &#125;).name;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f2 = _.pipe(f1, user_names_by_comments, _.uniq);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f2(&#123; <span class="attr">user_id</span>: <span class="number">101</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> comments_to_user_names = _.map(<span class="function"><span class="keyword">function</span>(<span class="params">comment</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _.find(users, <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> user.id == comment.user_id;</span><br><span class="line">    &#125;).name;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f2 = _.pipe(f1, comments_to_user_names, _.uniq);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f2(&#123; <span class="attr">user_id</span>: <span class="number">101</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 특정인의 posts에 comments를 단 친구들 카운트 정보</span></span><br><span class="line">_.go(&#123; <span class="attr">user_id</span>: <span class="number">101</span> &#125;,</span><br><span class="line">  posts_by,</span><br><span class="line">  comments_by_posts,</span><br><span class="line">  _.map(<span class="function"><span class="keyword">function</span>(<span class="params">comment</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _.find(users, <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> user.id == comment.user.id;</span><br><span class="line">    &#125;).name;</span><br><span class="line">  &#125;),</span><br><span class="line">  _.count_by,</span><br><span class="line">  <span class="built_in">console</span>.log</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f3 = _.pipe(f1, comments_to_user_names, _.count_by);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f3(&#123; <span class="attr">user_id</span>: <span class="number">101</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 특정인이 comment를 단 posts 거르기</span></span><br><span class="line">_.go(</span><br><span class="line">  _.where(comments, &#123; <span class="attr">user_id</span>: <span class="number">105</span> &#125;),</span><br><span class="line">  _.pluck(<span class="string">'post_id'</span>),</span><br><span class="line">  _.uniq,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">post_ids</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _.filter(posts, <span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> _.contains(post_ids, post.id);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">console</span>.log);</span><br></pre></td></tr></table></figure><hr><h3 id="효율-높이기"><a href="#효율-높이기" class="headerlink" title="효율 높이기"></a>효율 높이기</h3><p>이어질 로직들을 처리하기 좋게 데이터를 먼저 변형하고 진행하겠다라고 생각하면 좋습니다 (문제가 간결해집니다)</p><p>users 밑에 posts가 속해있고, 각각의 posts에는 comments가 속하도록 변경해두고 시작하면 뒷 부분에서 효율성을 획득할 수 있습니다</p><p>불변적으로 데이터를 다루는 것이 좋습니다, 보다 안전하고 많은 문제를 해결해주며 쉽게 해줍니다</p><p>값을 한 번 변경해놓으면 다른 로직에서 다시 참조할 때에도 문제가 발생할 수 있습니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5. users + posts + comments (index_by와 group_by로 효율 높이기)</span></span><br><span class="line"><span class="comment">// function find_user_by_id(user_id) &#123; _.find(users, function(user) &#123; return user.id == comment.user_id; &#125;) &#125;</span></span><br><span class="line"><span class="comment">// function find_user_by_id(user_id) &#123; return user2[user_id] &#125;</span></span><br><span class="line"><span class="keyword">var</span> users2 = _.index_by(users, <span class="string">'id'</span>); <span class="comment">// 배열을 주어진 키를 기준으로 인덱싱한 새로운 객체를 만들어 리턴해주는 함수</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> comments2 = _.go(</span><br><span class="line">  comments,</span><br><span class="line">  _.map(<span class="function"><span class="keyword">function</span>(<span class="params">comment</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _.extend(&#123; <span class="comment">// 값 복사해주는 함수</span></span><br><span class="line">      <span class="comment">// user: _.find(users, function(user) &#123; return user.id == comment.user_id; &#125;)</span></span><br><span class="line">      <span class="comment">// user: find_user_by_id(comment.user_id)</span></span><br><span class="line">      user: users2[comment.user_id]</span><br><span class="line">    &#125;, comment);</span><br><span class="line">  &#125;),</span><br><span class="line">  _.group_by(<span class="string">'post_id'</span>)); <span class="comment">// 해당하는 key를 기준으로 배열을 담은 새로운 객체를 만들어 리턴해주는 함수</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(comments2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> posts2 = _.go(</span><br><span class="line">  posts,</span><br><span class="line">  _.map(<span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _.extend(&#123;</span><br><span class="line">      <span class="comment">// comments: _.filter(comments2, function(comment) &#123; return comment.post_id == post.id &#125;),</span></span><br><span class="line">      comments: comments2[post.id] || [],</span><br><span class="line">      user: users2[post.user_id]</span><br><span class="line">    &#125;, post);</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> posts3 = _.group_by(posts2, <span class="string">'user_id'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(posts3);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * _.each(users2, function(user) &#123;</span></span><br><span class="line"><span class="comment"> *   user.posts. = _.filter(posts2, function(post) &#123;</span></span><br><span class="line"><span class="comment"> *     return post.user_id == user.id;</span></span><br><span class="line"><span class="comment"> *   &#125;)</span></span><br><span class="line"><span class="comment"> * &#125;);</span></span><br><span class="line"><span class="comment"> * 위와 같이 변경하면 안에 담긴 값들이 계속해서 서로 연결되는 형태가 됩니다</span></span><br><span class="line"><span class="comment"> * 그렇게 되면 계속해서 재귀가 되는 형태가 되므로 JSON.stringify가 불가능합니다</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * var users3 = _.map(users2, function(user) &#123;</span></span><br><span class="line"><span class="comment"> *   return _.extend(&#123;</span></span><br><span class="line"><span class="comment"> *     posts: posts2[user.id] || []</span></span><br><span class="line"><span class="comment"> *   &#125;, user);</span></span><br><span class="line"><span class="comment"> * &#125;);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> users3 = _.map(users2, <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _.extend(&#123;</span><br><span class="line">    posts: posts3[user.id] || []</span><br><span class="line">  &#125;, user);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(users3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.1. 특정인의 posts의 모든 comments 거르기</span></span><br><span class="line"><span class="keyword">var</span> user = users3[<span class="number">0</span>]; <span class="comment">// 특정인 지정</span></span><br><span class="line"></span><br><span class="line">_.go(user.posts,</span><br><span class="line">  _.pluck(<span class="string">'comments'</span>),</span><br><span class="line">  _.flatten, <span class="comment">// 합쳐주는 역할</span></span><br><span class="line">  <span class="built_in">console</span>.log);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(_.deep_pluck(user, <span class="string">'posts.comments'</span>)); <span class="comment">// 깊이있는 값을 path를 따라서 pluck + flatten을 해주는 함수</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.2. 특정인의 posts에 comments를 단 친구의 이름들 뽑기</span></span><br><span class="line">_.go(user.posts,</span><br><span class="line">  _.pluck(<span class="string">'comments'</span>),</span><br><span class="line">  _.flatten,</span><br><span class="line">  _.pluck(<span class="string">'user'</span>),</span><br><span class="line">  _.pluck(<span class="string">'name'</span>),</span><br><span class="line">  _.uniq,</span><br><span class="line">  <span class="built_in">console</span>.log);</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(_.uniq(_.deep_pluck(user, 'posts.comments.user.name')));</span></span><br><span class="line"><span class="comment">// 함수의 중첩이 생겼으니 go로 변환한다</span></span><br><span class="line">_.go(user, _.deep_pluck(<span class="string">'posts.comments.user.name'</span>), _.uniq, <span class="built_in">console</span>.log);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.3. 특정인의 posts에 comments를 단 친구들 카운트 정보</span></span><br><span class="line"></span><br><span class="line">_.go(user.posts,</span><br><span class="line">  _.pluck(<span class="string">'comments'</span>),</span><br><span class="line">  _.flatten,</span><br><span class="line">  _.pluck(<span class="string">'user'</span>),</span><br><span class="line">  _.pluck(<span class="string">'name'</span>),</span><br><span class="line">  _.count_by,</span><br><span class="line">  <span class="built_in">console</span>.log);</span><br><span class="line"></span><br><span class="line">_.go(user, _.deep_pluck(<span class="string">'posts.comments.user.name'</span>), _.count_by, <span class="built_in">console</span>.log);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.4. 특정인이 comment를 단 posts 거르기</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  _.filter(posts2, <span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _.find(post.comments, <span class="function"><span class="keyword">function</span>(<span class="params">comment</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> comment.user_id == <span class="number">105</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><hr><h2 id="실전코드조각-2"><a href="#실전코드조각-2" class="headerlink" title="실전코드조각 2"></a>실전코드조각 2</h2><p>reduce 등을 사용하게 되면 명령적인 코드들이 사라지므로 문제해결에만 집중할 수 있게 됩니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> products = [</span><br><span class="line">  &#123;</span><br><span class="line">    is_selected: <span class="literal">true</span>, <span class="comment">// &lt;--- 장바구니에서 체크 박스 선택</span></span><br><span class="line">    name: <span class="string">"반팔티"</span>,</span><br><span class="line">    price: <span class="number">10000</span>, <span class="comment">// &lt;--- 기본 가격</span></span><br><span class="line">    sizes: [ <span class="comment">// &lt;---- 장바구니에 담은 동일 상품의 사이즈 별 수량과 가격</span></span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">"L"</span>, <span class="attr">quantity</span>: <span class="number">4</span>, <span class="attr">price</span>: <span class="number">0</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">"XL"</span>, <span class="attr">quantity</span>: <span class="number">2</span>, <span class="attr">price</span>: <span class="number">0</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">"2XL"</span>, <span class="attr">quantity</span>: <span class="number">3</span>, <span class="attr">price</span>: <span class="number">2000</span> &#125;, <span class="comment">// &lt;-- 옵션의 추가 가격</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    is_selected: <span class="literal">true</span>,</span><br><span class="line">    name: <span class="string">"후드티"</span>,</span><br><span class="line">    price: <span class="number">21000</span>,</span><br><span class="line">    sizes: [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">"L"</span>, <span class="attr">quantity</span>: <span class="number">2</span>, <span class="attr">price</span>: <span class="number">-1000</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">"2XL"</span>, <span class="attr">quantity</span>: <span class="number">4</span>, <span class="attr">price</span>: <span class="number">2000</span> &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    is_selected: <span class="literal">false</span>,</span><br><span class="line">    name: <span class="string">"맨투맨"</span>,</span><br><span class="line">    price: <span class="number">16000</span>,</span><br><span class="line">    sizes: [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">"L"</span>, <span class="attr">quantity</span>: <span class="number">10</span>, <span class="attr">price</span>: <span class="number">0</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 모든 수량</span></span><br><span class="line"><span class="keyword">var</span> total_quantity = _.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">tq, product</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _.reduce(product.sizes, <span class="function"><span class="keyword">function</span>(<span class="params">tq, size</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tq + size.quantity;</span><br><span class="line">  &#125;, tq);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">_.go(products,</span><br><span class="line">  total_quantity,</span><br><span class="line">  <span class="built_in">console</span>.log);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 선택 된 총 수량</span></span><br><span class="line"></span><br><span class="line">_.go(products,</span><br><span class="line">  _.filter(_get(<span class="string">'is_selected'</span>)),</span><br><span class="line">  total_quantity,</span><br><span class="line">  <span class="built_in">console</span>.log);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 모든 가격</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> total_price = _.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">tp, product</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _.reduce(product.sizes, <span class="function"><span class="keyword">function</span>(<span class="params">tp, size</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tp + (product.price + size.price) * size.quantity;</span><br><span class="line">  &#125;, tp);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">_.go(products,</span><br><span class="line">  total_price,</span><br><span class="line">  <span class="built_in">console</span>.log);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 선택 된 총 가격</span></span><br><span class="line"></span><br><span class="line">_.go(products,</span><br><span class="line">  _.filter(_get(<span class="string">'is_selected'</span>)),</span><br><span class="line">  total_price,</span><br><span class="line">  <span class="built_in">console</span>.log);</span><br></pre></td></tr></table></figure><hr><h2 id="비동기"><a href="#비동기" class="headerlink" title="비동기"></a>비동기</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      resolve(a * a);</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> <span class="title">recur</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (list.length == res.length) <span class="keyword">return</span> resolve(res);</span><br><span class="line">    square(list[res.length]).then(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">      res.push(val);</span><br><span class="line">      recur(res);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)([]);</span><br><span class="line">&#125;).then(<span class="built_in">console</span>.log);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 위와 동일한 결과이며, 중첩 로직을 수행해야 할 때 훨씬 쉽게 만들 수 있음</span></span><br><span class="line">_.go(list,</span><br><span class="line">  _.map(square),</span><br><span class="line"><span class="comment">//  _.map(square),</span></span><br><span class="line"><span class="comment">//  _.map(square),</span></span><br><span class="line">  <span class="built_in">console</span>.log</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">w</span>) </span>&#123;</span><br><span class="line">  w._identity = w._idtt = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123; <span class="keyword">return</span> v &#125;;</span><br><span class="line">  w._noop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  w._keys = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> obj ? <span class="built_in">Object</span>.keys(obj) : [] &#125;;</span><br><span class="line">  w._mr = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">arguments</span>._mr = <span class="literal">true</span>, <span class="built_in">arguments</span> &#125;;</span><br><span class="line"></span><br><span class="line">  w._pipe = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fs = <span class="built_in">arguments</span>, len = fs.length;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> i = <span class="number">-1</span>;</span><br><span class="line">      <span class="keyword">while</span> (++i &lt; len) res = res &amp;&amp; res._mr ? fs[i].apply(<span class="literal">null</span>, res) : fs[i](res);</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  w._go = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>, fs = <span class="built_in">arguments</span>, len = fs.length, res = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">while</span> (++i &lt; len) res = res &amp;&amp; res._mr ? fs[i].apply(<span class="literal">null</span>, res) : fs[i](res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  w._each = <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">arr, iter</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!iter) <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">arr2</span>) </span>&#123; <span class="keyword">return</span> f(arr2, arr) &#125;;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">-1</span>, len = arr &amp;&amp; arr.length;</span><br><span class="line">    <span class="keyword">while</span> (++i &lt; len) iter(arr[i]);</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  w._oeach = <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">obj, iter</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!iter) <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">obj2</span>) </span>&#123; <span class="keyword">return</span> f(obj2, obj) &#125;;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">-1</span>, keys = _keys(obj), len = keys.length;</span><br><span class="line">    <span class="keyword">while</span> (++i &lt; len) iter(obj[keys[i]]);</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  w._map = <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">arr, iter</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!iter) <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">arr2</span>) </span>&#123; <span class="keyword">return</span> f(arr2, arr) &#125;;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">-1</span>, len = arr &amp;&amp; arr.length, res = [];</span><br><span class="line">    <span class="keyword">while</span> (++i &lt; len) res[i] = iter(arr[i]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  w._omap = <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">obj, iter</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!iter) <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">obj2</span>) </span>&#123; <span class="keyword">return</span> f(obj2, obj) &#125;;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">-1</span>, keys = _keys(obj), len = keys.length, res = [];</span><br><span class="line">    <span class="keyword">while</span> (++i &lt; len) res[i] = iter(obj[keys[i]]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  w._flatmap = w._mapcat = <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">arr, iter</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!iter) <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">arr2</span>) </span>&#123; <span class="keyword">return</span> f(arr2, arr) &#125;;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">-1</span>, len = arr &amp;&amp; arr.length, res = [], evd;</span><br><span class="line">    <span class="keyword">while</span> (++i &lt; len) <span class="built_in">Array</span>.isArray(evd = iter(arr[i])) ? res.push.apply(res, evd) : res.push(evd);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  w._oflatmap = w._omapcat = <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">obj, iter</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!iter) <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">obj2</span>) </span>&#123; <span class="keyword">return</span> f(obj2, obj) &#125;;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">-1</span>, keys = _keys(obj), len = keys.length, res = [], evd;</span><br><span class="line">    <span class="keyword">while</span> (++i &lt; len) <span class="built_in">Array</span>.isArray(evd = iter(obj[keys[i]])) ? res.push.apply(res, evd) : res.push(evd);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  w._filter = <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">arr, iter</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!iter) <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">arr2</span>) </span>&#123; <span class="keyword">return</span> f(arr2, arr) &#125;;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">-1</span>, len = arr &amp;&amp; arr.length, res = [];</span><br><span class="line">    <span class="keyword">while</span> (++i &lt; len) <span class="keyword">if</span> (iter(arr[i])) res[i].push(arr[i]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  w._ofilter = <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">obj, iter</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!iter) <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">obj2</span>) </span>&#123; <span class="keyword">return</span> f(obj2, obj) &#125;;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">-1</span>, keys = _keys(obj), len = keys.length, res = [];</span><br><span class="line">    <span class="keyword">while</span> (++i &lt; len) <span class="keyword">if</span> (iter(obj[keys[i]])) res[i].push(obj[keys[i]]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  w._reject = <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">arr, iter</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!iter) <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">arr2</span>) </span>&#123; <span class="keyword">return</span> f(arr2, arr) &#125;;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">-1</span>, len = arr &amp;&amp; arr.length, res = [];</span><br><span class="line">    <span class="keyword">while</span> (++i &lt; len) <span class="keyword">if</span> (!iter(arr[i])) res[i].push(arr[i]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  w._oreject = <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">obj, iter</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!iter) <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">obj2</span>) </span>&#123; <span class="keyword">return</span> f(obj2, obj) &#125;;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">-1</span>, keys = _keys(obj), len = keys.length, res = [];</span><br><span class="line">    <span class="keyword">while</span> (++i &lt; len) <span class="keyword">if</span> (!iter(obj[keys[i]])) res[i].push(obj[keys[i]]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  w._reduce = <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">arr, iter, init</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> arr == <span class="string">"function"</span>) <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">arr2</span>)</span>&#123; <span class="keyword">return</span> f(arr2, arr, iter) &#125;;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">-1</span>, len = arr &amp;&amp; arr.length, res = init || arr[++i];</span><br><span class="line">    <span class="keyword">while</span> (++i &lt; len) res = iter(res, arr[i]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  w._oreduce = <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">obj, iter, init</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj == <span class="string">"function"</span>) <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">obj2</span>)</span>&#123; <span class="keyword">return</span> f(obj2, obj, iter) &#125;;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">-1</span>, keys = _keys(obj), len = keys.length, res = init || obj[keys[++i]];</span><br><span class="line">    <span class="keyword">while</span> (++i &lt; len) res = iter(res, obj[keys[i]]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  w._find = <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">arr, iter</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!iter) <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">arr2</span>) </span>&#123; <span class="keyword">return</span> f(arr2, arr) &#125;;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">-1</span>, len = arr &amp;&amp; arr.length;</span><br><span class="line">    <span class="keyword">while</span> (++i &lt; len) <span class="keyword">if</span> (iter(arr[i])) <span class="keyword">return</span> arr[i];</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  w._ofind = <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">obj, iter</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!iter) <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">obj2</span>) </span>&#123; <span class="keyword">return</span> f(obj2, obj) &#125;;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">-1</span>, keys = _keys(obj), len = keys.length;</span><br><span class="line">    <span class="keyword">while</span> (++i &lt; len) <span class="keyword">if</span> (iter(obj[keys[i]])) <span class="keyword">return</span> obj[keys[i]];</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  w._range = <span class="function"><span class="keyword">function</span>(<span class="params">start, stop, step</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (stop == <span class="literal">null</span>) &#123; stop = start || <span class="number">0</span>; start = <span class="number">0</span>; &#125;</span><br><span class="line">    step = step || <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> length = <span class="built_in">Math</span>.max(<span class="built_in">Math</span>.ceil((stop - start) / step), <span class="number">0</span>), range = <span class="built_in">Array</span>(length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> idx = <span class="number">0</span>; idx &lt; length; idx++, start += step) range[idx] = start;</span><br><span class="line">    <span class="keyword">return</span> range;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">&#125;)(<span class="keyword">typeof</span> global == <span class="string">'object'</span> ? global : <span class="built_in">window</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="특강"><a href="#특강" class="headerlink" title="특강"></a>특강</h2><ul><li>부수효과가 나쁜 것이 아니라, 결론에 해당함 (Just Side Effect, Not 부작용)<ul><li>다만 디테일하게 쫒아가면서 다루지 않으면, 에러를 유발하기가 매우 쉬움</li><li>부원인, 부작용</li><li>부수효과를 일으키는 대상을 리턴하도록 짜면 조합성을 높이는데 큰 도움이 됨</li></ul></li><li>참조 투명성</li><li>일급함수와 클로저가 함수형 프로그래밍을 지탱하는 두 축<ul><li>일급함수<ul><li>함수를 변수, 인자, 리턴, 평가(=실행)</li></ul></li><li>클로저<ul><li>값과 변수, 함수를 통칭해서 클로저라고 함</li><li>호출하여 할당함으로서 클로저가 됨</li><li>메모리에서 자유변수를 유지시켜야만 클로저</li><li>함수를 하나의 스택으로 보고, 자유변수에 대한 참조를 유지시키느냐 여부가 중요</li><li>클로저를 만들어두고 계속해서 사용하는 패턴이 함수형 프로그래밍에서 흔함</li></ul></li></ul></li></ul><p>순수함수</p><p>부수효과</p><p>필수 부수효과</p><p>새로운 값을 리턴하는 순수함수</p><p>고차함수(함수를 값으로 다루는 함수)</p><ul><li><p>함수를 리턴해주는 함수</p></li><li><p>함수를 인자로 받아서 안에서 실행하는 함수 (응용형 프로그래밍)</p><ul><li>function repeat(count, fn) { var i = 0; while (count–) fn(i++); }</li><li>var i = -1; while (++i &lt; count) fn(i);</li></ul></li></ul><p>어떻게 동작하느냐(명령형 프로그래밍)가 아니라 이렇게 되도록 하는 것을 선언형 프로그래밍(함수형 프로그래밍 포함)</p><p>부수효과를 어떻게 다루느냐가 함수형 프로그래밍의 성향 (언어에 따라 부수효과를 모나드로 관리하기도 함)</p><p>브라우저 또는 DB를 조작해야 하므로 자바스크립트에서는 부수효과가 없는 프로그래밍은 불가능할 것 (로직 과정에선 없을 수 있음)</p><p>5종류 함수를 적절히 조합, 문보다는 함수(표현식)를 위주로 프로그래밍, 변수 사용을 줄이고 값을 변경하지 않는다, 꼭 필요한 부수 효과 함수를 제외하고는 부수 효과를 로직에 이용하지 않는다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>함수형 프로그래밍</p><ul><li>결과를 리턴해주는 식으로 외부와 소통한다</li><li>기존 값을 수정하지 않고, 새로운 값을 만들어서 리턴한다</li><li>조건을 함수로 추상화하여 인자로 받는다<ul><li>predicate(products[i]) : 로직을 완전히 위임</li><li>while (++i &lt; l) predicate(list[i]) &amp;&amp; new_list.push(list[i]))</li></ul></li><li>추상화의 단위가 함수<ul><li>객체지향은 객체 또는 메소드 단위</li></ul></li><li>표현식만으로 코딩하는 습관</li><li>데이터가 먼저인 프로그래밍은 다형성이 낮을 수 밖에 없음, 특정 데이터에 종속됨<ul><li>함수형은 함수를 먼저 만들고 함수에 맞는 형태의 데이터를 전달</li><li>외부의 값에 대한 다형성을 높이고, 내부 값에 대한 다형성은 보조 함수로 커버</li></ul></li></ul><p>함수 이름은 자세히 써주고, 변수는 한 글자 수준으로 축약하곤 함, k key l length v value f func</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add_all</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>, l = list.length, memo = list[i++];</span><br><span class="line">  <span class="keyword">while</span> (i &lt; l) memo = add(memo, list[i++]);</span><br><span class="line">  <span class="keyword">return</span> memo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>reduce란 순회하면서 보조함수로 축약하는 것</p><ul><li>reduce([1,2,3,4], add)</li><li>function add_all(list) { return reduce(list, add); }</li></ul><p>고차함수를 만들고 적용가능한 보조함수를 전달하여 새로운 값을 만들어가는 것</p><p>상수인 변수와 함수를 가지고 새로운 상수를 만들어냄</p><p>reduce도 클로저 위에 쌓여있음</p><p>순수함수이기에 내가 원하는 기능을 한다면 얼마든지 가져다써도 괜찮고, 필요한 경우에만 만들어가면서 쓰면 될 것</p><p>자바스크립트는 Array-Like에 지원하는 함수가 많다는 것이 조금 부족한 점 (엘릭서 등은 모든 데이터셋에 지원)</p><p>함수형 프로그래밍에서 사용하는 기본 함수들은 직접 만들어보는 것이 피가 되고 살이 됨</p><p>가능한 데이터가 함수 내에서 보이지 않을 정도로 추상화해볼 것</p><p>숫자들에서 숫자로 축약하는 것은 reduce로 충분하지만, 그것이 아니면 시작하는 외부 값을 지정해줄 수 있어야 함 (더 다형성이 높은 함수가 되기 위해서)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reduce</span>(<span class="params">list, fn, memo</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>, l = list.length, memo = memo === <span class="literal">undefined</span> ? list[i++] : memo;</span><br><span class="line">  <span class="comment">// while (i &lt; l) &#123; memo = fn(memo) &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>은닉은 도구이고 취향이지, 목적이 아니다</p><p>실용적인 클로져들을 만드는 것이 함수형 프로그래밍</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pipe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> fns = <span class="built_in">arguments</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> reduce(fns, <span class="function"><span class="keyword">function</span>(<span class="params">arg, f</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> f(arg);</span><br><span class="line">    &#125;, arg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">go</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> reduce(<span class="built_in">arguments</span>, )</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">calr</span>(<span class="params">arg, f</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> f(arg);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>표현식만으로 코딩하면 라인이 없어서 어려운데, go를 통해 라인을 만들 수 있음</p><p>커링 : 함수의 인자를 부분적으로 적용</p><p>함수가 함수를 만들고, 함수가 다른 함수에 적용되는 함수 등을 만들어가는 함수형 프로그래밍</p><p>for, while은 코드의 모양이 익숙한 것이지, 코드의 로직이 익숙한 것이 아님</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> filter = curryr(<span class="function">(<span class="params">list, predicate</span>) =&gt;</span> reduce(list, (new_list, val) =&gt; predicate(val) ? append(new_list, val) : new_list ))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params">list, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> list.push(val), list; <span class="comment">// 좌측이 실행된 뒤에 우측이 리턴됨</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>함수 + 파이프라인적 사고로 진행하는 것이 중요합니다</p><p>go가 reduce로 만들어진 함수</p><p>chaining은 monad의 일종이에요, chaing은 메소드를 바꿔가면서, curry는 하나의 함수로 도달하기 위해서 인자를 하나씩 전달해주다가 인자가 전부 차면 그때 실행하는 것 (실행을 미루기 위해 쓰임)</p><p>프론트엔드에서의 비동기 : 성능과 사용성, 브라우저 렌더링이 비동기와 대단히 연관되어있음 (네이티브처럼 만들 수 있음)</p><p>백엔드에서의 비동기 : 과거의 쓰레드를 사용했었는데 500개 이상은 어려웠는데 Node.js는 2만 개까지 처리 가능함, 쓰레드는 하나만 쓰고, 비동기적으로 함수를 동시다발적으로 실행하면 됨, 과거에 비해 스케일이 커지고 다이나믹해지다보니 비동기에 대한 니즈가 급증함</p><p>비동기 상황 잘 다루기</p><ul><li>리턴 값으로 소통하기</li><li>원하는 순서대로 함수 실행을 나열하는 법 연습</li><li>표현식 만으로 코딩하는 연습 =&gt; 꼬리 함수 호출 최적화</li><li>재귀 함수 연습</li></ul><p>기본기</p><ul><li>비동기와 무관하게 내가 원하는 로직을 일렬로 나열할 수 있도록 하는 것이 제어의 첫 걸음</li><li>비동기라는 것은 함수 단위로 일어납니다, 단 결국은 재귀로 돌아가는 것 (+ 추상화를 얼마나 더 하느냐)</li></ul><p>연속적으로 내가 원하는 함수를 나열하고, 원할 때 호출</p><p>reduce를 재귀 + 유명 함수를 이용하여 Promise 제어</p><p>표현식만 남긴다, 즉시 실행함수로 담으면 문이어도 함수로 만들 수 있음</p><p>프라미스 : 비동기의 결과가 값으로 다뤄질 수 있도록 함</p><p>go, pipe, map, filter</p><p>map, map (동시성)</p><p>console.time, console.timeEnd</p><p>비동기를 동기처럼 만든다 의 한 수 위가 둘을 적절히 다룬다</p><p>FP는 램은 많이 쓰되, CPU는 적게 쓰는 편</p><p>OOP와 FP는 대척점에 있지 않다, 랩을 잘 하는게 멋있는 것, 모두 현대 프로그래밍에서 필요함, DOM 조작은 모두 객체를 다뤄야 함, 프로그래밍 언어 자체보다 더 중요한 것은 멀티플 패러다임을 잘 이해하는 개발자가 되는 것, 그러면 적절한 도구를 필요할 때 쓸 수 있게 됨, 객체 지향이 없었다면 Promise가 있을 수 없었음, FP가 비동기를 지탱하는 기술임에도 함수 기법 자체는 가볍게 훑어지는 경향이 있는데 그것을 잘 다루면 더 나은 프로그래밍을 할 수 있음</p><p>네이밍 컨벤션에 카멜 케이스를 쓰지 않는 것도 함수형과 유관? =&gt; DB의 명칭과 통일</p><p>arguments는 this와 달리, 부원인이 아니라 매개변수와 동등하게 보시는지? =&gt; 외부에 변화를 주지 않는다면 부원인이 아니다</p><p>ES6는 학습자를 배려해서 의도적으로 배제? (rest parameter, Promise.all) =&gt; 그것이기도 하지만, Promise는 모든 로직을 비동기로 처리하기에 적절한 조합을 할 수 없음</p><p>_each의 가치를 언어에서 기본적으로 지원해주는 map, call, apply, Array.from에 대항하여 어떻게 내세울 수 있을지 (_go : method chaining) =&gt; forEach는 return 이 undefined라는 큰 차이가 존재하며, 리습 계열의 컨벤션은 언어에 부족한 점이 있다면 개발자가 보완하는 방향</p><p>언어에서 기본적으로 제공해주는 것에 비해, 로직 즉 탈언어적 요소 위주의 방향으로 코딩하는 것이 우선적인 지향점으로 더 좋을지 =&gt; 그게 실력향상에도 좋음</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;자바스크립트로-알아보는-함수형-프로그래밍&quot;&gt;&lt;a href=&quot;#자바스크립트로-알아보는-함수형-프로그래밍&quot; class=&quot;headerlink&quot; title=&quot;자바스크립트로 알아보는 함수형 프로그래밍&quot;&gt;&lt;/a&gt;자바스크립트로 알아보는 함수형 프로그
      
    
    </summary>
    
    
      <category term="FP" scheme="https://eclatant.io/tags/FP/"/>
    
  </entry>
  
  <entry>
    <title>실용적인 아티클 1</title>
    <link href="https://eclatant.io/2018/06/24/Awesome-Article1/"/>
    <id>https://eclatant.io/2018/06/24/Awesome-Article1/</id>
    <published>2018-06-23T15:00:00.000Z</published>
    <updated>2018-06-24T16:15:27.463Z</updated>
    
    <content type="html"><![CDATA[<p>평소에 읽은 아티클들을 주변 사람들에게 자주 공유하곤 하는데, 아래처럼 요약이나 추천 사유를 함께 정리하여 나누면 좋겠다는 생각을 했었다.</p><p><a href="https://blog.outsider.ne.kr/1383" target="_blank" rel="noopener">기술 뉴스 #104 : 18-06-16</a></p><p><a href="https://blog.cometkim.kr/posts/stars-last-week/2018-03-31/" target="_blank" rel="noopener">주간 GitHub Stars (~ 2018/03/31)</a></p><p><a href="https://medium.com/steady-study/2018년-5월-읽고-공부한-것들-549e802dc3c7" target="_blank" rel="noopener">2018년 5월, 읽고 공부한 것들</a></p><p>오늘은 첫 번째로 그간 프론트엔드 프로젝트형 스터디에서 공유되었었던 아티클들을 정리해보도록 하겠다.</p><h3 id="4-3번째-직장에-오기까지-4-두번째직장-1"><a href="#4-3번째-직장에-오기까지-4-두번째직장-1" class="headerlink" title="4) 3번째 직장에 오기까지 - 4. 두번째직장 #1"></a><a href="http://jojoldu.tistory.com/284" target="_blank" rel="noopener">4) 3번째 직장에 오기까지 - 4. 두번째직장 #1</a></h3><p>지금은 우아한 형제들에 계신 이동욱님의 이직기를 자세히 다룬 시리즈이다.</p><p>프로그래밍 공부는 어느 정도 했지만, 아직 취업에 이르지 못했던 때에 대체 어느 정도 실력이 있어야 취업을 할 수 있는 것인지, 어떤 방향으로 노력을 해야 하는 것인지 등 너무 궁금한 것이 많은데 주변에 물어볼 수 있는 사람도 없는 시기도 있었다. ( 마치 <a href="https://www.facebook.com/hee072794/posts/605474039817221" target="_blank" rel="noopener">Link</a> 에 나오는 질문들처럼 ) 그럴 때 참고하기 정말 좋은 글이었다.</p><p>취준생 입장에선 정말 대단해보이는 개발자도 저렇게나 많은 고생을 했었고, 그 과정에서 어떤 노력들을 했었다는 것들을 자세히 알 수 있어서 취준생이나 장차 이직을 준비하실 분들에게 꼭 추천하고 싶은 시리즈이다.</p><p>위 에피소드를 포함한 전체 시리즈 목록은 다음과 같다.</p><ul><li><a href="http://jojoldu.tistory.com/277" target="_blank" rel="noopener">1) 3번째 직장에 오기까지 - 1. 국비교육기간</a></li><li><a href="http://jojoldu.tistory.com/278" target="_blank" rel="noopener">2) 3번째 직장에 오기까지 - 2. 취업준비기간</a></li><li><a href="http://jojoldu.tistory.com/279" target="_blank" rel="noopener">3) 3번째 직장에 오기까지 - 3. 첫 직장, 첫번째 이직</a></li><li><a href="http://jojoldu.tistory.com/284" target="_blank" rel="noopener">4) 3번째 직장에 오기까지 - 4. 두번째직장 #1</a></li><li><a href="http://jojoldu.tistory.com/302" target="_blank" rel="noopener">5) 3번째 직장에 오기까지 - 5. 두번째 직장 #2</a></li></ul><h3 id="Bool-변수-이름-제대로-짓기-위한-최소한의-영어-문법"><a href="#Bool-변수-이름-제대로-짓기-위한-최소한의-영어-문법" class="headerlink" title="Bool 변수 이름 제대로 짓기 위한 최소한의 영어 문법"></a><a href="https://soojin.ro/blog/naming-boolean-variables" target="_blank" rel="noopener">Bool 변수 이름 제대로 짓기 위한 최소한의 영어 문법</a></h3><p>필자는 영어를 정말 못한다, 그래서 영어를 잘 하는 분들께는 필요가 없을 수 있는 위와 같은 글들도 대단히 많은 도움이 된다.</p><p>비슷한 종류로는 아래와 같은 글이 있다.</p><p><a href="https://engineering.huiseoul.com/영문-개발문서-볼-때-도움되는-용어들-9305daed1fb1" target="_blank" rel="noopener">영문 개발문서 볼 때 도움되는 용어들</a></p><p>부디 위와 같은 글들이 더 많아졌으면 좋겠고, 영어를 지금보다 잘 하게 되면 꼭 작성해보아야겠다.</p><h3 id="좋은-코드를-작성하고-있다는-징후-11가지"><a href="#좋은-코드를-작성하고-있다는-징후-11가지" class="headerlink" title="좋은 코드를 작성하고 있다는 징후 11가지"></a><a href="http://www.itworld.co.kr/news/108939" target="_blank" rel="noopener">좋은 코드를 작성하고 있다는 징후 11가지</a></h3><p>이런 종류의 글들은 사실 실행에는 큰 도움이 안 되지만, 인지에는 도움이 된다고 생각한다. 그래도 다 좋은 얘기들이며 이 중에 가장 와닿는 한 가지만이라도 흡수하면 그 자체로 가치는 충분하다고 생각한다. ( 어떤 책이나 글을 읽을 때 개인적으로 취하는 자세는 다음과 비슷하다, <a href="http://1boon.kakao.com/bookclub/whatreadingnow4" target="_blank" rel="noopener">Link</a> )</p><h3 id="브라우저는-웹페이지를-어떻게-그리나요-Critical-Rendering-Path"><a href="#브라우저는-웹페이지를-어떻게-그리나요-Critical-Rendering-Path" class="headerlink" title="브라우저는 웹페이지를 어떻게 그리나요? - Critical Rendering Path"></a><a href="https://post.naver.com/viewer/postView.nhn?volumeNo=8431285&amp;memberNo=34176766" target="_blank" rel="noopener">브라우저는 웹페이지를 어떻게 그리나요? - Critical Rendering Path</a></h3><p>웹개발자에겐 브라우저가 곧 OS나 다름없을 것이다. 그런 면에서 한글로 쓰였고, 상대적으로 이해하기 쉬운 너무나 귀한 글이다!</p><h3 id="BeckDesignRules"><a href="#BeckDesignRules" class="headerlink" title="BeckDesignRules"></a><a href="https://martinfowler.com/bliki/BeckDesignRules.html" target="_blank" rel="noopener">BeckDesignRules</a></h3><p><a href="https://www.facebook.com/gyuwon.yi/posts/1731573160219233" target="_blank" rel="noopener">Link</a> 를 통해 접했던 글이다.</p><p>TDD, Design 등에 관심이 있다면 꼭 팔로우하시길 추천드리고 싶은 페이스북 계정이다.</p><p>나 또한 여전히 포스팅에서 말하는 초보에서 아직도 벗어나지 못했고, 테스트 코드도 없이 어설프게 중복코드를 제거하고는 문제 생기면 부랴부랴 다시 가서 고치는 신세다. 😢</p><p>납기에 쫓기거나 귀찮거나 번거롭더라도 꼭 테스트 코드를 먼저 작성해보는 습관을 들여야겠다는 다짐을 다시 한 번!</p><h3 id="Technical-Interview-Guidelines-for-beginners"><a href="#Technical-Interview-Guidelines-for-beginners" class="headerlink" title="Technical Interview Guidelines for beginners"></a><a href="https://github.com/JaeYeopHan/Interview_Question_for_Beginner" target="_blank" rel="noopener">Technical Interview Guidelines for beginners</a></h3><p>면접 준비할 때, 내가 무엇을 모르는지 알고자 확인할 때 유용하다고 생각된다.</p><p>관련하여 아래와 같은 여러 레퍼런스들이 존재한다.</p><ul><li><p><a href="https://github.com/yangshun/front-end-interview-handbook/blob/master/Translations/Korean/README.md" target="_blank" rel="noopener">프론트엔드 인터뷰 핸드북</a></p></li><li><p><a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Korean" target="_blank" rel="noopener">프론트엔드 면접 문제 은행</a></p></li><li><p><a href="https://github.com/MaximAbramchuck/awesome-interview-questions" target="_blank" rel="noopener">Awesome Interviews</a></p></li><li><p><a href="https://github.com/kesuskim/Front-End-Checklist/blob/master/README.md" target="_blank" rel="noopener">프론트엔드 체크리스트</a></p></li></ul><h3 id="신입-프론트엔드-개발자가-되려면-무엇을-학습해야-하나요"><a href="#신입-프론트엔드-개발자가-되려면-무엇을-학습해야-하나요" class="headerlink" title="신입 프론트엔드 개발자가 되려면 무엇을 학습해야 하나요?"></a><a href="https://medium.com/@Jbee_/신입-프론트엔드-개발자가-되려면-무엇을-학습해야-하나요-1dd59a14e084" target="_blank" rel="noopener">신입 프론트엔드 개발자가 되려면 무엇을 학습해야 하나요?</a></h3><p>사실 어떤 분야의 개발자가 되고 싶다고 생각을 했거나, 또는 정하지 못 하고 있을 때 정확히 해당 분야의 개발자가 되기 위해 무엇 무엇을 공부해야 하는지, 한다면 어떤 순서로 공부해야 하는지 잘 알기 어려운 때가 많다. 그럴 때 참고하기 참 좋은 글이다.</p><p>위 글 외에도 아래와 같은 레퍼런스도 있다.</p><ul><li><a href="https://github.com/kamranahmedse/developer-roadmap" target="_blank" rel="noopener">Web Developer Roadmap</a></li></ul><p>또한 실제적으로 따라할 수 있도록 직접적인 가이드가 제시된 너무나 좋은 레퍼런스도 있다!</p><ul><li><a href="https://github.com/Knowre-Dev/WebDevCurriculum" target="_blank" rel="noopener">Knowre web development curriculum 2018</a></li></ul><h3 id="좋은-git-커밋-메시지를-작성하기-위한-7가지-약속"><a href="#좋은-git-커밋-메시지를-작성하기-위한-7가지-약속" class="headerlink" title="좋은 git 커밋 메시지를 작성하기 위한 7가지 약속"></a><a href="http://meetup.toast.com/posts/106" target="_blank" rel="noopener">좋은 git 커밋 메시지를 작성하기 위한 7가지 약속</a></h3><p>하루에도 여러 차례 변수명과 더불어 명명이 얼마나 어려운 것인가를 느끼게 해주는 과정이 커밋이다.</p><p>누군가에게 커밋 메시지를 어떻게 잘 쓸 수 있냐고 질문하면 유명한 오픈소스를 분석해보라는 답변을 받을 때가 있는데, 그 옥석을 가리는 것이 저를 포함하여 누구에게나 가능하다고 생각하지는 않고, 잘 정리된 글을 보고 참고하고 싶은 분들에게 추천하고 싶은 글들이다.</p><ul><li><p><a href="https://tech.ssut.me/2015/06/24/write-a-good-git-commit-message/" target="_blank" rel="noopener">좋은 깃(Git) 커밋 메시지 작성하기</a></p></li><li><p><a href="https://conventionalcommits.org/" target="_blank" rel="noopener">Conventional Commits 1.0.0-beta.2</a></p></li></ul><h3 id="프로젝트를-마치며-회고한-경험"><a href="#프로젝트를-마치며-회고한-경험" class="headerlink" title="프로젝트를 마치며 회고한 경험"></a><a href="https://medium.com/@Jbee_/프로젝트를-마치며-회고한-경험-14d37e066d1c" target="_blank" rel="noopener">프로젝트를 마치며 회고한 경험</a></h3><p>늘 회고의 중요성에 대해서 생각했지만, 어떻게? 에 대한 뚜렷한 답이 없었다. 그에 관해 다른 사람들의 경험을 들어보고 싶을 때가 많았는데 큰 도움이 되었던 정말 좋은 글이다.</p><p>타임라인이나 KPT 등이 가능하려면 진행하는 날마다 간단한 회고를 통해 기록을 남겨두어야 할 것 같다.</p><hr><p><a href="https://medium.com/@ljs0705/카카오페이지-웹-react-포팅-후기-76402cc5e031" target="_blank" rel="noopener">https://medium.com/@ljs0705/카카오페이지-웹-react-포팅-후기-76402cc5e031</a></p><p><a href="http://d2.naver.com/helloworld/3259111" target="_blank" rel="noopener">http://d2.naver.com/helloworld/3259111</a></p><p><a href="https://krasimir.gitbooks.io/react-in-patterns/content/" target="_blank" rel="noopener">https://krasimir.gitbooks.io/react-in-patterns/content/</a></p><p><a href="https://medium.com/netscape/whats-new-in-react-16-1608390ffe39" target="_blank" rel="noopener">https://medium.com/netscape/whats-new-in-react-16-1608390ffe39</a></p><p><a href="https://brunch.co.kr/@nerf-this/111" target="_blank" rel="noopener">https://brunch.co.kr/@nerf-this/111</a></p><p><a href="https://www.youtube.com/watch?v=fHyTA-UIcqs" target="_blank" rel="noopener">https://www.youtube.com/watch?v=fHyTA-UIcqs</a></p><p><a href="http://meetup.toast.com/posts/54" target="_blank" rel="noopener">http://meetup.toast.com/posts/54</a></p><p><a href="http://meetup.toast.com/posts/53" target="_blank" rel="noopener">http://meetup.toast.com/posts/53</a></p><p><a href="https://www.slideshare.net/mobile/jayjin0427/feat-95042760" target="_blank" rel="noopener">https://www.slideshare.net/mobile/jayjin0427/feat-95042760</a></p><p><a href="https://milooy.wordpress.com/2018/02/07/moving-job/" target="_blank" rel="noopener">https://milooy.wordpress.com/2018/02/07/moving-job/</a></p><p><a href="https://slides.com/jeonghwan/fe-tdd" target="_blank" rel="noopener">https://slides.com/jeonghwan/fe-tdd</a></p><p><a href="https://www.haruair.com/blog/3116" target="_blank" rel="noopener">https://www.haruair.com/blog/3116</a></p><p><a href="https://lab.github.com/courses/introduction-to-github" target="_blank" rel="noopener">https://lab.github.com/courses/introduction-to-github</a></p><p><a href="https://github.com/code-squad/codesquad-docs/blob/master/codereview/README.md" target="_blank" rel="noopener">https://github.com/code-squad/codesquad-docs/blob/master/codereview/README.md</a></p><p><a href="http://www.inven.co.kr/webzine/news/?news=198238" target="_blank" rel="noopener">http://www.inven.co.kr/webzine/news/?news=198238</a></p><p><a href="https://www.facebook.com/drawthebook/videos/803788546477026/" target="_blank" rel="noopener">https://www.facebook.com/drawthebook/videos/803788546477026/</a></p><p><a href="https://www.prettyawesomelists.com/" target="_blank" rel="noopener">https://www.prettyawesomelists.com/</a></p><p><a href="https://www.holaxprogramming.com/2018/04/15/react-optimizing-virtual-dom-explained/" target="_blank" rel="noopener">https://www.holaxprogramming.com/2018/04/15/react-optimizing-virtual-dom-explained/</a></p><p><a href="https://www.slideshare.net/awskorea/tag/aws-summit-seoul-2018" target="_blank" rel="noopener">https://www.slideshare.net/awskorea/tag/aws-summit-seoul-2018</a></p><p><a href="https://github.com/Myeongjoon/coding-interview-university/blob/master/translations/README-ko.md" target="_blank" rel="noopener">https://github.com/Myeongjoon/coding-interview-university/blob/master/translations/README-ko.md</a></p><p><a href="http://blog.kivol.net/post/173442457743/좋은-기술-인터뷰-질문은-어떤-질문인가" target="_blank" rel="noopener">http://blog.kivol.net/post/173442457743/좋은-기술-인터뷰-질문은-어떤-질문인가</a></p><p><a href="https://blog.naver.com/skabin/221261551265" target="_blank" rel="noopener">https://blog.naver.com/skabin/221261551265</a></p><p><a href="https://okky.kr/article/461670" target="_blank" rel="noopener">https://okky.kr/article/461670</a></p><p><a href="http://channy.creation.net/blog/1186" target="_blank" rel="noopener">http://channy.creation.net/blog/1186</a></p><p><a href="https://rhostem.github.io/posts/2016-12-19-A-Study-Plan-To-Cure-JavaScript-Fatigue/" target="_blank" rel="noopener">https://rhostem.github.io/posts/2016-12-19-A-Study-Plan-To-Cure-JavaScript-Fatigue/</a></p><p><a href="http://www.jidum.com/jidums/view.do?jidumId=979" target="_blank" rel="noopener">http://www.jidum.com/jidums/view.do?jidumId=979</a></p><p><a href="https://engineering.huiseoul.com/자바스크립트는-어떻게-작동하는가-엔진-런타임-콜스택-개관-ea47917c8442" target="_blank" rel="noopener">https://engineering.huiseoul.com/자바스크립트는-어떻게-작동하는가-엔진-런타임-콜스택-개관-ea47917c8442</a></p><p><a href="https://blog.gaerae.com/2018/05/github-pages-custom-domains-https.html" target="_blank" rel="noopener">https://blog.gaerae.com/2018/05/github-pages-custom-domains-https.html</a></p><p><a href="http://ahnheejong.name/articles/becoming-better-programmer/" target="_blank" rel="noopener">http://ahnheejong.name/articles/becoming-better-programmer/</a></p><p><a href="http://www.edwith.org/boostcourse-web/lecture/23925" target="_blank" rel="noopener">http://www.edwith.org/boostcourse-web/lecture/23925</a></p><p><a href="https://www.bsidesoft.com/6195" target="_blank" rel="noopener">https://www.bsidesoft.com/6195</a></p><p><a href="https://brunch.co.kr/@younghakjang/1" target="_blank" rel="noopener">https://brunch.co.kr/@younghakjang/1</a></p><p><a href="http://osinside.net/osinside/osinside.htm" target="_blank" rel="noopener">http://osinside.net/osinside/osinside.htm</a></p><p><a href="https://medium.freecodecamp.org/how-to-increase-your-chances-of-landing-a-development-job-acb6759c66da" target="_blank" rel="noopener">https://medium.freecodecamp.org/how-to-increase-your-chances-of-landing-a-development-job-acb6759c66da</a></p><p><a href="https://brunch.co.kr/@zalhanilll/229" target="_blank" rel="noopener">https://brunch.co.kr/@zalhanilll/229</a></p><p><a href="https://medium.com/@jungil.han/사이드-프로젝트-10년의-기록-파트-1-63bc25f8dcfc" target="_blank" rel="noopener">https://medium.com/@jungil.han/사이드-프로젝트-10년의-기록-파트-1-63bc25f8dcfc</a></p><p><a href="https://medium.com/@jungil.han/괜찮은-개발자-되기-클린-코더를-읽고-c8bcf91c2c76" target="_blank" rel="noopener">https://medium.com/@jungil.han/괜찮은-개발자-되기-클린-코더를-읽고-c8bcf91c2c76</a></p><p><a href="http://ppss.kr/archives/107897" target="_blank" rel="noopener">http://ppss.kr/archives/107897</a></p><p><a href="https://brunch.co.kr/@springboot/35" target="_blank" rel="noopener">https://brunch.co.kr/@springboot/35</a></p><p><a href="https://medium.com/@kpak/훌륭한-소프트웨어-엔지니어란-답-카멜레온-개발자-b73502a63016" target="_blank" rel="noopener">https://medium.com/@kpak/훌륭한-소프트웨어-엔지니어란-답-카멜레온-개발자-b73502a63016</a></p><p><a href="https://www.vobour.com/개발자처럼-생각하는-방법-문제-해결의-교훈-how-to-think-l" target="_blank" rel="noopener">https://www.vobour.com/개발자처럼-생각하는-방법-문제-해결의-교훈-how-to-think-l</a></p><p><a href="https://brunch.co.kr/@supims/302" target="_blank" rel="noopener">https://brunch.co.kr/@supims/302</a></p><p><a href="http://blog.sonim1.com/224" target="_blank" rel="noopener">http://blog.sonim1.com/224</a></p><p><a href="https://github.com/AllThingsSmitty/css-protips/blob/master/translations/ko-KR/readme.md" target="_blank" rel="noopener">https://github.com/AllThingsSmitty/css-protips/blob/master/translations/ko-KR/readme.md</a></p><p><a href="http://wit.nts-corp.com/2017/09/25/4903" target="_blank" rel="noopener">http://wit.nts-corp.com/2017/09/25/4903</a></p><p><a href="https://medium.com/steady-study/번역-아주-거대한-자바스크립트-어플리케이션을-구축하기-3aa37fc45122" target="_blank" rel="noopener">https://medium.com/steady-study/번역-아주-거대한-자바스크립트-어플리케이션을-구축하기-3aa37fc45122</a></p><p><a href="https://youtu.be/rquI6w4gLIs" target="_blank" rel="noopener">https://youtu.be/rquI6w4gLIs</a></p><p><a href="https://github.com/karan/Projects" target="_blank" rel="noopener">https://github.com/karan/Projects</a></p><p><a href="https://okky.kr/article/470785" target="_blank" rel="noopener">https://okky.kr/article/470785</a></p><p><a href="http://ppss.kr/archives/116610" target="_blank" rel="noopener">http://ppss.kr/archives/116610</a></p><p><a href="https://brunch.co.kr/@heracul/7" target="_blank" rel="noopener">https://brunch.co.kr/@heracul/7</a></p><p><a href="http://platum.kr/archives/101349" target="_blank" rel="noopener">http://platum.kr/archives/101349</a></p><p><a href="https://github.com/purpleworks/coding_test/blob/master/Frontend/Test2/README.md" target="_blank" rel="noopener">https://github.com/purpleworks/coding_test/blob/master/Frontend/Test2/README.md</a></p><p><a href="https://drive.google.com/file/d/1rJtH-PjEO_9qv2_1UmjcXdpI-SUyPugU/view" target="_blank" rel="noopener">https://drive.google.com/file/d/1rJtH-PjEO_9qv2_1UmjcXdpI-SUyPugU/view</a></p><p><a href="https://www.slideshare.net/watchncompass/freedom-responsibility-culture" target="_blank" rel="noopener">https://www.slideshare.net/watchncompass/freedom-responsibility-culture</a></p><p><a href="https://www.slideshare.net/alleciel/work-rules-korean-ver" target="_blank" rel="noopener">https://www.slideshare.net/alleciel/work-rules-korean-ver</a></p><p><a href="https://okky.kr/article/476113" target="_blank" rel="noopener">https://okky.kr/article/476113</a></p><p><a href="https://d2.naver.com/helloworld/5644368" target="_blank" rel="noopener">https://d2.naver.com/helloworld/5644368</a></p><p><a href="https://medium.com/steady-study/디버그를-디버깅하기-단계적-디버깅-프로세스-템플릿-d3d4a9882adb" target="_blank" rel="noopener">https://medium.com/steady-study/디버그를-디버깅하기-단계적-디버깅-프로세스-템플릿-d3d4a9882adb</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;평소에 읽은 아티클들을 주변 사람들에게 자주 공유하곤 하는데, 아래처럼 요약이나 추천 사유를 함께 정리하여 나누면 좋겠다는 생각을 했었다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.outsider.ne.kr/1383&quot; target=&quot;_
      
    
    </summary>
    
      <category term="Article" scheme="https://eclatant.io/categories/Article/"/>
    
    
      <category term="Article" scheme="https://eclatant.io/tags/Article/"/>
    
  </entry>
  
  <entry>
    <title>루비 곡괭이 3장 클래스, 객체, 변수</title>
    <link href="https://eclatant.io/2018/05/27/Ruby-Pickaxe-chapter3/"/>
    <id>https://eclatant.io/2018/05/27/Ruby-Pickaxe-chapter3/</id>
    <published>2018-05-26T15:00:00.000Z</published>
    <updated>2018-06-02T01:11:48.775Z</updated>
    
    <content type="html"><![CDATA[<p>루비에서 다루는 모든 것은 객체이며, 클래스에서 직간접적으로 생성할 수 있다, 이번 장에서는 클래스를 만들고 다루는 법을 살펴본다</p><p>객체지향 시스템을 설계할 때 항상 제일 먼저 해야 하는 일은 다루고자 하는 대상들의 특징을 파악하는 것이다<br>일반적으로 다루고자 하는 대상들이 속하는 형식(type)은 클래스로 만들어진다, 그리고 각 대상은 이 클래스의 인스턴스가 된다</p><p>헌책방 관리를 위한 클래스를 만들어보자</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInStock</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(isbn, price)</span></span></span><br><span class="line">    @isbn = isbn</span><br><span class="line">    @price = Float(price)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">to_s</span></span></span><br><span class="line">    <span class="string">"ISBN: <span class="subst">#&#123;@isbn&#125;</span>, price: <span class="subst">#&#123;@price&#125;</span>"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">b1 = BookInStock.new(<span class="string">'isbn1'</span>, <span class="number">3</span>)</span><br><span class="line">p b1 <span class="comment"># #&lt;BookInStock:0x00007f93fa9acf78 <span class="doctag">@isbn</span>="isbn1", <span class="doctag">@price</span>=3.0&gt;</span></span><br><span class="line">puts b1 <span class="comment"># ISBN: isbn1, price: 3.0</span></span><br><span class="line"></span><br><span class="line">b2 = BookInStock.new(<span class="string">'isbn2'</span>, <span class="number">3.14</span>)</span><br><span class="line">p b2 <span class="comment"># #&lt;BookInStock:0x00007f93fa997c90 <span class="doctag">@isbn</span>="isbn2", <span class="doctag">@price</span>=3.14&gt;</span></span><br><span class="line">puts b2 <span class="comment"># ISBN: isbn2, price: 3.14</span></span><br><span class="line"></span><br><span class="line">b3 = BookInStock.new(<span class="string">'isbn3'</span>, <span class="string">'5.67'</span>)</span><br><span class="line">p b3 <span class="comment"># #&lt;BookInStock:0x00007f93fa986738 <span class="doctag">@isbn</span>="isbn3", <span class="doctag">@price</span>=5.67&gt;</span></span><br><span class="line">puts b3 <span class="comment"># ISBN: isbn3, price: 5.67</span></span><br></pre></td></tr></table></figure><p>initialize 메서드는 객체의 환경을 초기화해서 이를 사용 가능한 상태로 만들어두어야 한다, 그러면 다른 메서드들에서는 이 상태를 사용한다</p><p>매개변수는 지역변수와 동일한 스코프이므로 initialize 메서드가 끝나면 함께 사라져버린다, 따라서 필요한 정보를 인스턴스 변수에 저장해야 한다 (@를 붙이면 인스턴스 변수가 된다)</p><p>p는 객체의 상태를 보여주고 자기 자신을 리턴하는 것에 비해 puts는 단순히 프로그램의 표준 출력에 문자열을 출력하고 nil을 반환할 뿐이다, puts에 객체를 인자로 넘겨주면 가장 간단한 방법으로 처리한다, <code>#&lt;객체의 이름:16진수로 된 고유 번호&gt;</code> 하지만 만약 클래스에 to_s가 정의되어 있다면 해당 결과를 출력한다</p><p>인스턴스 변수는 각 인스턴스에 저장되며, 해당 클래스에 정의되는 모든 인스턴스 메소드에서 참조 가능하다</p><hr><h2 id="3-1-객체와-속성"><a href="#3-1-객체와-속성" class="headerlink" title="3.1 객체와 속성"></a>3.1 객체와 속성</h2><p>위의 코드대로라면 객체의 내부 상태는 각 객체 내부에 저장된 정보로 다른 객체에서는 접근할 수 없다, 일반적으로 객체의 일관성을 지키기 위한 책임이 하나의 객체에 전적으로 맡겨진다는 것은 좋은 의미이다</p><p>그러나 객체의 정보가 완전히 감춰진다면 아무 의미도 없으므로, 일반적으로 객체 외부에서 객체 상태에 접근하거나 조작하는 메서드를 별도로 정의해서 외부에서도 객체 상태에 접근 가능하도록 만들어 준다, 이렇게 노출되는 내부 부분을 객체의 속성, attribute라고 한다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInStock</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(isbn, price)</span></span></span><br><span class="line">    @isbn = isbn</span><br><span class="line">    @price = Float(price)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isbn</span></span></span><br><span class="line">    @isbn</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">price</span></span></span><br><span class="line">    @price</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">book = BookInStock.new(<span class="string">"isbn1"</span>, <span class="number">12.34</span>)</span><br><span class="line">puts <span class="string">"ISBN = <span class="subst">#&#123;book.isbn&#125;</span>"</span> <span class="comment"># ISBN = isbn1</span></span><br><span class="line">puts <span class="string">"Price = <span class="subst">#&#123;book.price&#125;</span>"</span> <span class="comment"># Price = 12.34</span></span><br></pre></td></tr></table></figure><p>위와 같은 접근자 메서드는 매우 자주 사용되므로 루비에서는 편의 메서드를 제공한다 (루비는 메서드 마지막에 평가된 표현식의 평가 결과를 반환한다, 여기서는 인스턴스 변수의 값을 반환할 것이다)</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInStock</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:isbn</span>, <span class="symbol">:price</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(isbn, price)</span></span></span><br><span class="line">    @isbn = isbn</span><br><span class="line">    @price = Float(price)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">book = BookInStock.new(<span class="string">"isbn1"</span>, <span class="number">12.34</span>)</span><br><span class="line">puts <span class="string">"ISBN = <span class="subst">#&#123;book.isbn&#125;</span>"</span> <span class="comment"># ISBN = isbn1</span></span><br><span class="line">puts <span class="string">"Price = <span class="subst">#&#123;book.price&#125;</span>"</span> <span class="comment"># Price = 12.34</span></span><br></pre></td></tr></table></figure><p>attr_reader는 접근자 메서드를 대신 생성해준다</p><p>:isbn 에서 심볼 표현을 볼 수 있는데, 심볼은 이름을 참조할 때 사용하기 좋다, :이 있다면 isbn이라는 이름을, :이 없다면 변수의 값 자체를 의미한다, :isbn에 대응하는 접근자 메서드에서 반환할 인스턴스 변수는 당연히 @isbn이다</p><p>루비에서 인스턴스 변수와 접근자 메서드는 분리되어 있다, attr_reader는 인스턴스 변수를 쉽게 선언할 수 있도록 만들어진 선언문이 아니다</p><h4 id="쓰기-가능한-속성"><a href="#쓰기-가능한-속성" class="headerlink" title="쓰기 가능한 속성"></a>쓰기 가능한 속성</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInStock</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:isbn</span>, <span class="symbol">:price</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(isbn, price)</span></span> @isbn = isbn</span><br><span class="line">    @price = Float(price)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">price=</span><span class="params">(new_price)</span></span></span><br><span class="line">    @price = new_price</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">book = BookInStock.new(<span class="string">"isbn1"</span>, <span class="number">33.80</span>)</span><br><span class="line">puts <span class="string">"ISBN = <span class="subst">#&#123;book.isbn&#125;</span>"</span> <span class="comment"># ISBN = isbn1</span></span><br><span class="line">puts <span class="string">"Price = <span class="subst">#&#123;book.price&#125;</span>"</span> <span class="comment"># Price = 33.8</span></span><br><span class="line">book.price = book.price * <span class="number">0</span>.<span class="number">75</span> <span class="comment"># 할인가격</span></span><br><span class="line">puts <span class="string">"New price = <span class="subst">#&#123;book.price&#125;</span>"</span> <span class="comment"># New price = 25.349999999999998</span></span><br></pre></td></tr></table></figure><p>setter 메서드는 위와 같은 형식으로 선언되어야 하는데, 값을 대입하는 메서드만 만들고 싶다면, attr_writer를 사용하면 된다, 하지만 이런 경우는 매우 드물기 때문에 인스턴스 변수의 값을 속성으로 읽는 것과 대입하는 것 모두를 한 번에 정의해주는 attr_accessor를 제공한다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInStock</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:isbn</span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:price</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(isbn, price)</span></span></span><br><span class="line">    @isbn = isbn</span><br><span class="line">    @price = Float(price)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">book = BookInStock.new(<span class="string">"isbn1"</span>, <span class="number">33.80</span>)</span><br><span class="line">puts <span class="string">"ISBN = <span class="subst">#&#123;book.isbn&#125;</span>"</span> <span class="comment"># ISBN = isbn1</span></span><br><span class="line">puts <span class="string">"Price = <span class="subst">#&#123;book.price&#125;</span>"</span> <span class="comment"># Price = 33.8</span></span><br><span class="line">book.price = book.price * <span class="number">0</span>.<span class="number">75</span></span><br><span class="line">puts <span class="string">"New price = <span class="subst">#&#123;book.price&#125;</span>"</span> <span class="comment"># New price = 25.349999999999998</span></span><br></pre></td></tr></table></figure><p>속성과 관련한 메서드가 단순히 인스턴스 변수를 읽거나 대입만 하는 간단한 메서드일 필요는 없다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInStock</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:isbn</span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:price</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(isbn, price)</span></span></span><br><span class="line">    @isbn = isbn</span><br><span class="line">    @price = Float(price)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">price_in_cents</span></span></span><br><span class="line">    Integer(price*<span class="number">100</span> + <span class="number">0</span>.<span class="number">5</span>) <span class="comment"># 0.5를 더한 뒤 정수로 변환하여 반올림된 실제 값에 가까운 정수를 얻기 위함</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">price_in_cents=</span><span class="params">(cents)</span></span></span><br><span class="line">    @price = cents / <span class="number">100.0</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">book = BookInStock.new(<span class="string">"isbn1"</span>, <span class="number">33.80</span>)</span><br><span class="line">puts <span class="string">"Price = <span class="subst">#&#123;book.price&#125;</span>"</span> <span class="comment"># Price = 33.8</span></span><br><span class="line">puts <span class="string">"Price in cents = <span class="subst">#&#123;book.price_in_cents&#125;</span>"</span> <span class="comment">#  Price in cents = 3380</span></span><br><span class="line">book.price_in_cents = <span class="number">1234</span></span><br><span class="line">puts <span class="string">"Price = <span class="subst">#&#123;book.price&#125;</span>"</span> <span class="comment"># Price = 12.34</span></span><br><span class="line">puts <span class="string">"Price in cents = <span class="subst">#&#123;book.price_in_cents&#125;</span>"</span> <span class="comment"># Price in cents = 1234</span></span><br></pre></td></tr></table></figure><p>price_in_cents는 객체 밖에서는 객체의 속성(attribute)로 보이지만, 내부적으로 저 속성에 대응하는 인스턴스 변수는 존재하지 않는다</p><p>인스턴스 변수와 계산된 값의 차이를 숨겨서, 클래스 구현에서 내부를 보호할 수 있는 방법을 제공할 수 있다, 이는 단일 접근 법칙과 관련이 있다</p><h4 id="속성-인스턴스-변수-메서드"><a href="#속성-인스턴스-변수-메서드" class="headerlink" title="속성, 인스턴스 변수, 메서드"></a>속성, 인스턴스 변수, 메서드</h4><p>속성과 메서드의 차이는 무엇인가?</p><p>속성은 단지 메서드일 뿐이다. 속성은 getter이기도, computed value를 반환하기도, 또는 setter의 역할을 하기도 한다, 어디까지가 속성이고 어디서부터가 일반 메서드인가? 속성을 일반 메서드와 구분 짓는 차이점은 무엇일까? 사실 적당히 취향대로 골라잡으면 되지만, 아래와 같이 생각해볼 수 있다</p><p>클래스를 설계할 때는 내부적으로 어떤 상태를 가지고, 이 상태를 외부(그 클래스의 사용자)에 어떤 모습으로 노출할지 결정해야 한다, 여기서 내부 상태는 인스턴스 변수에 저장한다, 외부에 보이는 상태는 속성(attribute)이라고 부르는 메서드를 통해야만 한다, 그 밖에 클래스가 할 수 있는 모든 행동은 일반 메서드를 통해야만 한다, 이런 구분법이 아주 중요한 것은 아니지만, 그래도 객체의 외부 상태를 속성이라고 부른다면 클래스를 사용하는 사람이 우리가 만든 클래스를 어떻게 봐야 하는지에 대한 힌트를 줄 수 있을 것이다</p><hr><h2 id="3-2-다른-클래스와-함께-사용하기"><a href="#3-2-다른-클래스와-함께-사용하기" class="headerlink" title="3.2 다른 클래스와 함께 사용하기"></a>3.2 다른 클래스와 함께 사용하기</h2><p>객체지향 설계에서는 외부의 대상을 파악하고 이를 코드를 통해 클래스로 만든다, 하지만 설계상에서 클래스의 대상이 되는 또 다른 대상이 있다, 이는 외부가 아닌 내부 코드 자체에 대응하는 클래스다</p><p>예를 들어 헌책방의 CSV 데이터를 읽어 들여 여러 가지 보고서를 만들어야 한다면, CSV 데이터를 읽어 들여 통계를 내고 요약해야 한다</p><p>어떻게 통계를 내고 요약할지에 따라서 설계 방향이 결정된다, 그리고 그 답은 CSV 리더에 있다 (각각의 CSV 데이터가 어떻게 생겼을지는 앞의 BookInStock에서 정의했다)</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># book_in_stock.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInStock</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:isbn</span>, <span class="symbol">:price</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(isbn, price)</span></span></span><br><span class="line">    @isbn = isbn</span><br><span class="line">    @price = Float(price)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># csv_reaedr.rb</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'csv'</span></span><br><span class="line">require_relative <span class="string">'book_in_stock'</span> <span class="comment"># require_relative을 사용하는 것은 로드하려는 파일의 위치가 로드하는 파일을 기준으로 상대 위치에 있기 때문이다. 여기서 두 파일은 모두 같은 위치에 있다</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CsvReader</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></span><br><span class="line">    @books_in_stock = []</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">read_in_csv_data</span><span class="params">(csv_file_name)</span></span></span><br><span class="line">    CSV.foreach(csv_file_name, <span class="symbol">headers:</span> <span class="literal">true</span>) <span class="keyword">do</span> <span class="params">|row|</span></span><br><span class="line">      @books_in_stock &lt;&lt; BookInStock.new(row[<span class="string">"ISBN"</span>], row[<span class="string">"Price"</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">total_value_in_stock</span></span></span><br><span class="line">    sum = <span class="number">0</span>.<span class="number">0</span></span><br><span class="line">    @books_in_stock.each &#123;<span class="params">|book|</span> sum += book.price&#125;</span><br><span class="line">    sum</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">number_of_each_isbn</span></span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stock_stats.rb</span></span><br><span class="line">require_relative <span class="string">'csv_reader'</span></span><br><span class="line"></span><br><span class="line">reader = CsvReader.new ARGV.each <span class="keyword">do</span> <span class="params">|csv_file_name|</span></span><br><span class="line">  STDERR.puts <span class="string">"Processing <span class="subst">#&#123;csv_file_name&#125;</span>"</span></span><br><span class="line">  reader.read_in_csv_data(csv_file_name)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">"Total value = <span class="subst">#&#123;reader.total_value_in_stock&#125;</span>"</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-3-접근-제어"><a href="#3-3-접근-제어" class="headerlink" title="3.3 접근 제어"></a>3.3 접근 제어</h2><p>클래스 인터페이스를 설계할 때, 클래스를 외부에 어느 정도까지 노출할지 결정하는 것은 중요한 일이다</p><p>클래스에 너무 깊이 접근하도록 허용하면 각 요소 간의 결합도가 높아질 우려가 있다, 다시 말해 이 클래스의 사용자 코드는 클래스 내부 구현의 세세한 부분에까지 종속적이 되기 쉽다는 것이다</p><p>루비에서 객체 상태를 변경하는 방법은 메서드를 호출하는 것일 뿐이므로 메서드에 대한 접근을 적절히 설정하면 객체에 대한 접근을 제어할 수 있다, 경험적으로 볼 때 객체의 상태를 망가뜨릴 수 있는 메서드는 노출해서는 안 된다</p><p>루비의 세 가지 보호 단계는 다음과 같다</p><ul><li>public : 접근 제어가 없음, 메서드는 기본적으로 public (단, initialize는 예외적으로 항상 private)</li><li>protected : 이 메서드는 그 객체를 정의한 클래스와 하위 클래스에서만 호출할 수 있다</li><li>private : 메서드는 수신자를 지정해서 호출할 수 없다, 오직 현재 객체에서만 호출 가능</li></ul><ul><li style="list-style: none"><input type="checkbox"> 루비는 접근 제어가 동적으로 결정된다, 따라서 접근 위반 예외는 제한된 메서드를 실제로 호출한 그 때에만 발생한다</li></ul><h3 id="접근-제어-기술하기"><a href="#접근-제어-기술하기" class="headerlink" title="접근 제어 기술하기"></a>접근 제어 기술하기</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:balance</span></span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(balance)</span></span></span><br><span class="line">    @balance = balance</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Transaction</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(account_a, account_b)</span></span></span><br><span class="line">    @account_a = account_a</span><br><span class="line">    @account_b = account_b</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">transfer</span><span class="params">(amount)</span></span></span><br><span class="line">    debit(@account_a, amount)</span><br><span class="line">    credit(@account_b, amount)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">  private</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">debit</span><span class="params">(account, amount)</span></span></span><br><span class="line">    account.balance -= amount</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">credit</span><span class="params">(account, amount)</span></span></span><br><span class="line">    account.balance += amount</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">savings = Account.new(<span class="number">100</span>)</span><br><span class="line">checking = Account.new(<span class="number">200</span>)</span><br><span class="line">trans = Transaction.new(checking, savings)</span><br><span class="line">trans.transfer(<span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>protected 접근은 객체가 같은 클래스에서 생성된 다른 객체의 상태에 접근할 필요가 있을 때 사용한다. 예를 들어 각각의 Account 객체의 결산 잔액을 비교 하고 싶은데, 잔액 자체는 (아마 다른 형식으로 보여주고자 하기 때문에) 외부에 보여주고 싶지는 않은 경우를 보자.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:cleared_balance</span> <span class="comment"># 접근자 메서드 'cleared_balance'를 만든다.</span></span><br><span class="line">  protected <span class="symbol">:cleared_balance</span> <span class="comment"># 접근자 메서드를 protected 메서드로 설정한다.</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">greater_balance_than?</span><span class="params">(other)</span></span></span><br><span class="line">    @cleared_balance &gt; other.cleared_balance</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-4-변수"><a href="#3-4-변수" class="headerlink" title="3.4 변수"></a>3.4 변수</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">person = <span class="string">"Tim"</span></span><br><span class="line">puts <span class="string">"The object in 'person' is a <span class="subst">#&#123;person.<span class="keyword">class</span>&#125;</span>"</span> <span class="comment"># The object in 'person' is a String</span></span><br><span class="line">puts <span class="string">"The object has an id of <span class="subst">#&#123;person.object_id&#125;</span>"</span> <span class="comment"># The object has an id of 70264079641280</span></span><br><span class="line">puts <span class="string">"and a value of '<span class="subst">#&#123;person&#125;</span>'"</span> <span class="comment"># and a value of 'Tim'</span></span><br></pre></td></tr></table></figure><p>변수는 객체가 아니라 객체에 대한 참조를 가지고 있을 뿐이다, 힙 메모리에 있는 객체를 변수가 가리키고 있다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">person1 = <span class="string">"Tim"</span></span><br><span class="line">person2 = person1</span><br><span class="line">person1[<span class="number">0</span>] = <span class="string">'J'</span></span><br><span class="line">puts <span class="string">"person1 is <span class="subst">#&#123;person1&#125;</span>"</span> <span class="comment"># person1 is Jim</span></span><br><span class="line">puts <span class="string">"person2 is <span class="subst">#&#123;person2&#125;</span>"</span> <span class="comment"># person2 is Jim</span></span><br></pre></td></tr></table></figure><p>person2에 person1을 대입해도 새로운 객체는 생성되지 않으며, 단지 person1 객체에 대한 참조를 person2에 복사해서 같은 객체를 참조하도록 만들 뿐이다</p><p>대입은 객체의 별명을 늘려서 결과적으로 여러 개의 변수가 하나의 객체를 참조하도록 한다</p><p>dup 메서드를 사용한다면 같은 내용을 담은 객체를 새로 생성한다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">person1 = <span class="string">"Tim"</span></span><br><span class="line">person2 = person1.dup person1[<span class="number">0</span>] = <span class="string">"J"</span></span><br><span class="line">puts <span class="string">"person1 is <span class="subst">#&#123;person1&#125;</span>"</span> <span class="comment"># person1 is Jim</span></span><br><span class="line">puts <span class="string">"person2 is <span class="subst">#&#123;person2&#125;</span>"</span> <span class="comment"># person2 is Tim</span></span><br></pre></td></tr></table></figure><p>객체를 동결해서 객체의 상태를 변경할 수 없도록 할 수도 있다, 동결된 객체를 수정하려고 하면 루비는 RuntimeError 예외를 발생시킨다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">person1 = <span class="string">"Tim"</span></span><br><span class="line">person2 = person1</span><br><span class="line">person1.freeze <span class="comment"># 객체 수정을 막는다.</span></span><br><span class="line">person2[<span class="number">0</span>] = <span class="string">"J"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 실행 결과:</span></span><br><span class="line"><span class="comment"># from prog.rb:4:in `&lt;main&gt;'</span></span><br><span class="line"><span class="comment"># prog.rb:4:in `[]=': can't modify frozen String (RuntimeError)</span></span><br></pre></td></tr></table></figure><p>클래스 메서드, 믹스인, 상속 등의 개념은 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;루비에서 다루는 모든 것은 객체이며, 클래스에서 직간접적으로 생성할 수 있다, 이번 장에서는 클래스를 만들고 다루는 법을 살펴본다&lt;/p&gt;
&lt;p&gt;객체지향 시스템을 설계할 때 항상 제일 먼저 해야 하는 일은 다루고자 하는 대상들의 특징을 파악하는 것
      
    
    </summary>
    
      <category term="Ruby" scheme="https://eclatant.io/categories/Ruby/"/>
    
    
      <category term="Ruby" scheme="https://eclatant.io/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>루비 곡괭이 2장 Ruby.new</title>
    <link href="https://eclatant.io/2018/05/13/Ruby-Pickaxe-chapter2/"/>
    <id>https://eclatant.io/2018/05/13/Ruby-Pickaxe-chapter2/</id>
    <published>2018-05-12T15:00:00.000Z</published>
    <updated>2018-05-27T14:56:10.045Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2-1-객체-지향-언어-루비"><a href="#2-1-객체-지향-언어-루비" class="headerlink" title="2.1 객체 지향 언어 루비"></a>2.1 객체 지향 언어 루비</h3><p>메서드 호출을 메시지라고 표현하고, 메시지에는 메서드 이름과 매개 변수들이 포함됨</p><p>절대값을 구해야 할 때, <code>-1234.abs</code> 와 같이 숫자 객체에 abs 메시지를 보내서 처리하도록 요청하면 된다</p><p>모든 루비 객체가 위와 같은 형식으로 동작하며, 언어 자체가 객체 지향적 구현이 잘 되어있다고 볼 수 있다</p><hr><h3 id="2-2-루비-기초"><a href="#2-2-루비-기초" class="headerlink" title="2.2 루비 기초"></a>2.2 루비 기초</h3><p>한 줄에 하나의 표현식만 쓴다면 ;가 필요없다</p><p>주석은 # 로 시작한다</p><p>들여쓰기가 파이썬과 같이 강제이진 않지만, 가독성을 위해 2칸 들여쓰기를 해준다</p><p>메서드 정의에는 def 키워드를 사용하며, {} 가 아닌 아래와 같은 형식으로 표현한다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 괄호가 없어도 되나, 함수 선언시 ()를 사용하는 것을 권장한다</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_goodnight</span><span class="params">(name)</span></span></span><br><span class="line">  result = <span class="string">'Good night, '</span> + name</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts(say_goodnight(<span class="string">'John-Boy'</span>))</span><br><span class="line">puts say_goodnight(<span class="string">'John-Boy'</span>)</span><br><span class="line">puts say_goodnight <span class="string">'John-Boy'</span></span><br></pre></td></tr></table></figure><p>루비는 동적 타이핑 언어이므로 변수 할당시 타입에 대한 명시없이 할당하면 바로 선언이 이루어진다</p><p>괄호없이 호출이 가능하다, 하지만 특정 매개변수를 어떤 메서드 호출에 보내야 할지 우선순위를 판단하기 어려울 수 있으므로, 간단한 경우를 제외하고는 괄호를 권장한다</p><p>루비에서는 ‘’ 와 “”도 차이가 존재한다</p><p>‘’는 몇 가지 예외를 제외하고는 입력값이 곧 문자열의 값이 된다</p><p>“”는 \n을 줄 바꿈 문자로 변경하고, 문자열 안에 #{expression}가 있을 시 평가한 값으로 변환한다</p><p>또한 루비 메서드에서는 마지막으로 실행된 표현식의 결괏값이 반환된다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 괄호가 없어도 되나, 함수 선언시 ()를 사용하는 것을 권장한다</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_goodnight</span><span class="params">(name)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">"Good night, <span class="subst">#&#123;name.capitalize&#125;</span>"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts say_goodnight(<span class="string">'uncle'</span>)</span><br></pre></td></tr></table></figure><p>지역 변수, 메서드 매개 변수, 메서드 이름은 모두 소문자 또는 _로 시작해야 한다</p><p>전역변수는 $로, 인스턴스 변수는 @, 클래스 변수는 @@로 시작한다</p><p>인스턴스 변수는 snake_case, 클래스명은 MixedCase와 같이 PascalCase Convention을 사용한다</p><p>또한 메서드명은 ?, !, = 로 끝날 수 있다</p><hr><h3 id="2-3-배열과-해시"><a href="#2-3-배열과-해시" class="headerlink" title="2.3 배열과 해시"></a>2.3 배열과 해시</h3><p>배열과 해시는 키를 이용하여 접근할 수 있는 객체 모음이다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">1</span>, <span class="string">'cat'</span>, <span class="number">3.14</span>]</span><br><span class="line">puts <span class="string">"The first element <span class="subst">#&#123;arr[<span class="number">0</span>]&#125;</span>"</span> <span class="comment"># The first element is 1</span></span><br><span class="line">arr[<span class="number">2</span>] = <span class="literal">nil</span></span><br><span class="line">puts <span class="string">"The first element <span class="subst">#&#123;arr.inspect&#125;</span>"</span> <span class="comment"># The array is now [1, "cat", nil]</span></span><br></pre></td></tr></table></figure><p>inspect는 자기 자신을 string으로 변환한 결과값을 반환하는 메서드이다</p><p>많은 언어에서는 nil(또는 null)이 아무 객체도 아님을 의미하지만, 루비에서는 아무것도 아님을 표현하는 하나의 객체이다</p><p>단어의 배열을 만드는 또 다른 방법도 있다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr = <span class="string">%w&#123; ant bee cat dog elk &#125;</span> <span class="comment"># ["ant", "bee", "cat", "dog", "elk"]</span></span><br><span class="line">arr[<span class="number">0</span>] <span class="comment"># "ant"</span></span><br><span class="line">arr[<span class="number">3</span>] <span class="comment"># "dog"</span></span><br></pre></td></tr></table></figure><p>해시는 아래와 같다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">inst_section1 = &#123;</span><br><span class="line">  <span class="string">'cello'</span> =&gt; <span class="string">'string'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;"cello"=&gt;"string"&#125;</span></span><br><span class="line"></span><br><span class="line">inst_section2 = &#123;</span><br><span class="line">  <span class="symbol">:cello</span> =&gt; <span class="string">'string'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;:cello=&gt;"string"&#125;</span></span><br><span class="line"></span><br><span class="line">inst_section3 = &#123;</span><br><span class="line">  <span class="string">'cello'</span>: <span class="string">'string'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;:cello=&gt;"string"&#125;</span></span><br><span class="line"></span><br><span class="line">p inst_section1[<span class="string">'cello'</span>] <span class="comment"># "string"</span></span><br><span class="line">p inst_section1[<span class="symbol">:cello</span>] <span class="comment"># nil</span></span><br><span class="line"></span><br><span class="line">p inst_section2[<span class="string">'cello'</span>] <span class="comment"># nil</span></span><br><span class="line">p inst_section2[<span class="symbol">:cello</span>] <span class="comment"># "string"</span></span><br><span class="line"></span><br><span class="line">p inst_section3[<span class="string">'cello'</span>] <span class="comment"># nil</span></span><br><span class="line">p inst_section3[<span class="symbol">:cello</span>] <span class="comment"># "string"</span></span><br></pre></td></tr></table></figure><p>p 메서드는 객체의 값을 화면에 출력한다 (nil과 같은 객체도 명시적으로 출력)</p><p>:cello와 같이 생긴, 심볼이라는 것이 무엇인지는 다음 챕터에서 다루도록 할테니 우선은 특수한 문자열이라고 생각하고 진행하자</p><p><a href="https://github.com/dalzony/ruby-style-guide/blob/master/README-koKR.md#symbols-as-keys" target="_blank" rel="noopener">해시 키는 문자열 보다 심볼을 사용하는 것이 좋다.</a>, <a href="https://github.com/dalzony/ruby-style-guide/blob/master/README-koKR.md#no-mutable-keys" target="_blank" rel="noopener">변경 가능한 객체를 해시 키로 사용하지 마라.</a>,  <a href="https://github.com/dalzony/ruby-style-guide/blob/master/README-koKR.md#hash-literals" target="_blank" rel="noopener">해시 키가 심볼인 경우 루비 1.9 해시 리터럴을 사용하라.</a> 를 참고하면 객체 선언시 inst_section3과 같은 방식으로 하는 것이 선호됨을 알 수 있다</p><p>해시에서 키와 값에는 어떠한 객체가 와도 상관없다</p><p>없는 값을 참조하면 위와 같이 nil을 반환한다</p><p>루비에서는 nil이 거짓을 의미하기에 조건문에서 활용하기 좋다</p><p>그러나 예를 들어, 기본값을 0으로 바꾸는 것이 필요하다면 아래와 같이 하면 된다<br>(단어를 셀 때, 키가 있는지 확인하지 않아도, 그저 값을 1 올려주면 된다)</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">histogram = Hash.new(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">histogram[<span class="symbol">:ruby</span>] = <span class="number">0</span></span><br><span class="line">histogram[<span class="symbol">:ruby</span>] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">p histogram[<span class="symbol">:ruby</span>] <span class="comment"># 1</span></span><br><span class="line">p histogram[<span class="string">"ruby"</span>] <span class="comment"># 0</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-4-심볼"><a href="#2-4-심볼" class="headerlink" title="2.4 심볼"></a>2.4 심볼</h3><p>심볼이란 미리 정의할 필요가 없는 동시에 유일한 값이 보장되는 상수명이다</p><p>:로 시작하며 그 다음에 이름이 온다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">inst_section = &#123;</span><br><span class="line">  <span class="symbol">cello:</span> <span class="string">'string'</span>,</span><br><span class="line">  <span class="symbol">clarinet:</span> <span class="string">'woodwind'</span>,</span><br><span class="line">  <span class="symbol">drum:</span> <span class="string">'percussion'</span>,</span><br><span class="line">  <span class="symbol">oboe:</span> <span class="string">'woodwind'</span>,</span><br><span class="line">  <span class="symbol">trumpet:</span> <span class="string">'brass'</span>,</span><br><span class="line">  <span class="symbol">violin:</span> <span class="string">'string'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">puts <span class="string">"An oboe is a <span class="subst">#&#123;inst_section[<span class="symbol">:oboe</span>]&#125;</span> instrument"</span></span><br><span class="line"><span class="comment"># An oboe is a woodwind instrument</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-5-제어-구조"><a href="#2-5-제어-구조" class="headerlink" title="2.5 제어 구조"></a>2.5 제어 구조</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">today = Time.now</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> today.saturday?</span><br><span class="line">  puts <span class="string">'Do chores around the horse'</span></span><br><span class="line"><span class="keyword">elsif</span> today.sunday?</span><br><span class="line">  puts <span class="string">'Relax'</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  puts <span class="string">'Go tto work'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Go to work</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> radiation &gt; <span class="number">3000</span></span><br><span class="line">  puts <span class="string">'Danger, Will Robinson'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 위를 한 줄로 줄이면, 아래와 같이 된다</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">'Danger, Will Robinson'</span> <span class="keyword">if</span> radiation &gt; <span class="number">3000</span></span><br><span class="line"></span><br><span class="line">square = <span class="number">4</span></span><br><span class="line"><span class="keyword">while</span> square &lt; <span class="number">1000</span></span><br><span class="line">  square *= square</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 위를 한 줄로 줄이면, 아래와 같이 된다</span></span><br><span class="line"></span><br><span class="line">square = <span class="number">4</span></span><br><span class="line">square *= square <span class="keyword">while</span> square &lt; <span class="number">1000</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-6-정규-표현식"><a href="#2-6-정규-표현식" class="headerlink" title="2.6 정규 표현식"></a>2.6 정규 표현식</h3><p>정규 표현식은 문자열에 매치되는 패턴을 기술하는 방법이며, 루비에서는 역시 객체이다</p><p>루비에서는 슬래시 사이에 패턴을 적으면 정규 표현식을 의미한다 <code>/pattern/</code></p><p>Perl이나 Python을 포함하는 문자열을 찾기 위해서는 다음과 같다 <code>/Perl|Python/</code></p><p>다음과 같이 할 수도 있다 <code>/P(erl|ython)/</code></p><p><code>/ab+c/</code> 는 a가 하나 오고, 1개 이상의 b가 오고, 이어서 c가 오는 문자열을 뜻한다</p><p>/\d\d:\d\d:\d\d/ # 12:34:56 형태의 시간</p><p>/Perl.*Python/ # Perl, 0 개 이상의 문자들 , 그리고 Python</p><p>/Perl Python/ # Perl, 공백 , Python</p><p>/Perl *Python/ # Perl, 0 개 이상의 공백 , 그리고 Python</p><p>/Perl +Python/ # Perl, 1 개 이상의 공백 , 그리고 Python</p><p>/Perl\s+Python/ # Perl, 1 개 이상의 공백 문자 , 그리고 Python</p><p>/Ruby (Perl|Python)/ # Ruby, 공백 , 그리고 Perl 이나 Python</p><p>매치 연산자 =~ 는 문자열에서 패턴이 발견되면 첫 위치, 그렇지 않으면 nil을 반환한다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">line = gets</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> line =~ <span class="regexp">/Perl|Python/</span></span><br><span class="line">  puts <span class="string">"Scripting language mentioned: <span class="subst">#&#123;line&#125;</span>"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>정규 표현식을 활용해 치환할 수도 있다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">line = gets</span><br><span class="line"></span><br><span class="line">newline = line.sub(<span class="regexp">/Perl/</span>, <span class="string">'Ruby'</span>) <span class="comment"># 처음 나오는 'Perl'을 'Ruby'로 바꾼다</span></span><br><span class="line">newerline = newline.gsub(<span class="regexp">/Python/</span>, <span class="string">'Ruby'</span>) <span class="comment"># 모든 'Python'을 'Ruby'로 바꾼다</span></span><br><span class="line">newestline = line.gsub(<span class="regexp">/Perl|Python/</span>, <span class="string">'Ruby'</span>) <span class="comment"># 모든 'Perl', 'Python'을 'Ruby'로 바꾼다</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-7-블록과-반복자"><a href="#2-7-블록과-반복자" class="headerlink" title="2.7 블록과 반복자"></a>2.7 블록과 반복자</h3><p>블록은 마치 매개 변수처럼 메서드 호출과 결합할 수 있는 기능이다</p><p>콜백을 구현할 수도 있고, 코드의 일부를 함수에 넘겨주거나 반복자를 구현할 수도 있다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123; puts <span class="string">'Hello'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  club.enroll(person)</span><br><span class="line">  person.socialize</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>중괄호는 do/end 쌍보다 연산자 우선순위가 높다</p><p>한 줄의 블록은 중괄호로, 여러 줄의 블록은 do/end를 사용한다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">greet &#123; puts <span class="string">'Hi'</span> &#125;</span><br><span class="line"></span><br><span class="line">verbose_greet(<span class="string">'Dave'</span>, <span class="string">'loyal customer'</span>) &#123; puts <span class="string">'Hi'</span> &#125;</span><br></pre></td></tr></table></figure><p>메서드에서 yield 문을 이용하여 블록을 여러 차례 실행할 수 있다, yield 문은 yield를 포함하는 메서드에 연관된 블록을 호출하는 메서드 호출로 생각해도 무방하다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call_back</span></span></span><br><span class="line">  puts <span class="string">'Start of method'</span> <span class="comment"># Start of method</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="comment"># In the block</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="comment"># In the block</span></span><br><span class="line">  puts <span class="string">'End of method'</span> <span class="comment"># End of method</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">call_back &#123; puts <span class="string">'In the block'</span> &#125;</span><br></pre></td></tr></table></figure><p>블록을 메서드에 결합시키는 것은 인자를 넘겨주는 것보다는 블록과 메서드 사이에서 제어권을 주고받는 코루틴으로 보아야 한다</p><p>yield 문에 인자를 적으면 블록에 매개 변수로 전달된다, 블록에서는 |params|와 같이 매개 변수의 이름을 정의한다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">who_says_what</span></span></span><br><span class="line">  <span class="keyword">yield</span>(<span class="string">'Dave'</span>, <span class="string">'hello'</span>) <span class="comment"># Dave says hello</span></span><br><span class="line">  <span class="keyword">yield</span>(<span class="string">'Andy'</span>, <span class="string">'goodbye'</span>) <span class="comment"># Andy says goodbye</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">who_says_what &#123; <span class="params">|person, phrase|</span> puts <span class="string">"<span class="subst">#&#123;person&#125;</span> says <span class="subst">#&#123;phrase&#125;</span>"</span> &#125;</span><br></pre></td></tr></table></figure><p>반복자 구현에도 쓰이는데, 반복자란 배열 등의 집합에서 구성 요소를 하나씩 반환해주는 함수이다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">animals = <span class="string">%w( ant bee cat dog )</span></span><br><span class="line">animals.each &#123; <span class="params">|animal|</span> puts animal &#125;</span><br><span class="line"><span class="comment"># ant</span></span><br><span class="line"><span class="comment"># bee</span></span><br><span class="line"><span class="comment"># cat</span></span><br><span class="line"><span class="comment"># dog</span></span><br><span class="line"></span><br><span class="line">[ <span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'horse'</span> ].each &#123; <span class="params">|name|</span> print name, <span class="string">" "</span> &#125;</span><br><span class="line"><span class="number">5</span>.times &#123; print <span class="string">"*"</span> &#125;</span><br><span class="line"><span class="number">3</span>.upto(<span class="number">6</span>) &#123;<span class="params">|i|</span> print i &#125;</span><br><span class="line"><span class="number">4</span>.(<span class="string">'a'</span>..<span class="string">'e'</span>).each &#123;<span class="params">|char|</span> print char &#125;</span><br><span class="line"><span class="number">5</span>.puts</span><br><span class="line"></span><br><span class="line"><span class="comment"># cat dog horse *****3456abcde</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-8-읽기와-쓰기"><a href="#2-8-읽기와-쓰기" class="headerlink" title="2.8 읽기와 쓰기"></a>2.8 읽기와 쓰기</h3><p>printf는 매개 변수를 특정 형식 문자열에 따라서 제어해 출력해준다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">printf(<span class="string">"Number: %5.2f,\nString: %s\n"</span>, <span class="number">1.23</span>, <span class="string">"hello"</span>)</span><br><span class="line"><span class="comment"># Number: 1.23,</span></span><br><span class="line"><span class="comment"># String: hello</span></span><br></pre></td></tr></table></figure><p>%5.2f 는 다섯 글자로 맞추고, 소수점 아래 두 자리만 표시한다는 의미라고 책에 나와있지만, 숫자를 수정해도 소숫점과 달리 정수 부분은 입력한 그대로 잘 나온다..</p><hr><h3 id="2-9-명령행-인자"><a href="#2-9-명령행-인자" class="headerlink" title="2.9 명령행 인자"></a>2.9 명령행 인자</h3><p>명령행에서 실행할 때 넘어오는 인자에 접근하는 방법은 두 가지이다</p><ol><li>ARGV</li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cmd_line.rb</span></span><br><span class="line">puts <span class="string">"You gave <span class="subst">#&#123;ARGV.size&#125;</span> arguments"</span></span><br><span class="line">p ARGV</span><br><span class="line"></span><br><span class="line"><span class="comment"># $ ruby cmd_line.rb ant bee cat dog</span></span><br><span class="line"><span class="comment"># You gave 4 arguments</span></span><br><span class="line"><span class="comment"># ["ant", "bee", "cat", "dog"]</span></span><br></pre></td></tr></table></figure><ol start="2"><li>ARGF</li></ol><p>ARGF는 명령행에서 넘겨진 이름을 가진 모든 파일의 내용을 가지고 있는 I/O이다</p><hr><h3 id="2-10-루비-시작하기"><a href="#2-10-루비-시작하기" class="headerlink" title="2.10 루비 시작하기"></a>2.10 루비 시작하기</h3><p>이번 장에선 객체, 메서드, 문자열, 컨테이너, 정규 표현식, 제어문, 반복자 에 대해서 학습하였다</p><hr><h2 id="3장-클래스-객체-변수"><a href="#3장-클래스-객체-변수" class="headerlink" title="3장 클래스, 객체, 변수"></a>3장 클래스, 객체, 변수</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;2-1-객체-지향-언어-루비&quot;&gt;&lt;a href=&quot;#2-1-객체-지향-언어-루비&quot; class=&quot;headerlink&quot; title=&quot;2.1 객체 지향 언어 루비&quot;&gt;&lt;/a&gt;2.1 객체 지향 언어 루비&lt;/h3&gt;&lt;p&gt;메서드 호출을 메시지라고 표현하고
      
    
    </summary>
    
      <category term="Ruby" scheme="https://eclatant.io/categories/Ruby/"/>
    
    
      <category term="Ruby" scheme="https://eclatant.io/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>레일즈 기초</title>
    <link href="https://eclatant.io/2018/05/08/Rails-Intro/"/>
    <id>https://eclatant.io/2018/05/08/Rails-Intro/</id>
    <published>2018-05-07T15:00:00.000Z</published>
    <updated>2018-05-08T20:57:17.828Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Framework"><a href="#Framework" class="headerlink" title="Framework?"></a>Framework?</h2><p>일반적인 의미에서 프레임워크란? 문제를 일반화하고 해결하기 위한 틀</p><p>프로그래밍에서의 프레임워크란, 설계와 재사용이 가능한 클래스를 제공</p><p>라이브러리와의 차이는 <strong>제어역전</strong> (Inversion of Control)</p><p>라이브러리는 사용자 코드에서 호출되어지나 프레임워크는 자신의 라이프 사이클을 직접 관리하며 그 흐름 속에 개발자가 원하는 부분에 사용자 코드를 추가하여 기능을 구현하는 형태</p><p>프레임워크의 장점은 생산성, 유지보수성, 일정한 퀄리티 보장</p><hr><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p><img src="http://adrianmejia.com/images/rails_arch.png" alt="img"></p><p><img src="https://cdn-images-1.medium.com/max/629/1*lFMcocBQ4zF-Q-_SvM8c7Q.jpeg" alt="img"></p><p>Controller : 요청 데이터 처리, 비즈니스 로직 호출, 출력으로 전달</p><p>View : 최종적인 출력 생성</p><p>Model ( 순수한 데이터 원형 ) : 비즈니스 로직, 데이터 조작</p><p>Controller의 책임</p><ol><li>Model 생성</li><li>Model의 옵져버<ul><li>Model과 강하게 바인딩되지 않기 위해서 옵저버 패턴 차용</li><li>Model의 데이터를 가져와서 View를 만드는 것이 목적이므로</li></ul></li><li>View 생성</li><li>View에게 모델을 전달</li><li>View의 액션을 처리</li></ol><p>View의 책임</p><ol><li>모델에 기반하여 렌더링</li><li>입력의 처리를 Controller에게 위임</li></ol><p>MVC, MVP, MVVM 의 차이점은 MV의 관계</p><p>MVC에서는 View가 Model을 알고 있는 것</p><p>Controller는 연결에 대한 책임을 지며, 그림을 그리는 것은 전적으로 View의 책임</p><p>View에서 Model을 직접적으로 수신하지 않는 이유</p><ul><li>View는 전체 공정 중의 일부만 그리게 되어있으므로 Controller가 데이터에 대한 후처리, 컨트롤러의 추가 작업 등을 거친 뒤에 모델을 넘겨준다</li></ul><p>MVC에서의 View는 Model과 Controller를 모두 다 알고 있음</p><ul><li>Model은 렌더링할 데이터</li><li>Controller는 이벤트의 처리를 위임할 대상</li></ul><p>Controller는 App(또는 Router)에 의해 만들어진다</p><p>Model을 상황에 따라서 공급해줄 필요가 있다면 Service도 등장</p><p>위와 같은 형태를 제왕적 Controller 모델이라고 부른다</p><p>문제점은 Controller에게 책임이 너무 많기 때문에 잘 만들기가 대단히 어렵고 그에 따라 문제들이 발생한다는 것이고, 규모가 커질수록 Controller의 책임을 나누기 위해 많은 추상층을 만들어내게 되고 점점 더 복잡해진다</p><hr><h2 id="Rails의-교리-The-Rails-Doctrine"><a href="#Rails의-교리-The-Rails-Doctrine" class="headerlink" title="Rails의 교리, The Rails Doctrine"></a>Rails의 교리, <a href="https://rubyonrails.org/doctrine/" target="_blank" rel="noopener">The Rails Doctrine</a></h2><ol><li><a href="https://rubyonrails.org/doctrine/#optimize-for-programmer-happiness" target="_blank" rel="noopener">Optimize for programmer happiness</a></li><li><a href="https://rubyonrails.org/doctrine/#convention-over-configuration" target="_blank" rel="noopener">Convention over Configuration</a></li><li><a href="https://rubyonrails.org/doctrine/#omakase" target="_blank" rel="noopener">The menu is omakase</a></li><li><a href="https://rubyonrails.org/doctrine/#no-one-paradigm" target="_blank" rel="noopener">No one paradigm</a></li><li><a href="https://rubyonrails.org/doctrine/#beautiful-code" target="_blank" rel="noopener">Exalt beautiful code</a></li><li><a href="https://rubyonrails.org/doctrine/#provide-sharp-knives" target="_blank" rel="noopener">Provide sharp knives</a></li><li><a href="https://rubyonrails.org/doctrine/#integrated-systems" target="_blank" rel="noopener">Value integrated systems</a></li><li><a href="https://rubyonrails.org/doctrine/#progress-over-stability" target="_blank" rel="noopener">Progress over stability</a></li><li><a href="https://rubyonrails.org/doctrine/#big-tent" target="_blank" rel="noopener">Push up a big tent</a></li></ol><p><a href="https://rubyonrails.org/doctrine/#optimize-for-programmer-happiness" target="_blank" rel="noopener">Optimize for programmer happiness</a></p><ul><li>루비( <code>“Ruby is designed to make programmers happy.”</code> )가 그러하듯, Rails도 프로그래머의 행복을 추구한다는 의미인 듯</li></ul><p><a href="https://rubyonrails.org/doctrine/#convention-over-configuration" target="_blank" rel="noopener">Convention over Configuration</a></p><ul><li>Rails 하면 떠올리는 가장 대표적인 원칙 두 가지 중 하나인 듯 하다 ( 나머지 하나는 <code>Don&#39;t Repeat Yourself</code>  )  이 프로덕트에서 변별적 차이가 존재하는 부분을 제외한, 전형적인 부분들은 특정한 컨벤션을 사용하는 것을 통해 생산성을 증대하는 것을 목표로 한다</li></ul><p><a href="https://rubyonrails.org/doctrine/#omakase" target="_blank" rel="noopener">The menu is omakase</a></p><ul><li>프레임워크를 선택하는 이유일 것, 어떤 일을 할 때 무슨 도구가 좋을지 선별할 수 있는 눈이 아직 없다면 프레임워크에서 제공하는 잘 정제된 도구를 활용하여 생산성을 낼 수 있다</li></ul><p><a href="https://rubyonrails.org/doctrine/#no-one-paradigm" target="_blank" rel="noopener">No one paradigm</a></p><ul><li>특정 패러다임에 대한 순수주의를 고집하기 보다는 적절한 조합을 통한 생산성을 추구하는 듯하다</li></ul><p><a href="https://rubyonrails.org/doctrine/#beautiful-code" target="_blank" rel="noopener">Exalt beautiful code</a></p><ul><li>Ruby의 특성과 CoC 등을 활용한 짧으면서도 많은 기능을 해내는 코드를 추구하는 듯하다</li><li>인상적인 예시가 나오는데, <code>if people.include? person</code> 과 <code>if person.in? people</code> 가 있을 때, 초점(Subject)이 무엇이냐에 따라서 어느 코드가 좋은지가 다르다</li></ul><p><a href="https://rubyonrails.org/doctrine/#provide-sharp-knives" target="_blank" rel="noopener">Provide sharp knives</a></p><ul><li>안정성을 추구하기 위해 가능성을 닫아놓기 보다는 보다 많은 자유도를 제공하고자 하는 듯하다 ( 흔히 말하는 <code>Opinionated</code> 와는 상반된 입장 )</li></ul><p><a href="https://rubyonrails.org/doctrine/#integrated-systems" target="_blank" rel="noopener">Value integrated systems</a></p><ul><li>MSA를 추구하는 요즘 트렌드와는 상반된 철학이지만, <code>&quot;What’s worse is when systems are prematurely disintegrated and broken into services or, even worse, microservices.&quot;</code> 이것이 더 나쁘다고 판단하고, Monolithic 의 장점을 보다 높게 본, 그리고 그것이 가능하도록 Rails에서 지원하겠다는 의미로 읽힌다</li></ul><p><a href="https://rubyonrails.org/doctrine/#progress-over-stability" target="_blank" rel="noopener">Progress over stability</a></p><ul><li>사실 이제는 유행을 선도하는 주체라고 보기 어렵지만, 그럼에도 끊임없는 진보를 추구한다는 이 철학이 아직까지 Rails가 살아있도록 한 것 같다</li></ul><p><a href="https://rubyonrails.org/doctrine/#big-tent" target="_blank" rel="noopener">Push up a big tent</a></p><ul><li>초점은 Value integrated systems 등에 맞춰져 있을지라도 API와 같은 다양한 니즈에 대응하려는 노력도 병행하고 있는 듯 하다</li></ul><hr><h2 id="Rails의-구성-요소-Ruby-on-Rails-Architectural-Design"><a href="#Rails의-구성-요소-Ruby-on-Rails-Architectural-Design" class="headerlink" title="Rails의 구성 요소, Ruby on Rails Architectural Design"></a>Rails의 구성 요소, <a href="http://adrianmejia.com/blog/2011/08/11/ruby-on-rails-architectural-design/" target="_blank" rel="noopener">Ruby on Rails Architectural Design</a></h2><p><img src="http://adrianmejia.com/images/dynamic_view.png" alt="img"></p><p><img src="http://adrianmejia.com/images/ror_static_view.png" alt="img"></p><ul><li>Action Pack : MVC의 VC<ul><li>Action Dispatcher : 웹 브라우저 요청의 라우팅, 요청을 파싱하고 쿠키 핸들링, 세션, 요청 메소드 등 HTTP에 대한 처리를 수행</li><li>Action Controller : 모델과 뷰를 제어하기 위한 요청 처리, 상태 관리, 응답 생성 등을 담당, 또한 사용자 세션, 애플리케이션 흐름, 캐싱 기능, 헬퍼 모듈, 사전 필터, during, post processing hooks를 관리</li><li>Action View : Controller에 의해 호출되어 요청된 형식에 해당하는 응답을 생성, 마스터 레이아웃, 템플릭 룩업, 헬퍼 등 제공, 템플릿 스키마는 세 종류가 있는데 rhtml은 erb를 HTML View로 생성, rxml은 XML 문서 구성, rjs는 ajax 기능을 위해 Ruby 코드 내에서 동적인 자바스크립트 코드를 만들도록 함</li></ul></li><li>Active Model : Action Pack과 Active Record 모듈 간 인터페이스, 이름 규칙, 유효성 검사 등 모델과 관련된 규약을 정의</li><li>Active Record<ul><li>아키텍처 패턴으로서, Rails에서는 Class로 ORM을 제공, Instance는 각각의 row를 표현, Class 네이밍, 주키와 외래키 설정 등은 Rails의 관례에 따른다, 비즈니스 로직에 포함되는 Model Class를 생성하고, 테이블과 매핑시키고, getter, setter과 life cycle에 따른 Callback를 제공한다</li></ul></li><li>Active Resource : Model Class와 RESTful 웹 서비스를 매핑할 수 있도록 해준다</li><li>Active Support : Ruby 표준 라이브러리의 확장 ( 국제화, 타임존, 테스팅 등 )</li><li>Action Mailer : Action Controller를 래핑해서 템플릿을 이용한 email 메시지를 만드는 방법 제공</li><li>Railties : Rails의 코어로서 위 모듈들이 잘 조합될 수 있게 하며 코드 생성기를 제공</li></ul><hr><h2 id="Rails-프로젝트-파악-방법"><a href="#Rails-프로젝트-파악-방법" class="headerlink" title="Rails 프로젝트 파악 방법"></a>Rails 프로젝트 파악 방법</h2><ul><li>db/schema.rb 를 보면서 데이터베이스 구조 파악</li><li>config/routes.rb를 보면서 요청 경로와 Controller 연결고리 파악</li><li>Gemfile에서 사용하고 있는 라이브러리 파악</li></ul><hr><h2 id="VC"><a href="#VC" class="headerlink" title="VC"></a>VC</h2><p>Controller : Action의 집합 (Controller Class Method)</p><p>routes에서 어느 주소이냐에 따라 어떤 Controller의 어느 Method에게 처리를 위임할지 정하게 됨</p><p>action에서 데이터를 처리하고 동일한 이름에 해당하는 View ( <code>action.html.erb</code> ) 에서 결과를 렌더링</p><h2 id="routes"><a href="#routes" class="headerlink" title="routes"></a>routes</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Rails.application.routes.draw <span class="keyword">do</span></span><br><span class="line">  root <span class="string">'home#index'</span> <span class="comment"># get + '/'이면 home Controller의 index action이 처리</span></span><br><span class="line">  </span><br><span class="line">  get <span class="string">'/attack'</span>, <span class="symbol">to:</span> <span class="string">'home#attack'</span> <span class="comment"># get 'home/attack' 이라고 적으면 home/attack 로 접속하면 home Controller의 attack action이 처리</span></span><br><span class="line">  get <span class="string">'/defense'</span>, <span class="symbol">to:</span> <span class="string">'home#defense'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>form tag에서 submit을 받으면 input tag의 이름에 따라 각각 params hash에 담겨 action에게 넘어간다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attack</span></span></span><br><span class="line">  @from = params[<span class="symbol">:userA</span>]</span><br><span class="line">  @to = params[<span class="symbol">:userB</span>]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><p>기능 구현 순서 : Controller -&gt; action -&gt; routes -&gt; action.html.erb</p><p><code>rails generate controller home index new create</code></p><p>home Controller ( + index, new, create action )</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># new.html.erb</span></span><br><span class="line">&lt;form action=<span class="string">'/home/create'</span> method=<span class="string">'post'</span>&gt;</span><br><span class="line">  &lt;%= hidden_field_tag <span class="symbol">:authenticity_token</span>, form_authenticity_token %&gt;</span><br><span class="line">  제목 : &lt;input type=<span class="string">'text'</span> name=<span class="string">'post_title'</span>&gt;&lt;br /&gt;</span><br><span class="line">  내용 : &lt;textarea name=<span class="string">'post_content'</span>&gt;&lt;<span class="regexp">/textarea&gt;&lt;br /</span>&gt;</span><br><span class="line">  &lt;input type=<span class="string">'submit'</span> value=<span class="string">'제출'</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p><code>rails g model post title:string content:text</code></p><p><code>db/migrate/20180411092430_create_posts.rb</code> 과 <code>models/post.rb</code>를 생성</p><p>rails db:migrate : migration file을 DB에 반영</p><p>rails db:drop : 테이블 삭제</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span></span></span><br><span class="line">  @post = Post.new</span><br><span class="line">  @post.title = params[<span class="symbol">:post_title</span>]</span><br><span class="line">  @post.content = params[<span class="symbol">:post_content</span>]</span><br><span class="line">  @post.save</span><br><span class="line">  </span><br><span class="line">  redirect_to <span class="string">'home/index'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">  @posts = Post.all</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># index.html.erb</span></span><br><span class="line">&lt;% @posts.each <span class="keyword">do</span> <span class="params">|x|</span> %&gt;</span><br><span class="line">  제목 : &lt;%= x.title %&gt;&lt;br /&gt;</span><br><span class="line">  내용 : &lt;%= x.content %&gt;&lt;br /&gt;</span><br><span class="line">  ---------------------&lt;br /&gt;</span><br><span class="line">&lt;% <span class="keyword">end</span> %&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># destroy.html.erb</span></span><br><span class="line">&lt;% @posts.each <span class="keyword">do</span> <span class="params">|x|</span> %&gt;</span><br><span class="line">  제목 : &lt;%= x.title %&gt;&lt;br /&gt;</span><br><span class="line">  내용 : &lt;%= x.content %&gt;&lt;br /&gt;</span><br><span class="line">  &lt;a href=<span class="string">'/home/destroy/&lt;%=x.id%&gt;'</span>&gt;삭제&lt;<span class="regexp">/a&gt;&lt;br /</span>&gt;</span><br><span class="line">  ---------------------&lt;br /&gt;</span><br><span class="line">  </span><br><span class="line"><span class="comment"># routes.rb</span></span><br><span class="line">get <span class="string">`home/destroy/:post_id' =&gt; 'home#destroy'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def destroy</span></span><br><span class="line"><span class="string">  @post = Post.find(params[:post_id])</span></span><br><span class="line"><span class="string">  @post.destroy</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  redirect_to 'home/index'</span></span><br><span class="line"><span class="string">end</span></span><br></pre></td></tr></table></figure><p>edit == 덮어쓰기</p><p>새 글을 쓰는 것이 빈 테이블을 만들고 내용을 채우는 것이라면, 수정은 채워진 테이블의 내용을 바꾸는 것</p><p>수정 페이지 == 글 쓰기 양식</p><ul><li>edit.html.erb == new.html.erb</li><li>단, 이전 내용 필요</li></ul><p>id는 두 번 필요</p><ul><li>수정하는 양식에 이전 내용을 불러올 때</li><li>이전 글을 수정한 뒤 새로운 내용으로 업데이트 할 때</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># index.html.erb, edit action으로 id 넘기기</span></span><br><span class="line">&lt;% @posts.each <span class="keyword">do</span> <span class="params">|x|</span> %&gt;</span><br><span class="line">  제목 : &lt;%= x.title %&gt;&lt;br /&gt;</span><br><span class="line">  내용 : &lt;%= x.content %&gt;&lt;br /&gt;</span><br><span class="line">  &lt;a href=<span class="string">'/home/destroy/&lt;%=x.id%&gt;'</span>&gt;삭제&lt;<span class="regexp">/a&gt;&lt;br /</span>&gt;</span><br><span class="line">  &lt;a href=<span class="string">'/home/edit/&lt;%=x.id%&gt;'</span>&gt;수정&lt;<span class="regexp">/a&gt;&lt;br /</span>&gt;</span><br><span class="line">  ---------------------&lt;br /&gt;</span><br><span class="line">  </span><br><span class="line"><span class="comment"># routes.rb</span></span><br><span class="line">get <span class="string">`home/edit/:post_id' =&gt; 'home#edit'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def edit</span></span><br><span class="line"><span class="string">  @post = Post.find(params[:post_id])</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;form action='/home/update/&lt;%=@post.id%&gt;' method='post'&gt;</span></span><br><span class="line"><span class="string">  &lt;%= hidden_field_tag :authenticity_token, form_authenticity_token %&gt;</span></span><br><span class="line"><span class="string">  제목 : &lt;input type='text' name='post_title' value='%&lt;=@post.title%&gt;'&gt;&lt;br /&gt;</span></span><br><span class="line"><span class="string">  내용 : &lt;textarea name='post_content'&gt;&lt;%=@post.content%&gt;&lt;/textarea&gt;&lt;br /&gt;</span></span><br><span class="line"><span class="string">  &lt;input type='submit' value='제출'&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">post 'home/update/:post_id' =&gt; 'home#update'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def update</span></span><br><span class="line"><span class="string">  post = Post.find(params[:post_id])</span></span><br><span class="line"><span class="string">  post.title = params[:post_title]</span></span><br><span class="line"><span class="string">  post.content = params[:post_content]</span></span><br><span class="line"><span class="string">  post.save</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  redirect_to '/home/index'</span></span><br><span class="line"><span class="string">end</span></span><br></pre></td></tr></table></figure><hr><h2 id="View-Helper"><a href="#View-Helper" class="headerlink" title="View Helper"></a>View Helper</h2><p><code>&lt;%= link_to &#39;텍스트&#39;, URL %&gt;</code></p><p><code>&lt;a href=&#39;/posts/destroy/&lt;%=post.id%&gt;&#39;&gt;삭제&lt;/a&gt;</code></p><p><code>&lt;%= link_to &#39;삭제&#39;, &quot;/posts/destroy/#{post.id}&quot; %&gt;</code></p><p>&lt;%= 안에 &lt;%= 가 또 들어갈 수는 없으므로 #{} 를 통해 manipulation</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># routes.rb</span></span><br><span class="line">get <span class="string">'/posts/destroy/:post_id'</span> =&gt; <span class="string">'posts#destroy'</span>, <span class="symbol">as:</span> <span class="string">'post_destroy'</span></span><br><span class="line"><span class="comment"># ( =&gt; 대신에 `, to: `도 사용 가능)</span></span><br><span class="line"></span><br><span class="line">&lt;%= link_to <span class="string">'삭제'</span>, post_destroy_path <span class="symbol">post_id:</span> p.id %&gt;</span><br><span class="line"><span class="comment"># post_destroy_path 에게 넘겨줄 값이 하나 뿐이라면 아래와 같이 작성 가능</span></span><br><span class="line">&lt;%= link_to <span class="string">'삭제'</span>, post_destroy_path p.id %&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># a태그를 감싸고 싶을 경우, 위 아래 두 코드는 동일</span></span><br><span class="line">&lt;a href=<span class="string">'/posts/destroy/&lt;%=post.id%&gt;`&gt;</span></span><br><span class="line"><span class="string">  &lt;button&gt;삭제&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;/a&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;%= link_to post_destroy_path post.id do %&gt;</span></span><br><span class="line"><span class="string">  &lt;button&gt;삭제&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;% end %&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Framework&quot;&gt;&lt;a href=&quot;#Framework&quot; class=&quot;headerlink&quot; title=&quot;Framework?&quot;&gt;&lt;/a&gt;Framework?&lt;/h2&gt;&lt;p&gt;일반적인 의미에서 프레임워크란? 문제를 일반화하고 해결하기 위한 틀&lt;/p
      
    
    </summary>
    
      <category term="Rails" scheme="https://eclatant.io/categories/Rails/"/>
    
    
      <category term="Rails" scheme="https://eclatant.io/tags/Rails/"/>
    
  </entry>
  
  <entry>
    <title>루비 기초</title>
    <link href="https://eclatant.io/2018/05/06/Ruby-Intro2/"/>
    <id>https://eclatant.io/2018/05/06/Ruby-Intro2/</id>
    <published>2018-05-05T15:00:00.000Z</published>
    <updated>2018-05-08T19:56:29.488Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(names)</span></span></span><br><span class="line">  names.each <span class="keyword">do</span> <span class="params">|name|</span> <span class="comment"># like JS forEach</span></span><br><span class="line">    puts <span class="string">"Hello, <span class="subst">#&#123;name.upcase&#125;</span>"</span></span><br><span class="line">      <span class="comment"># puts == print</span></span><br><span class="line">      <span class="comment"># string manipulation을 할 때는 "", 그렇지 않으면 ''</span></span><br><span class="line">      <span class="comment"># </span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">rubies = [<span class="string">'MRI'</span>, <span class="string">'jruby'</span>, <span class="string">'rubinius'</span>] <span class="comment"># 동적 타입이며 변수에 해당하는 타입 명시 또는 선언 키워드 불필요 (like Python)</span></span><br><span class="line"></span><br><span class="line">hello(rubies)</span><br></pre></td></tr></table></figure><ul><li>메소드 정의 <code>def</code></li><li>.each do |name| 은 JS의 forEach, Python의 for-in과 같다</li><li>do…end 의 형태를 block이라고 하며, 함수에게 넘겨줄 수 있는 덩어리이다</li><li>.each {|name| puts “Hello, #{name.upcase}”} 라고 적어도 같은 의미가 된다<ul><li>한 줄이면 {…}를, 여러 줄이면 do…end를 사용한다</li><li>값을 반환하는 식으로 블록을 작성하려면 {…}를, 일련의 처리를 실행하기 위해서는 do…end를 사용한다</li></ul></li><li>puts는 Python의 print이다</li><li>puts는 nil을 return하는데, nil은 JS의 null이나 Python의 None과 같다</li></ul><p>puts는 Python의 print와 같다</p><p>​      # string manipulation을 할 때는 “”, 그렇지 않으면 ‘’</p><p>ipt = gets.chomp</p><p>print : 개행 X</p><p>gets : 개행 포함</p><p>gets.chomp = 개행 포함 X</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">print <span class="string">"input your gender(성별) "</span></span><br><span class="line">gender = gets.chomp</span><br><span class="line"><span class="keyword">if</span> gender == <span class="string">"male"</span></span><br><span class="line">  puts <span class="string">"aha! you are male. right?"</span></span><br><span class="line"><span class="keyword">elsif</span> gender == <span class="string">"female"</span></span><br><span class="line">  puts <span class="string">"aha! you are female. right?"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  puts <span class="string">"please right gender(male or female)"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">print <span class="string">"input your gender(성별) "</span></span><br><span class="line">gender = gets.chomp</span><br><span class="line"><span class="keyword">if</span> gender == <span class="string">"male"</span></span><br><span class="line">  puts <span class="string">"aha! you are male. right?"</span></span><br><span class="line"><span class="keyword">elsif</span> gender == <span class="string">"female"</span></span><br><span class="line">  puts <span class="string">"aha! you are female. right?"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  puts <span class="string">"please right gender(male or female)"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fruit = [<span class="string">"banana"</span>, <span class="string">"apple"</span>, <span class="string">"watermelon"</span>]</span><br><span class="line">fruit &lt;&lt; <span class="string">"peach"</span></span><br><span class="line">fruit &lt;&lt; <span class="string">"pineapple"</span></span><br><span class="line">puts fruit.sample <span class="comment"># 임의의 한 요소</span></span><br><span class="line">puts fruit</span><br><span class="line"></span><br><span class="line">lotto = (<span class="number">1</span>..<span class="number">45</span>).to_a.sample(<span class="number">6</span>)</span><br></pre></td></tr></table></figure><ul><li>루비의 반복문은 12가지 종류, ( <a href="https://www.youtube.com/watch?v=wmJJFR1Qc_Q" target="_blank" rel="noopener">루비 프로그래밍 언어의 다양한 반복문</a> ), 이는 루비의 철학인 <code>More than one way to do things.</code> 과 맞닿아있는 것으로 보인다</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>.times <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">  puts <span class="string">"<span class="subst">#&#123;i&#125;</span> Hello, World!"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">arr = [<span class="string">"배터리"</span>, <span class="string">"비행기"</span>, <span class="string">"자동차"</span>]</span><br><span class="line"></span><br><span class="line">arr.each <span class="keyword">do</span> <span class="params">|x|</span></span><br><span class="line">  puts x</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">arr.each_with_index <span class="keyword">do</span> <span class="params">|x, index|</span></span><br><span class="line">  puts <span class="string">"<span class="subst">#&#123;index + <span class="number">1</span>&#125;</span>. 너는 전생에 <span class="subst">#&#123;x&#125;</span> 였을 수 있어"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">loop <span class="keyword">do</span></span><br><span class="line">  puts <span class="string">"0 to exit"</span></span><br><span class="line">  cmd = gets.chomp</span><br><span class="line">  <span class="keyword">break</span> <span class="keyword">if</span> cmd == <span class="string">"0"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;</span><br><span class="line">  <span class="symbol">name:</span> <span class="string">"Lic"</span>,</span><br><span class="line">  <span class="symbol">age:</span> <span class="number">21</span>,</span><br><span class="line">  <span class="symbol">college:</span> <span class="string">"seoul"</span></span><br><span class="line">&#125;</span><br><span class="line">puts student</span><br><span class="line">puts student[<span class="symbol">:name</span>]</span><br><span class="line">puts student[<span class="symbol">:age</span>]</span><br><span class="line">puts student[<span class="symbol">:college</span>]</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line">puts(<span class="string">'Hello '</span>+<span class="string">'world'</span>)</span><br><span class="line">puts(<span class="string">'Hello '</span>*<span class="number">3</span>)</span><br><span class="line">puts(<span class="string">'Hello'</span>[<span class="number">0</span>])</span><br><span class="line">puts(<span class="string">'Hello'</span>[<span class="number">1</span>])</span><br><span class="line">puts(<span class="string">'Hello'</span>[<span class="number">2</span>])</span><br><span class="line">puts(<span class="string">'hello world'</span>.capitalize())</span><br><span class="line">puts(<span class="string">'hello world'</span>.upcase())</span><br><span class="line">puts(<span class="string">'Hello world'</span>.length())</span><br><span class="line">puts(<span class="string">'Hello world'</span>.sub(<span class="string">'world'</span>, <span class="string">'programming'</span>))</span><br><span class="line">puts(<span class="number">10</span>+<span class="number">5</span>)</span><br><span class="line">puts(<span class="string">"10"</span>+<span class="string">"5"</span>)</span><br><span class="line"></span><br><span class="line">al = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>]</span><br><span class="line">puts(al.length) <span class="comment"># 4</span></span><br><span class="line">al.push(<span class="string">'E'</span>)</span><br><span class="line">print(al) <span class="comment"># ["A", "B", "C", "D", "E"]                                                                     </span></span><br><span class="line">al.delete_at(<span class="number">0</span>)</span><br><span class="line">print(al) <span class="comment"># ["B", "C", "D", "E"]</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span> <span class="keyword">do</span></span><br><span class="line">    puts(<span class="string">'puts("Hello world '</span>+(i*<span class="number">9</span>).to_s()+<span class="string">'")'</span>)                                                        </span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">members = [<span class="string">'user1'</span>, <span class="string">'user2'</span>, <span class="string">'user3'</span>]</span><br><span class="line"><span class="keyword">for</span> member <span class="keyword">in</span> members <span class="keyword">do</span></span><br><span class="line">    puts(member)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> (<span class="number">5</span>..<span class="number">10</span>) <span class="keyword">do</span></span><br><span class="line">  puts(item)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Module1</span></span></span><br><span class="line">  module_function()</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'a'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Module2</span></span></span><br><span class="line">  module_function()</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'B'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">require_relative <span class="string">'Module1'</span></span><br><span class="line">require_relative <span class="string">'Module2'</span>                                                                               </span><br><span class="line">puts(module1.a())</span><br><span class="line">puts(module2.a())</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cal</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(v1,v2)</span></span>                                                                                     </span><br><span class="line">    @v1 = v1</span><br><span class="line">    @v2 = v2</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> @v1+@v2</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">subtract</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> @v1-@v2</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">c1 = Cal.new(<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line">p c1.add()</span><br><span class="line">p c1.subtract()</span><br><span class="line">c2 = Cal.new(<span class="number">30</span>,<span class="number">20</span>)</span><br><span class="line">p c2.add()</span><br><span class="line">p c2.subtract()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class1</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method1</span><span class="params">()</span></span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'m1'</span>                                                                                      </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">c1 = Class1.new()</span><br><span class="line">p c1, c1.method1()</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class3</span> &lt; Class1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method2</span><span class="params">()</span></span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'m2'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">c3 = Class3.new()</span><br><span class="line">p c3, c3.method1()</span><br><span class="line">p c3, c3.method2()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cs</span></span></span><br><span class="line">  @@count = <span class="number">0</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">()</span></span></span><br><span class="line">    @@count = @@count + <span class="number">1</span>                                                                                </span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">Cs</span>.<span class="title">getCount</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> @@count</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">i1 = Cs.new()</span><br><span class="line">i2 = Cs.new()</span><br><span class="line">i3 = Cs.new()</span><br><span class="line">i4 = Cs.new()</span><br><span class="line">p Cs.getCount()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'parent'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C2</span> &lt; C1</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>()+<span class="string">' child'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">o = C2.new()</span><br><span class="line">p o.m()</span><br><span class="line"></span><br><span class="line"><span class="comment"># test.rb</span></span><br><span class="line">require_relative <span class="string">'lib'</span>                                                                                     </span><br><span class="line">obj = Lib::A.new()</span><br><span class="line">p obj.a()</span><br><span class="line"> </span><br><span class="line"><span class="comment">#lib.rb</span></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Lib</span></span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span></span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">'a'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">M1</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">m1_m</span></span></span><br><span class="line">    p <span class="string">"m1_m"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">M2</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">m2_m</span></span></span><br><span class="line">    p <span class="string">"m2_m"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line">  <span class="keyword">include</span> M1, M2                                                                                        </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">c = C.new()</span><br><span class="line">c.m1_m()</span><br><span class="line">c.m2_m()</span><br></pre></td></tr></table></figure><p><strong>외부에서 접근이 가능한 변수를 파이썬에서는 property, 루비에서는 attribute</strong></p><p>루비에서는 <strong>super는 부모 객체를 가리키지 않고 </strong> <strong>super가 소속되어있는 메소드와 같은 부모객체의 메소드를 가리킨다</strong>.</p><p>String</p><ul><li>to_s</li><li>gsub</li><li>length</li><li>blank?</li></ul><p>Array</p><ul><li>first / last</li><li>push / pop</li><li>each / map</li><li>select / reject</li><li>any? / include?</li></ul><p>nil</p><ul><li>nil?</li><li>blank?</li><li>to_i</li><li>to_s</li></ul><p>Time</p><ul><li>strftime</li><li>wday</li><li>year</li><li>month</li><li>hour</li></ul><p>Symbol</p><p>Hash</p><ul><li>keys</li><li>values</li><li>[]</li></ul><p>if elsif else</p><p>for</p><p>case</p><p>def</p><hr><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p>@를 사용하면 인스턴스 변수가 되며, 이것은 인스턴스 안에 소속된 모든 메소드 안에서 활용 가능한 변수</p><p>@@를 사용하면 클래스 변수가 되며, 클래스 전체에서 사용가능한 변수 ( 인스턴스 변수의 범위 + 메소드 밖 )</p><p>상속받을 때 부모의 method도 함께 활용하고 싶다면, 자식 method에서 super를 쓰면 된다 ( super 라인에서 부모 method가 동작 )</p><p>다중상속은 불가 ( 대신 믹스인을 활용 )</p><p>public, private</p><p>private method는 class 안에서만 호출이 가능</p><p>attr_reader ( getter )</p><p>attr_writer ( setter )</p><p>attr_accessor( getter + setter )</p><p>위 키워드들을 통해 해당 attribute를 메소드로 접근할 수 있도록 할 수 있다</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="Ruby" scheme="https://eclatant.io/categories/Ruby/"/>
    
    
      <category term="Ruby" scheme="https://eclatant.io/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>괜찮아 ! 너만 모르는 건 아니야 - 어휘편</title>
    <link href="https://eclatant.io/2018/05/01/OK-Word/"/>
    <id>https://eclatant.io/2018/05/01/OK-Word/</id>
    <published>2018-04-30T15:00:00.000Z</published>
    <updated>2018-05-02T16:06:04.951Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.kaidee.com/prd/20180427/337728869/b/0cf1987d-78e7-4f60-acd1-310d5c427af9.jpg" alt="img"></p><h3 id="1-생각의-틀을-확장하라"><a href="#1-생각의-틀을-확장하라" class="headerlink" title="1. 생각의 틀을 확장하라"></a>1. 생각의 틀을 확장하라</h3><p>붙다 라는 한국어를 미국인이 공부한다고 생각해보자</p><ol><li>stick</li></ol><ul><li>머리에 껌 붙었다.</li></ul><ol start="2"><li>pass</li></ol><ul><li>너 시험에 붙었다며?</li></ul><ol start="3"><li>take side</li></ol><ul><li>그 사람은 반대파에 붙었다</li></ul><ol start="4"><li>live with</li></ol><ul><li>그는 그 나이가 되도록 엄마에게 붙어산다</li></ul><p>위에 있는 붙다는 약간씩 의미가 다르긴 하지만, 큰 틀에서 모두 같은 말이다</p><p>위 단어를 평소 한국인이 영어를 공부하듯이 1번 또는 2번 정도까지만 암기하고 넘어간다면, 아래와 같은 문제는 해결할 수 없게 된다</p><p>하나의 기준을 정확히 마련해놓지 않은 채로, 우화 속의 박쥐처럼 상황에 따라 자신에게 유리한 편을 드는 사람을 한국에서는 <code>간에 ____ 쓸개에 ____ 한다</code> 라고 한다</p><h3 id="2-기본-의미-확장-훈련"><a href="#2-기본-의미-확장-훈련" class="headerlink" title="2. 기본 의미 확장 훈련"></a>2. 기본 의미 확장 훈련</h3><p>단어의 의미는 하나일 수 없다 (학술적으로 사용되는 명사의 경우 제외)</p><p>따라서 일대일 대응으로 단어를 학습해서는 제대로 학습할 수 없다</p><p>대부분의 학습자는 general을 일반적인 이라는 의미로 암기한다, 그렇게 할 경우 어떤 문제가 생기는지 살펴보자</p><p>general hospital : 일반 병원<br>general strike : 일반 파업<br>general anesthesia : 일반 마취<br>general attack : 일반 공격<br>general meeting : 일반 모임<br>general election : 일반 선거<br>general truce : 일반 휴전<br>general cleaning : 일반 청소<br>general denial : 일반적 부인</p><p>general이라는 단어의 전체적인 모습은 다음과 같다</p><ol><li>affecting all or most people, places or things</li><li>not limited to a particular aspect of a person or thing</li></ol><p>즉 한 가지 면에만 국한되지 않는, 대부분의 사람, 장소, 사물에 두루 영향을 미치는 이런 이미지를 가지고 있는 단어이다</p><p>따라서 유의해야 할 점은 general의 의미를 일반적인, 전면적인, 포괄적인 이런 식으로 다의어처럼 외우면 안 된다는 것이다</p><p>위의 이미지처럼 이해하자, 그러면 아래와 같은 의미가 된다</p><p>general hospital : 종합 병원<br>general strike : 총파업<br>general anesthesia : 전신 마취<br>general attack : 총공격<br>general meeting : 총회<br>general election : 총선거<br>general truce : 전면 휴전<br>general cleaning : 대청소<br>general denial : 전면 부인</p><p>bring up 이라는 단어를 기르다 로 외운다면 아래 문장을 제대로 해석할 수 없다</p><p>She brought up what she had for lunch</p><p>bring up 은 위로 가져오(가)다 로 이해되어야 한다</p><hr><h2 id="Accident"><a href="#Accident" class="headerlink" title="Accident"></a>Accident</h2><p>핵심이미지 : 내가 의도하지 않은, 우연히 일어난 일</p><p>design : 반대되는 단어 ( 고의 )</p><p>영영 풀이</p><ol><li>An unfortunate incident that happens unexpectedly and unintentionally, typically resulting in damage or injury.</li><li>An event that happens by chance or that is without apparent or deliberate cause.</li></ol><hr><h2 id="Address"><a href="#Address" class="headerlink" title="Address"></a>Address</h2><p>핵심 이미지 : 접근</p><p>한 사람 : 말 걸다, 여러 사람 : 연설하다, 문제 : 해결하다</p><p>영영 풀이</p><ol><li>The particulars of the place where someone lives or an organization is situated.</li><li>A formal speech delivered to an audience.</li><li>Speak to (a person or an assembly), typically in a formal way.</li><li>Say or write remarks or a protest to (someone).</li><li>Name someone in a specified way when talking or writing.</li><li>Think about and begin to deal with (an issue or problem).</li></ol><hr><h2 id="Assume"><a href="#Assume" class="headerlink" title="Assume"></a>Assume</h2><p>핵심 이미지 : 취하다</p><p>입장이나 태도, 직위, 책임을 지다, 분위기를 취하다</p><p>영영 풀이</p><ol><li>Suppose to be the case, without proof.</li><li>Take or begin to have (power or responsibility).</li><li>Take on (a specified quality, appearance, or extent).</li></ol><hr><h2 id="Available"><a href="#Available" class="headerlink" title="Available"></a>Available</h2><p>핵심 이미지 : (무엇인가를) 할 수 있는</p><p>탈 수 있는, 구매할 수 있는</p><p>영영 풀이</p><ol><li>Able to be used or obtained; at someone’s disposal.</li></ol><p>until : 기존 동작이 종료되고, 신규 동작이 시작되는 시점; 부정문이 함께 있으면 그러다가 로 해석</p><hr><h2 id="Appreciate"><a href="#Appreciate" class="headerlink" title="Appreciate"></a>Appreciate</h2><p>핵심 이미지 : 진가를 알다</p><p>가치를 알다, 감사하다, 이해하다, 감상하다, 가치가 올라가다</p><p>영영 풀이</p><ol><li>Recognize the full worth of.</li><li>Be grateful for (something).</li><li>Understand (a situation) fully; recognize the full implications of.</li><li>Rise in value or price.</li></ol><p>ever : 강조</p><p>I would appreciate if : ~해주신다면 감사하겠습니다</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img.kaidee.com/prd/20180427/337728869/b/0cf1987d-78e7-4f60-acd1-310d5c427af9.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-생각의-틀을-확장하라&quot;
      
    
    </summary>
    
      <category term="English" scheme="https://eclatant.io/categories/English/"/>
    
    
      <category term="English" scheme="https://eclatant.io/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>Codility ~7</title>
    <link href="https://eclatant.io/2018/04/22/Codility7/"/>
    <id>https://eclatant.io/2018/04/22/Codility7/</id>
    <published>2018-04-21T15:00:00.000Z</published>
    <updated>2018-05-02T15:18:42.860Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>문제 앞에 * 이 붙어있으면 어려웠던 문제이다</p></blockquote><p>이 글은 해답은 보고 싶지 않고, 문제 풀이는 막혀서 힌트만 받고 싶은 (아래 문제들을 풀 때의 나와 같은) 사람들에게 도움이 되는 것을 목표로 작성하였다</p><h2 id="Prefix-Sums"><a href="#Prefix-Sums" class="headerlink" title="Prefix Sums"></a>Prefix Sums</h2><h3 id="CountDiv"><a href="#CountDiv" class="headerlink" title="CountDiv"></a><a href="https://app.codility.com/programmers/lessons/5-prefix_sums/count_div/" target="_blank" rel="noopener">CountDiv</a></h3><p>문제에서 요구하는 시간복잡도가 O(1)이므로 loop 없이 식을 거치면 바로 결과를 반환할 수 있어야 한다</p><p>실제 문제 난이도에 비해서 한참 헤매었던 문제인데, <strong>나눗셈</strong>의 의미를 생각해보고 <strong>케이스 분류</strong>만 잘 하면 쉬운 문제이다</p><p><a href="https://app.codility.com/demo/results/trainingFJEKVX-9DK/" target="_blank" rel="noopener">내 코드</a></p><hr><h3 id="PassingCars"><a href="#PassingCars" class="headerlink" title="PassingCars"></a><a href="https://app.codility.com/programmers/lessons/5-prefix_sums/passing_cars/" target="_blank" rel="noopener">PassingCars</a></h3><p>문제에서 요구하는 시간복잡도가 O(N)이므로 한 번의 loop만으로 문제를 해결해야 한다</p><p>따라서 <strong>stack</strong>을 활용해야 했다</p><p><a href="https://app.codility.com/demo/results/trainingTFAZYA-4ZF/" target="_blank" rel="noopener">내 코드</a></p><hr><h3 id="MinAvgTwoSlice"><a href="#MinAvgTwoSlice" class="headerlink" title="* MinAvgTwoSlice"></a>* <a href="https://app.codility.com/programmers/lessons/5-prefix_sums/min_avg_two_slice/" target="_blank" rel="noopener">MinAvgTwoSlice</a></h3><p>문제에서 요구하는 시간복잡도가 O(N)이므로 <strong>최소값을 기록 및 대조</strong>하면서 loop를 순회해야 한다</p><p>이 문제에서 원하는 <strong>부분집합은 2개 또는 3개로 모두 설명될 수 있다</strong>는 점도 중요했다</p><p><a href="https://app.codility.com/demo/results/trainingSZNUV4-SX8/" target="_blank" rel="noopener">내 코드</a></p><hr><h3 id="GenomicRangeQuery"><a href="#GenomicRangeQuery" class="headerlink" title="* GenomicRangeQuery"></a>* <a href="https://app.codility.com/programmers/lessons/5-prefix_sums/genomic_range_query/" target="_blank" rel="noopener">GenomicRangeQuery</a></h3><p>문제에서 요구하는 시간복잡도가 O(N+M)이므로, <strong>중복되지 않는 두 번의 loop</strong>를 사용해야 한다</p><p>Input의 구간이 어떻게 올지 모르는 상태에서 해당 구간의 최소값을 구할 수 있어야 하므로, 한 번의 loop를 통해 기록을 해두어야 한다</p><p>또한 나머지 한 번의 루프를 통해 각각의 기록들을 비교하여 답을 내야 한다다</p><p><a href="https://app.codility.com/demo/results/trainingXD537B-EQJ/" target="_blank" rel="noopener">내 코드</a></p><hr><h2 id="Sorting"><a href="#Sorting" class="headerlink" title="Sorting"></a>Sorting</h2><h3 id="Triangle"><a href="#Triangle" class="headerlink" title="Triangle"></a><a href="https://app.codility.com/programmers/lessons/6-sorting/triangle/" target="_blank" rel="noopener">Triangle</a></h3><p><a href="https://app.codility.com/demo/results/trainingDJRKKY-XQP/" target="_blank" rel="noopener">내 코드</a></p><h3 id="Distinct"><a href="#Distinct" class="headerlink" title="Distinct"></a><a href="https://app.codility.com/programmers/lessons/6-sorting/distinct/" target="_blank" rel="noopener">Distinct</a></h3><p><a href="https://app.codility.com/demo/results/trainingNEVMH3-VN6/" target="_blank" rel="noopener">내 코드</a></p><p>설명할 필요가 없는 문제들이다</p><hr><h3 id="MaxProductOfThree"><a href="#MaxProductOfThree" class="headerlink" title="MaxProductOfThree"></a><a href="https://app.codility.com/programmers/lessons/6-sorting/max_product_of_three/" target="_blank" rel="noopener">MaxProductOfThree</a></h3><p>Input되는 배열의 각 요소별 조건이 무엇인지만 유념하면 되는 문제</p><p><a href="https://app.codility.com/demo/results/training4QFT9V-QVH/" target="_blank" rel="noopener">내 코드</a></p><hr><h3 id="NumberOfDiscIntersections"><a href="#NumberOfDiscIntersections" class="headerlink" title="* NumberOfDiscIntersections"></a>* <a href="https://app.codility.com/programmers/lessons/6-sorting/number_of_disc_intersections/" target="_blank" rel="noopener">NumberOfDiscIntersections</a></h3><p>우선 접점의 정의를 정확히 찾아보고 시작해야 한다</p><p><strong>stack</strong>을 활용하면 풀 수 있다, 또한 X좌표와 시작지점인지 여부를 동시에 표시해야 하므로 배열을 활용하면 좋다</p><p>인터넷에 범위를 점점 줄여나가는 이중 loop로 푸는 해답이 많은데,<br>문제에서 요구하는 시간복잡도가 O(N*log(N))이므로<br>stack을 활용하는 방향이 더 좋은 것 같다고 생각한다</p><p><a href="https://app.codility.com/demo/results/trainingCQ83SA-5QJ/" target="_blank" rel="noopener">내 코드</a></p><hr><h2 id="Stacks-and-Queues"><a href="#Stacks-and-Queues" class="headerlink" title="Stacks and Queues"></a>Stacks and Queues</h2><h3 id="StoneWall"><a href="#StoneWall" class="headerlink" title="StoneWall"></a><a href="https://app.codility.com/programmers/lessons/7-stacks_and_queues/stone_wall/" target="_blank" rel="noopener">StoneWall</a></h3><p><a href="https://app.codility.com/demo/results/training3C9PXC-NGU/" target="_blank" rel="noopener">내 코드</a></p><h3 id="Brackets"><a href="#Brackets" class="headerlink" title="Brackets"></a><a href="https://app.codility.com/programmers/lessons/7-stacks_and_queues/brackets/" target="_blank" rel="noopener">Brackets</a></h3><p><a href="https://app.codility.com/demo/results/training7WVQ6J-PCQ/" target="_blank" rel="noopener">내 코드</a></p><h3 id="Fish"><a href="#Fish" class="headerlink" title="Fish"></a><a href="https://app.codility.com/programmers/lessons/7-stacks_and_queues/fish/" target="_blank" rel="noopener">Fish</a></h3><p><a href="https://app.codility.com/demo/results/trainingT4DR4Q-YGN/" target="_blank" rel="noopener">내 코드</a></p><h3 id="Nesting"><a href="#Nesting" class="headerlink" title="Nesting"></a><a href="https://app.codility.com/programmers/lessons/7-stacks_and_queues/nesting/" target="_blank" rel="noopener">Nesting</a></h3><p><a href="https://app.codility.com/demo/results/training4W8H2J-F3F/" target="_blank" rel="noopener">내 코드</a></p><p>전형적인 stack 활용 문제들이다</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;문제 앞에 * 이 붙어있으면 어려웠던 문제이다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이 글은 해답은 보고 싶지 않고, 문제 풀이는 막혀서 힌트만 받고 싶은 (아래 문제들을 풀 때의 나와 같은) 사람들에게 도움이 되는 것을 
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://eclatant.io/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://eclatant.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>React Fundamental</title>
    <link href="https://eclatant.io/2018/04/22/React-Fundamental/"/>
    <id>https://eclatant.io/2018/04/22/React-Fundamental/</id>
    <published>2018-04-21T15:00:00.000Z</published>
    <updated>2018-05-02T15:18:59.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Why-React"><a href="#Why-React" class="headerlink" title="Why React?"></a>Why React?</h1><p>Composition Model</p><ul><li>A good function should follow the “Do One Thing” rule</li><li>When you combine these simple functions together to form a more complex function, this is <strong>composition</strong>.</li><li><a href="https://www.linkedin.com/pulse/compose-me-function-composition-javascript-kevin-greene/" target="_blank" rel="noopener">Compose me That: Function Composition in JavaScript</a></li><li><a href="https://hackernoon.com/javascript-functional-composition-for-every-day-use-22421ef65a10" target="_blank" rel="noopener">Functional JavaScript: Function lComposition For Every Day Use.</a></li></ul><p>Declarative Code</p><ul><li>When JavaScript code is written <em>imperatively</em>, we tell JavaScript exactly <strong>what</strong> to do and <strong>how</strong> to do it. Think of it as if we’re giving JavaScript <em>commands</em> on exactly what steps it should take.</li><li>we <em>declare</em> what we want done, and JavaScript will take care of doing it.</li><li><em>Imperative</em> code instructs JavaScript on <em>how</em> it should perform each step. With <em>declarative</em> code, we tell JavaScript <em>what</em> we want to be done, and let JavaScript take care of performing the steps.</li><li><a href="https://tylermcginnis.com/imperative-vs-declarative-programming/" target="_blank" rel="noopener">Imperative vs Declarative Programming</a></li><li><a href="https://stackoverflow.com/questions/33655534/difference-between-declarative-and-imperative-in-react-js" target="_blank" rel="noopener">Difference between declarative and imperative in React.js?</a> from StackOverflow</li></ul><p>Unidirectional Data Flow</p><ul><li><em>Data flows down from parent component to child component. Data updates are sent to the parent component where the parent performs the actual change.</em> this might seem like extra work, but having the data flow in one direction and having one place where the data is modified makes it much easier to understand how the application works.</li><li>In React, data flows in only one direction, from parent to child. If data is shared between sibling child components, then the data should be stored in the parent component and passed to both of the child components that need it.</li></ul><p>Just JavaScript</p><ul><li>Why not look through some of your existing code and try converting your <code>for</code> loops to <code>.map()</code> calls or see if you can remove any <code>if</code> statements by using <code>.filter()</code>.</li></ul><h1 id="Rendering-UI-with-React"><a href="#Rendering-UI-with-React" class="headerlink" title="Rendering UI with React"></a>Rendering UI with React</h1><p>Creating Elements and JSX</p><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">React.createElement( <span class="comment">/* type */</span>, <span class="comment">/* props */</span>, <span class="comment">/* content */</span> );</span><br></pre></td></tr></table></figure></li><li><p>Let’s break down what each item can be:</p><ul><li><p><code>type</code> – either a string or a React Component</p><p>This can be a string of any existing HTML element (e.g. <code>&#39;p&#39;</code>, <code>&#39;span&#39;</code>, or <code>&#39;header&#39;</code>) or you could pass a React <em>component</em> (we’ll be creating components with JSX, in just a moment).</p></li></ul></li></ul><ul><li><p><code>props</code> – either <code>null</code> or an object</p><p>This is an object of HTML attributes and custom data about the element.</p></li></ul><ul><li><p><code>content</code> – <code>null</code>, a string, a React Element, or a React Component</p><p>Anything that you pass here will be the content of the rendered element. This can include plain text, JavaScript code, other React elements, etc.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Why-React&quot;&gt;&lt;a href=&quot;#Why-React&quot; class=&quot;headerlink&quot; title=&quot;Why React?&quot;&gt;&lt;/a&gt;Why React?&lt;/h1&gt;&lt;p&gt;Composition Model&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A good fu
      
    
    </summary>
    
      <category term="React" scheme="https://eclatant.io/categories/React/"/>
    
    
      <category term="React" scheme="https://eclatant.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Codility ~4</title>
    <link href="https://eclatant.io/2018/03/13/Codility4/"/>
    <id>https://eclatant.io/2018/03/13/Codility4/</id>
    <published>2018-03-12T15:00:00.000Z</published>
    <updated>2018-05-02T15:18:39.994Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>문제 앞에 * 이 붙어있으면 어려웠던 문제이다</p></blockquote><h2 id="Iterations"><a href="#Iterations" class="headerlink" title="Iterations"></a>Iterations</h2><h3 id="BinaryGap"><a href="#BinaryGap" class="headerlink" title="BinaryGap"></a><a href="https://app.codility.com/programmers/lessons/1-iterations/binary_gap/" target="_blank" rel="noopener">BinaryGap</a></h3><p>문제에서 요구하는 시간복잡도 O(log(N))</p><p>=&gt; 이진탐색과 같이, 거듭 2로 나누어서 정답을 구하는 과정이겠구나 라고 예상해볼 수 있다.</p><p>2진수 구하는 방법을 기본적으로 익히고 있어야 할 것 같다.</p><p>관련해서 떠오른 글</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Frank Hyunsok Oh</span><br><span class="line"></span><br><span class="line">학습 효율을 위해서는 기본적인 언어와 라이브러리 기능 숙지 외에 대충 3가지 층위의 연습이 필요한 것 같습니다.</span><br><span class="line"></span><br><span class="line">- 기본적으로 해당 언어에서 자주 발생하는 간단한 과업을 처리할 때 사용하는 숙어를 숙지하는 연습.</span><br><span class="line"></span><br><span class="line">예를 들어 C에서 정수 스왑시 a ^= b; b ^= a; a ^= b; 라던지 1중 또는 2중, 3중 for루프를 돌려가면서 삼각형을 그린다던지,</span><br><span class="line"></span><br><span class="line">실수를 정수화하는 여러가지 방법이라던지.. 이런 자잘한 숙어를 익혀두고 연습할 수 있는 교재나 도구가 필요한 것 같습니다.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 여러 숙어를 엮어서 함수(또는 메소드와 객체)를 만들고 이를 엮어서 한가지 API를 제공하는 독립된 단위(모듈이라고 불러도 좋고)을 만드는 연습</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 여러 모듈을 조합해 원하는 목표를 달성하는 애플리케이션을 만드는 연습.</span><br><span class="line"></span><br><span class="line">게임도 좋고 개밥 먹기를 위한 간단한 유틸리티도 좋고, 책에서 본 예제를 자신의 방식으로 만들어 보는 것도 좋죠.</span><br><span class="line"></span><br><span class="line">요구사항을 추출하고 거기서 프로그램을 설계하고 코딩하는 과정과 그 과정에서 프로젝트 진행과 품질을 관리하고 디버깅하는 경험을 쌓아야 합니다.</span><br></pre></td></tr></table></figure><hr><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><h3 id="CyclicRotation"><a href="#CyclicRotation" class="headerlink" title="CyclicRotation"></a><a href="https://app.codility.com/programmers/lessons/2-arrays/cyclic_rotation/" target="_blank" rel="noopener">CyclicRotation</a></h3><p>배열에 대한 입출력 메소드를 알고 있는가?</p><p>unshift : 배열의 맨 앞에 데이터를 추가하고 길이를 반환</p><p>shift : 배열의 맨 앞 데이터를 제거하고 제거된 값, 빈 배열이면 undefined를 반환</p><p>push : 배열의 맨 끝에 데이터를 추가하고, 길이를 반환</p><p>pop : 배열의 맨 끝 데이터를 제거하고, 제거된 값, 빈 배열이면 undefined를 반환</p><h3 id="OddOccurrencesInArray"><a href="#OddOccurrencesInArray" class="headerlink" title="OddOccurrencesInArray"></a><a href="https://app.codility.com/programmers/lessons/2-arrays/odd_occurrences_in_array/" target="_blank" rel="noopener">OddOccurrencesInArray</a></h3><p>문제에서 요구하는 시간복잡도 O(N)</p><p>M * N일 수는 있지만 결국은 순회할 때 그 안에서 for문을 하는 등의 작업은 불가능</p><p>즉 순회 과정에서 기존에 나왔던 숫자인지 비교하기 위한 로직을 O(1)로 구현할 수 있어야 함</p><p>그러기 위해선 그 전에 나왔던 숫자에 대해 저장해놓는 과정이 필요하니, 이것을 Dictionary 형태를 활용해서 구현</p><p>(배열 형태로 만들게 되면 배열에서 해당 값이 저장되어있는 위치를 찾기 위해 순회하는 과정이 필요하게 되므로 O(1)이 성립하지 않게 됨)</p><h3 id="TapeEquilibrium"><a href="#TapeEquilibrium" class="headerlink" title="TapeEquilibrium"></a><a href="https://app.codility.com/programmers/lessons/3-time_complexity/tape_equilibrium/" target="_blank" rel="noopener">TapeEquilibrium</a></h3><p>문제에서 요구하는 시간복잡도 O(N)</p><p>2-2가 그랬듯이, left와 right를 순회시마다 구할 수는 없음</p><p>따라서 순회시마다 변화하는 값을 통해 비교할 수 있어야 함</p><p>여기서는 정방향으로 순회시에 순회 때마다 우측에 있던 값이 좌측으로 옮겨가는 구조이므로</p><p>순회시마다 값을 좌측에 더하고, 우측에서 빼고 문제에서 차의 절대값의 크기를 구해야 함</p><p>이때도 가장 작은 값을 찾기 위해선 기존에 저장해놓은 차이값과 비교해서 더 작으면 덮어쓰고 아니면 Pass하는 방식으로 진행 필요</p><hr><h2 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity"></a>Time Complexity</h2><h3 id="PermMissingElem"><a href="#PermMissingElem" class="headerlink" title="PermMissingElem"></a><a href="https://app.codility.com/programmers/lessons/3-time_complexity/perm_missing_elem/" target="_blank" rel="noopener">PermMissingElem</a></h3><p>문제에서 요구하는 시간복잡도 O(N)</p><p>원래 나올 수 있는 숫자를 모두 만들어놓고 없애가면서 남아있는 숫자를 보여주고,</p><p>제한사항에 있는 예외사항([]) 등을 처리하는 방식도 가능하지만,</p><p>문제의 데이터가 모두 숫자이고, 누락된 하나의 값을 찾는다는 점에서 차를 통해서 구하는 것도 가능합니다</p><hr><h2 id="Counting-Elements"><a href="#Counting-Elements" class="headerlink" title="Counting Elements"></a>Counting Elements</h2><h3 id="FrogRiverOne"><a href="#FrogRiverOne" class="headerlink" title="FrogRiverOne"></a><a href="https://app.codility.com/programmers/lessons/4-counting_elements/frog_river_one/" target="_blank" rel="noopener">FrogRiverOne</a></h3><p>문제에서 요구하는 시간복잡도 O(N)</p><p>X값을 통해 채워져야 할 모든 숫자 값을 미리 배열에 담아놓고, 숫자가 나올 때마다 count를 해서, X값과 같은 값이 나오면 리턴해주고 끝까지 나오지 않는다면 -1</p><h3 id="MissingInteger-PermCheck"><a href="#MissingInteger-PermCheck" class="headerlink" title="MissingInteger / PermCheck"></a><a href="https://app.codility.com/programmers/lessons/4-counting_elements/missing_integer/" target="_blank" rel="noopener">MissingInteger</a> / <a href="https://app.codility.com/programmers/lessons/4-counting_elements/perm_check/" target="_blank" rel="noopener">PermCheck</a></h3><p>앞선 문제들과 동일한 패턴으로 풀 수 있는 문제이다.</p><h3 id="MaxCounters"><a href="#MaxCounters" class="headerlink" title="* MaxCounters"></a>* <a href="https://app.codility.com/programmers/lessons/4-counting_elements/max_counters/" target="_blank" rel="noopener">MaxCounters</a></h3><p>앞 문제들과 비슷하지만, 조금 더 복잡한 문제이다.</p><p>숫자들에 대해서 재평가가 필요할 때까지 평가를 미뤄두고, 재평가가 되어야 할 때 미리 저장해놓은 값과 비교하여 평가해야 한다</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;문제 앞에 * 이 붙어있으면 어려웠던 문제이다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Iterations&quot;&gt;&lt;a href=&quot;#Iterations&quot; class=&quot;headerlink&quot; title=&quot;Iterations&quot;&gt;
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://eclatant.io/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://eclatant.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>빅오표기법</title>
    <link href="https://eclatant.io/2018/03/12/BigO/"/>
    <id>https://eclatant.io/2018/03/12/BigO/</id>
    <published>2018-03-11T15:00:00.000Z</published>
    <updated>2018-05-02T15:18:32.389Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.youtube.com/watch?v=6Iq5iMCVsXA" target="_blank" rel="noopener">빅오(Big-O)표기법 완전정복</a></p><p><img src="http://www.jidum.com/upload/ckeditor/2016/09/2016090909541455.jpg" alt="img"></p><p>알고리즘의 성능을 수학적으로 표시해주는 표기법</p><p>실제 수행시간보다는 데이터의 증가에 따른 증가량을 예측하는 것에 목적을 두므로 상수는 모두 버린다</p><table><thead><tr><th>BigO</th><th>설명</th></tr></thead><tbody><tr><td>O(1)</td><td>입력 데이터와 무관하게 일정한 시간이 소요됨</td></tr><tr><td>O(N)</td><td>입력 데이터에 비례해서 처리시간이 소요됨</td></tr><tr><td>O(N^2)</td><td>N개의 데이터를 받으면 각각의 아이템마다 N번의 연산을 수행함</td></tr><tr><td>O(NM)</td><td>N과 M의 변수가 다르다면 N^2과는 분명하게 차이가 존재함, 증가에 따른 변화율은 N^2과 동일</td></tr><tr><td>O(N^3)</td><td>데이터의 증가에 따라 더 급격한 증가</td></tr><tr><td>O(2^N)</td><td>피보나치 수열, N^3보다도 현저한 증가</td></tr><tr><td>O(logN)</td><td>이진검색이 대표적 사례</td></tr><tr><td>O(sqrt(N))</td><td>정사각형을 만들어서 맨 위의 한 줄이 제곱근</td></tr></tbody></table><p>피보나치 나선형</p><p><img src="http://roulettegeeks.com/wp-content/uploads/2015/09/Fibonacci-Roulette-System.jpg" alt="img"></p><p>상수는 과감히 버린다, 상수는 데이터의 증가에 대해 상수만큼만 영향을 미치므로 증가하지 않는 숫자는 무시한다</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=6Iq5iMCVsXA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;빅오(Big-O)표기법 완전정복&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.ji
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://eclatant.io/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://eclatant.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>React 입문</title>
    <link href="https://eclatant.io/2018/03/07/React-Intro/"/>
    <id>https://eclatant.io/2018/03/07/React-Intro/</id>
    <published>2018-03-06T15:00:00.000Z</published>
    <updated>2018-05-02T15:19:05.239Z</updated>
    
    <content type="html"><![CDATA[<p>미리 밝히자면 아래 내용은 결과론적일 수 있고, 필자의 개인적인 추측들이 담겨있으며, 마지막으로 필자는 Angular 또는 Vue로 프로젝트를 해본 경험이 전혀 없습니다.</p><hr><p>React는 Anti-Angular 목적이 담긴 라이브러리였다고 생각합니다.</p><p>예전에는 React에서 내세웠던 3가지 가치가 아래와 같았습니다.</p><p><code>Just the UI</code>, <code>Virtual DOM</code>, <code>Data Flow</code></p><p>첫 번째 내세운 가치인 Just the UI 는, Angular가 풀려는 문제가 매우 크고 그에 따른 해결책도 복잡했기에, React는 매우 단순하며 쉬운 <code>라이브러리</code>라는 점을 대단히 강조하고 싶었던 것 같습니다.</p><p>두 번째인 Virtual DOM은 Angular가 Digest Loop를 통해 변경사항을 반영했다면, React는 Virtual DOM을 통해서 효과적으로 Diff를 반영한다는 것을 내세우고 싶었던 것 같습니다.</p><p>마지막으로 Data Flow 역시 Angular는 Model-View 간의 양방향 바인딩을 지원했던 것에 비해, React는 단방향으로 Data의 변화를 View에 반영시키는 점도 Angular의 복잡성에 대한 차별성으로 나온 것이 아닐까 싶습니다.</p><p>최근에 React 공식 사이트가 Gatsby로 개편되면서 내용에도 일부 변화가 있었는데, 내세우는 3가지 가치가 아래와 같이 바뀌었습니다.</p><p><code>Declarative</code>, <code>Component-Based</code>, <code>Learn Once, Write Anywhere</code></p><p>첫 번째에서 말하는, 선언적인 View가 가능하다는 점은 제가 생각하는 React의 가장 큰 장점입니다.</p><p>Vanila나 jQuery로 개발했다면, Event Listener를 Delegation해놓고, 해당하는 Event Handler를 절차적으로 작성하여 User Interaction 또는 Data의 변화에 따른 View 수정을 했어야 했을 것입니다.</p><p>그에 비해서 React는 Component에 작성해놓은 방향대로 변화(User Interaction, Data Change)가 View에 반영되도록 돕습니다.</p><p>두 번째에서 말하는 Component는 굳이 언급이 필요했는지에 대해 잘 모르겠습니다. (React의 고유한 특징이라고 보기는 어려우므로) 오히려 하단에 적혀있는 아래 문구에 좀 더 방점이 찍혀있는 것인가 싶습니다.</p><blockquote><p>Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep state out of the DOM.</p></blockquote><p>마지막으로 Learn Once, Write Anywhere 역시 의미를 알기 어려웠는데, React Native 또는 React VR 등을 염두해두고 작성한 것인가 싶습니다.</p><p>어떤 라이브러리나 프레임워크를 사용할지 여부를 판단하기 위해 꼭 참고해야 할 Marketing Copy를 기준으로 React를 돌아보았습니다. 제가 알지 못하는 뒷배경들이 많겠지만, 적어도 제게는 예전 문구들이 훨씬 더 매력적이었던 것 같습니다.</p><p>실제로 React를 사용하기 위해선 Props, State, setState, Presentation Component, Container Component, Life Cycle, State Management, CRA, Webpack, SSR 등 알아야 할 것들이 많지만 해당 요소들은 다른 글을 통해 알아보기로 하겠습니다.</p><p>글에 대한 피드백은 언제든 환영합니다! :D</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;미리 밝히자면 아래 내용은 결과론적일 수 있고, 필자의 개인적인 추측들이 담겨있으며, 마지막으로 필자는 Angular 또는 Vue로 프로젝트를 해본 경험이 전혀 없습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;React는 Anti-Angular 목적이 담긴 라이
      
    
    </summary>
    
      <category term="React" scheme="https://eclatant.io/categories/React/"/>
    
    
      <category term="React" scheme="https://eclatant.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>파이썬 기초</title>
    <link href="https://eclatant.io/2018/03/07/Python-Basic/"/>
    <id>https://eclatant.io/2018/03/07/Python-Basic/</id>
    <published>2018-03-06T15:00:00.000Z</published>
    <updated>2018-05-02T15:18:57.292Z</updated>
    
    <content type="html"><![CDATA[<p>1일차</p><ul><li>자료형</li><li>제어문</li><li>입력과 출력</li><li>함수</li><li>PEP8</li></ul><h5 id="자료형과-자료구조는-무엇이-다른가"><a href="#자료형과-자료구조는-무엇이-다른가" class="headerlink" title="자료형과 자료구조는 무엇이 다른가?"></a>자료형과 자료구조는 무엇이 다른가?</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">자료형 = Data Type / 프리미티브 타입(파이썬에서 이미 구현이 완료되어있는 애들) / 숫자, 문자, 리스트, 튜플, 딕셔너리, 셋 등</span><br><span class="line">자료구조 = Data Structure / 데이터를 저장하는 방식 / 배열, 집합, 키-값 등</span><br><span class="line">자료구조중 일부들이 자료형으로 이미 구현되어있음</span><br><span class="line">배열 = 리스트, 집합 = 셋, 키-값 = 딕셔너리</span><br><span class="line">그 언어는 어떤 자료형을 제공하고 있는지를 이해하는 것이 매우 중요합니다</span><br><span class="line">또한 컴퓨터 분야 전반에서는 어떤 자료구조를 쓰고 있는가 에 대한 파악하는 것이 매우 중요하다</span><br></pre></td></tr></table></figure><h5 id="자료형"><a href="#자료형" class="headerlink" title="자료형"></a>자료형</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Number : 정수, 실수, 복소수, 8진수, 16진수 등</span><br><span class="line">String : 문자 또는 문자열</span><br><span class="line">List : 순서가 있는 여러 요소들의 모음</span><br><span class="line">Tuple : 리스트와 동일하지만, 불변</span><br><span class="line">Dict : 키와 값이 연결되어있는 구조</span><br><span class="line">Set : 순서가 없는 유니크 element들의 모음</span><br><span class="line">Boolean : 참 또는 거짓</span><br></pre></td></tr></table></figure><h5 id="파이썬-연산"><a href="#파이썬-연산" class="headerlink" title="파이썬 연산"></a>파이썬 연산</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a += <span class="number">1</span>   <span class="comment"># a에 1을 더해서 a에 할당</span></span><br><span class="line">a ** <span class="number">2</span>   <span class="comment"># a^2</span></span><br><span class="line"><span class="number">14</span> // <span class="number">3</span>  <span class="comment"># 몫</span></span><br><span class="line"><span class="number">14</span> % <span class="number">3</span>   <span class="comment"># 나머지</span></span><br></pre></td></tr></table></figure><ul><li>자료형<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 변수명은 소문자</span></span><br><span class="line"><span class="comment"># room_size = Under Line / roomSize = CamelCase</span></span><br><span class="line"><span class="comment"># 파이썬에서는 변수명으로 무조건 Under Line 사용</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># type(변수명) : 변수의 타입을 알려준다</span></span><br><span class="line"><span class="comment"># int(변수명) : 변수의 타입을 정수형태로 변경 / list(), set()</span></span><br><span class="line"></span><br><span class="line">animals = [<span class="string">"강아지"</span>, <span class="string">"고양이"</span>, <span class="string">"이구아나"</span>, <span class="string">"물고기"</span>, <span class="string">"참새"</span>]</span><br><span class="line"><span class="comment"># 하나씩 출력을 하다가, index가 2번인 경우 파이썬으로 변경하자</span></span><br><span class="line"><span class="comment"># name[0] : name 변수에서 0번 째만 추출</span></span><br><span class="line"><span class="comment"># name[1:] : 첫 번째부터 맨 끝까지 추출</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 문자열 중간에 변수의 값을 넣는 방법</span></span><br><span class="line"><span class="comment"># https://pyformat.info/</span></span><br><span class="line"></span><br><span class="line"><span class="string">"%s님 안녕하세요."</span> % (<span class="string">"안수찬"</span>)</span><br><span class="line"><span class="string">"&#123;0&#125;님 안녕하세요."</span>.format(‘안수찬’)</span><br><span class="line"><span class="string">"&#123;name&#125;님 안녕하세요."</span>.format(name=<span class="string">"안수찬"</span>)</span><br><span class="line"><span class="string">"안녕하세요. &#123;name&#125; 입니다. 저는 &#123;course&#125; 를 수강하고 있습니다."</span>.format(name=안수찬, course=<span class="string">"데사스"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 주석처리</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># List : 순서가 있는 요소들, 변경 가능</span></span><br><span class="line">animals = [<span class="string">"강아지"</span>, <span class="string">"고양이"</span>, <span class="string">"이구아나"</span>]</span><br><span class="line">animals.append(<span class="string">"물고기"</span>)</span><br><span class="line">animals[<span class="number">0</span>][<span class="number">0</span>] <span class="comment"># 강아지</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Tuple : List와 동일하지만, Element 값이 변경이 될 수 없다</span></span><br><span class="line">width_and_height = (<span class="number">120</span>, <span class="number">240</span>)</span><br><span class="line">width, height = width_and_height</span><br><span class="line">width = <span class="number">120</span></span><br><span class="line">height = <span class="number">240</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set : 집합, 순서가 없고, Unique한 값만 담길 수 있다, 중복 제거용</span></span><br><span class="line">name_set = set([<span class="string">"안수찬"</span>, <span class="string">"안수찬"</span>, <span class="string">"김승현"</span>, <span class="string">"박승권"</span>])</span><br><span class="line">name_set == &#123;‘김승현’, ‘박승권’, ‘안수찬’&#125;</span><br><span class="line"></span><br><span class="line">name_list = [<span class="string">"안수찬"</span>, <span class="string">"안수찬"</span>, <span class="string">"안수찬"</span>, <span class="string">"김승현"</span>, <span class="string">"김승현"</span>, <span class="string">"김승현"</span>, <span class="string">"박준영"</span>, <span class="string">"박준영"</span>, <span class="string">"박준영"</span>]</span><br><span class="line">name_list = list(set(name_list)) <span class="comment"># 파이썬다운 중복을 제거하는 방법이되, 순서를 보장하지는 않음</span></span><br><span class="line">name_list == [‘김승현’, ‘안수찬’, ‘박준영’]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Boolean</span></span><br><span class="line"><span class="keyword">True</span> <span class="keyword">or</span> <span class="keyword">False</span></span><br><span class="line"><span class="comment"># 특정 조건에서 작동하도록 설정할 때, 매우 많이 사용될 것</span></span><br><span class="line"><span class="comment"># &amp; 나 | 보다는 and 또는 or로 쓰는 것이 보다 명시적이다</span></span><br><span class="line"><span class="comment"># and 와 or가 섞여있어야 한다면, 좀 더 직관적인 프로세스를 만들어보거나 ( )로 전후를 구분해줄 것</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dict : 키와 값을 쌍으로 묶은 것, 다른 곳에서는 Dict, Hash, JSON 등으로 쓰임</span></span><br><span class="line"><span class="comment"># :은 키에 붙여야 한다</span></span><br><span class="line"><span class="comment"># 함수 안에 키-밸류 형태로 넣을 때는 띄어쓰기를 하지 않는다</span></span><br><span class="line">detail_dict = &#123;<span class="string">"name"</span>: <span class="string">"안수찬"</span>, <span class="string">"age"</span>: <span class="number">24</span>, <span class="string">"phone number"</span>: <span class="string">"010-1234-5678"</span>&#125;</span><br><span class="line">detail_dict[<span class="string">"age"</span>] == ‘안수찬<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">my_informations = &#123;"name": "dobestan", "phonenumber": "010-1234-5678", "email": "test@gmail.com"&#125;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h5 id="반복문과-제어문"><a href="#반복문과-제어문" class="headerlink" title="반복문과 제어문"></a>반복문과 제어문</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">1</span> &lt; <span class="number">3</span>:</span><br><span class="line">     print(<span class="string">"1이 3보다 작다."</span>)</span><br><span class="line"></span><br><span class="line">a = <span class="number">13</span></span><br><span class="line">b = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &lt; b:</span><br><span class="line">     print(<span class="string">"a(&#123;a&#125;)가 b(&#123;b&#125;)보다 작다."</span>).format(a=a, b=b))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">     print(<span class="string">"a가 b보다 크다."</span>).format(a=a, b=b))</span><br><span class="line">     </span><br><span class="line">animals = [<span class="string">"강아지"</span>, <span class="string">"고양이"</span>, <span class="string">"이구아나"</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="string">"이구아나"</span> <span class="keyword">in</span> animals:</span><br><span class="line"></span><br><span class="line">     print(<span class="string">"이구아나를 키우고 있습니다."</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">     print(<span class="string">"이구아나를 키우고 있지 않습니다."</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 90점 이상은 A</span></span><br><span class="line"><span class="comment"># 60 ~ 90점까지는 B</span></span><br><span class="line"><span class="comment"># 60점 밑으로는 C</span></span><br><span class="line">score = <span class="number">89</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">     print(<span class="string">"A"</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">60</span>:</span><br><span class="line">     print(<span class="string">"B"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">     print(<span class="string">"C"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 제어문 : 특정 조건 또는 반복적으로 코드를 실행</span></span><br><span class="line"><span class="comment"># for : while문보다 통제가 수월하고 직관적이기에 더 선호됨</span></span><br><span class="line"><span class="comment"># for문을 사용할 때 많이 사용할, range라는 내장함수를 제공한다</span></span><br><span class="line">list(range(<span class="number">10</span>)) <span class="comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line">animals = [<span class="string">"강아지"</span>, <span class="string">"고양이"</span>, <span class="string">"참새"</span>, <span class="string">"이구아나"</span>]</span><br><span class="line"><span class="keyword">for</span> animal <span class="keyword">in</span> animals:</span><br><span class="line">     print(<span class="string">"나는 &#123;animal&#125;를 키운다."</span>.format(animal=animal))</span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">     print(<span class="string">"hello world &#123;number&#125;"</span>.format(number=number))</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>): <span class="comment"># 변수를 for문 내에서는 사용하지 않을 때 _ 를 써줌</span></span><br><span class="line">     print(<span class="string">"hello world"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># while : Python에서는 for문을 더 선호함, 덜 직관적이기 때문, 지속적 통제가 요구됨</span></span><br><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="keyword">while</span> age &lt; <span class="number">30</span>:</span><br><span class="line">    print(<span class="string">"20대에 나이를 먹었습니다. 현재 나이 : &#123;age&#125;"</span>.format(age=age))</span><br><span class="line">    age += <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># *</span></span><br><span class="line"><span class="comment"># **</span></span><br><span class="line"><span class="comment"># ***</span></span><br><span class="line"><span class="comment"># ****</span></span><br><span class="line"><span class="comment"># *****</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">     star = <span class="string">""</span></span><br><span class="line">     <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>):</span><br><span class="line">          star += <span class="string">"*"</span></span><br><span class="line">     print(star)</span><br><span class="line"></span><br><span class="line">star = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">     star += <span class="string">"*"</span></span><br><span class="line">     print(star)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">     print(<span class="string">"*"</span> * (i + <span class="number">1</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">별찍기 과제</span><br><span class="line"></span><br><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">    *</span><br><span class="line">   **</span><br><span class="line">  ***</span><br><span class="line"> ****</span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line">****</span><br><span class="line">***</span><br><span class="line">**</span><br><span class="line">*</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"> ****</span><br><span class="line">  ***</span><br><span class="line">   **</span><br><span class="line">    *</span><br><span class="line"></span><br><span class="line"># 별찍기 과제 해답</span><br><span class="line"></span><br><span class="line">for i in range(5):</span><br><span class="line">    print(&quot;*&quot; * (i + 1))</span><br><span class="line"></span><br><span class="line">for i in range(5):</span><br><span class="line">    print(&quot; &quot;* (4 - i) + &quot;*&quot; * (i + 1))</span><br><span class="line"></span><br><span class="line">for i in range(5):</span><br><span class="line">    print(&quot;*&quot; * (5 - i))</span><br><span class="line"></span><br><span class="line">for i in range(5):</span><br><span class="line">    print(&quot; &quot; * i + &quot;*&quot; * (5 - i))</span><br></pre></td></tr></table></figure><h5 id="입력과-출력"><a href="#입력과-출력" class="headerlink" title="입력과 출력"></a>입력과 출력</h5><ul><li>사용자 / 파일 / stdin ( standard input ) / stdout ( standard output )</li></ul><h5 id="사용자로부터-인풋-받기"><a href="#사용자로부터-인풋-받기" class="headerlink" title="사용자로부터 인풋 받기"></a>사용자로부터 인풋 받기</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">username = input(<span class="string">"너의 이름은 뭐니? "</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(input(<span class="string">"별 몇개? "</span>))):</span><br><span class="line">     print(<span class="string">"*"</span> * (i + <span class="number">1</span>))</span><br></pre></td></tr></table></figure><h5 id="Python-3-VS-Python-2"><a href="#Python-3-VS-Python-2" class="headerlink" title="Python 3 VS Python 2"></a>Python 3 VS Python 2</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">Python 3.X =&gt; input (…), print(…)</span><br><span class="line">input은 항상 str으로 정보를 받아온다</span><br><span class="line">Python 2.X =&gt; input을 받은 정보를 파이썬으로 실행하려고 함</span><br><span class="line">TEXT를 받고자 하면 raw_input 을 사용해야 함</span><br><span class="line"></span><br><span class="line">Python 3.X =&gt; print 는 함수 / print(&quot; &quot;)</span><br><span class="line">Python 2.X =&gt; print 는 statement, 출력하는 기능 / print &quot; &quot;</span><br><span class="line"></span><br><span class="line">Unicode is a character set. ( 표준 문자열 집합 )</span><br><span class="line">UTF-8 is an encoding. ( 유니코드를 표현할 수 있는 인코딩 방식 )</span><br><span class="line">Unicode를 표현하는 방식 중 하나가 utf-8</span><br><span class="line">Unicode를 encoding하는 방식이 utf-8</span><br><span class="line">utf-8을 decode하면 Unicode</span><br><span class="line">한글은 일반적으로 UTF-8 or EUC-KR ( 거의 대부분은 UTF-8 사용 )</span><br><span class="line"></span><br><span class="line">Python 2.X =&gt; 기본 인코딩이 ascii여서 한글 작성시에 문제가 발생</span><br><span class="line">그래서 아래와 같이 붙여놔야 함</span><br><span class="line">-*- coding: utf-8 -*-</span><br><span class="line">( 위 문장이 추가되면 읽을 때 str이 utf-8로 인코딩되었다고 인지한다 )</span><br><span class="line"></span><br><span class="line">하지만 위 문장이 있다고 해서 decode, encode하는 과정에서의 default setting이 ascii가 아니게 되는 것은 아니므로 아무런 옵션 지정없이 decode, encode를 하게 되면 ascii 방식으로 인코딩되어서 에러가 발생하게 된다</span><br><span class="line"></span><br><span class="line">( 파이썬에서는 문자열을 표현할 수 있는 str, unicode 타입을 제공한다 )</span><br><span class="line">print(type(&apos;한글&apos;)) =&gt; str</span><br><span class="line">print(type(u&apos;한글&apos;)) =&gt; unicode</span><br><span class="line"></span><br><span class="line">에러 예시: print str(unicode(&quot;한글&quot;))</span><br><span class="line">참 예시: print &quot;한글&quot;.decode(&quot;utf8&quot;) =&gt; unicode</span><br><span class="line">참 예시: print &quot;한글&quot;.decode(&quot;utf8&quot;).encode(&quot;utf8&quot;) =&gt; str</span><br><span class="line"></span><br><span class="line">unicode로 인코딩 되어있으면 str으로 저장됨</span><br><span class="line">unicode로 인코딩 되어있지 않으면 unicode로 저장됨</span><br><span class="line">(하지만 unicode를 print 할 때는 자동적으로 utf-8로 변환함)</span><br><span class="line"></span><br><span class="line">다른 사람들이 작성한 파일을 쓸 때는, Python 기본 인코딩을 ascii에서 utf8로 변경해주면 된다</span><br><span class="line">import sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(&apos;utf-8&apos;)</span><br><span class="line"></span><br><span class="line">Python 2.X 에서 한글 문제 없이 사용하기</span><br><span class="line">1. 파일 상단에 -*- coding: utf-8 -*- 명시</span><br><span class="line">2. 파이썬 스크립트 내에서는 반드시 unicode 로 변경해서 사용</span><br><span class="line">3. 외부 파일을 읽거나 쓸 때는 str 로 변경해서 읽거나 쓴다</span><br><span class="line">4. 외부 라이브러리를 쓸 떄는 setdefaultencoding 을 사용해서 기본적으로 utf-8 사용</span><br><span class="line"></span><br><span class="line">Python 3.X 는 모든 문자열이 unicode 이기에 인코딩에 대해 고민할 필요없음</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Indent로 포함관계 구분</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(animals)):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">2</span>:</span><br><span class="line">        animals[<span class="number">2</span>] = <span class="string">"파이썬"</span></span><br><span class="line">    print(animals[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> animal <span class="keyword">in</span> animals:</span><br><span class="line">    index = animals.index(animal)</span><br><span class="line">    <span class="keyword">if</span> index == <span class="number">2</span>:</span><br><span class="line">        animals[index] = <span class="string">"파이썬"</span></span><br><span class="line">    print(animals[index])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, _ <span class="keyword">in</span> enumerate(animals):</span><br><span class="line">    <span class="keyword">if</span> index == <span class="number">2</span>:</span><br><span class="line">        animals[index] = <span class="string">"파이썬"</span></span><br><span class="line">    print(animals[index])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> my_information <span class="keyword">in</span> my_informations:</span><br><span class="line">    print(my_information)</span><br><span class="line">    print(my_informations[my_information])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> my_information <span class="keyword">in</span> my_informations.items():</span><br><span class="line">    print(my_information) <span class="comment"># Tuple</span></span><br><span class="line">    key, value = my_information</span><br><span class="line">    print(key)</span><br><span class="line">    print(value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> my_informations.items():</span><br><span class="line">    print(key)</span><br><span class="line">    print(value)</span><br><span class="line"></span><br><span class="line">my_informations.keys()</span><br></pre></td></tr></table></figure><hr><h5 id="파일-입출력"><a href="#파일-입출력" class="headerlink" title="파일 입출력"></a>파일 입출력</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./ =&gt; 현재 폴더</span></span><br><span class="line"><span class="comment"># ../ =&gt; 상위 폴더</span></span><br><span class="line"><span class="comment"># ./test.txt =&gt; 현재 폴더에 있는 test.txt</span></span><br><span class="line"><span class="comment"># ../test.txt =&gt; 상위 폴더에 있는 test.txt</span></span><br><span class="line"><span class="comment"># ../../test.txt =&gt; 상위 폴더의 상위 폴더에 있는 test.txt</span></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">"../animals.txt"</span>, <span class="string">"r"</span>) <span class="comment"># mode =&gt; "w", "r", "a" ( append )</span></span><br><span class="line"><span class="comment"># f.read() =&gt; 파일의 전체 데이터</span></span><br><span class="line"><span class="comment"># f.readline() =&gt; 실행할 때마다 행이 바뀌어 출력</span></span><br><span class="line"><span class="comment"># f.readlines() =&gt; 각각의 라인별로 구분되어 리스트</span></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">"./animals.txt"</span>, <span class="string">"w"</span>)</span><br><span class="line">f.write(<span class="string">"hello, world"</span>)</span><br><span class="line">f.close</span><br><span class="line"></span><br><span class="line"><span class="comment"># 위와 동일하지만 보다 선호되는 방식</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"./animals.txt"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">"hello, world"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">".stars.txt"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        f.write(<span class="string">"*"</span> * (i + <span class="number">1</span>))</span><br><span class="line">        f.write(<span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure><hr><h4 id="함수"><a href="#함수" class="headerlink" title="함수"></a>함수</h4><ul><li>작업 자동화</li><li>우리가 반복적으로 사용할 어떤 특정 기능들을 재사용 가능한 코드로 작성</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 함수 정의</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span><span class="params">()</span>:</span></span><br><span class="line">    username = input()</span><br><span class="line">    print(<span class="string">"&#123;username&#125;님, 가입을 축하드립니다."</span>.format(username=username))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 함수 실행</span></span><br><span class="line">greeting()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_pretty_star</span><span class="params">(count)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    이 함수는 별찍기 함수입니다.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, count + <span class="number">1</span>):</span><br><span class="line">        print(<span class="string">"*"</span> * (i))</span><br><span class="line"><span class="comment"># """ multi-line """ 로 내용을 적어두면 Docstring에 반영됨</span></span><br><span class="line"></span><br><span class="line">print_pretty_star(<span class="number">5</span>)</span><br><span class="line">print_pretty_star(int(input(<span class="string">"Count?"</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 함수 내에 return은 함수가 반환하는 결과값을 의미 + 그 순간 함수는 종료</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 함수에 어떤 숫자를 입력했을 때, 그 이하의 소수를 출력해주는 함수</span></span><br><span class="line"><span class="comment"># 수업 전에 내가 짠 코드</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_prime_numbers</span><span class="params">(number)</span>:</span></span><br><span class="line">    prime_numbers = []</span><br><span class="line">    <span class="keyword">if</span> number &lt;= <span class="number">1</span>:</span><br><span class="line">        print(<span class="string">"소수가 없습니다."</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, number + <span class="number">1</span>):</span><br><span class="line">            bool = <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>, i):</span><br><span class="line">                <span class="keyword">if</span> i % j == <span class="number">0</span> <span class="keyword">and</span> i != j:</span><br><span class="line">                    bool = <span class="keyword">False</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> bool == <span class="keyword">True</span>:</span><br><span class="line">                prime_numbers.append(i)</span><br><span class="line">        print(prime_numbers)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 수업 코드</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1차</span></span><br><span class="line"><span class="comment"># 우선 한 번에 모든 기능을 구현하는 것은 복잡하니,</span></span><br><span class="line"><span class="comment"># 각각의 과정들을 기능별로 나누어서 접근하라</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 각각의 숫자의 소수여부를 검사해서 =&gt; is_prime</span></span><br><span class="line"><span class="comment"># 소수면 리스트에 추가하고 최종적으로는 리스트를 출력 =&gt; get_prime_numbers</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span><span class="params">(number)</span>:</span></span><br><span class="line">    <span class="comment"># 2부터 number-1 까지의 숫자를 각각 체크해본다.</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, number):</span><br><span class="line">        <span class="keyword">if</span> (number % i == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_prime_numbers</span><span class="params">(number)</span>:</span></span><br><span class="line">    prime_numbers = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, number + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> is_prime(i):</span><br><span class="line">            prime_numbers.append(i)</span><br><span class="line">    <span class="keyword">return</span> prime_numbers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 걸린 시간 측정하는 법</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">start_time = time.time()</span><br><span class="line">get_prime_numbers(<span class="number">1000</span>)</span><br><span class="line">end_time = time.time()</span><br><span class="line">print(end_time - start_time)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2차 제곱근까지만 체크( 다른 방법: 홀수만 체크, 2로 나누어 떨어지는 숫자까지 체크 )</span></span><br><span class="line"><span class="comment"># 소수로 확인된 것의 배수를 모두 지우는 방법도 있음 =&gt; 에라토스테네스의 체</span></span><br><span class="line"><span class="comment"># 알고리즘에 대해서는 수학적으로 이미 증명된 것들이 매우 많기 때문에 검색해서 활용해볼 것</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime_optimized</span><span class="params">(number)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, int(number**<span class="number">0.5</span>) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> (number % i == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://goo.gl/N5QltM</span></span><br><span class="line"><span class="comment"># 에라토스테네스의 체 구현 코드</span></span><br><span class="line">    <span class="comment">#결과 값을 저장하는 목록을 미리 생성한다.</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="comment">#전체 범위를 지정한다. : 1은 소수임을 알고 있으므로 제외하고 2부터 수행해야 하지만 초기값은 별도로 생성할 것이므로 3부터 999까지의 범위로 한다.</span></span><br><span class="line">    candidates = range(<span class="number">3</span>,<span class="number">1000</span>)</span><br><span class="line">    <span class="comment">#초기값을 설정한다.</span></span><br><span class="line">    base = <span class="number">2</span></span><br><span class="line">    <span class="comment">#초기값의 배수를 구하기 위한 임시 변수를 생성한다.</span></span><br><span class="line">    product = base</span><br><span class="line"></span><br><span class="line"><span class="comment">#전체 범위 내에서 "에라토스테네스의 체" 알고리즘을 수행한다.</span></span><br><span class="line">    <span class="keyword">while</span> candidates:</span><br><span class="line">        <span class="comment">#임시변수가 1000미만일 때까지 다음을 수행한다.</span></span><br><span class="line">        <span class="keyword">while</span> product &lt; <span class="number">1000</span>:</span><br><span class="line">            <span class="comment">#임시변수가 전체 범위내 존재한다면 :</span></span><br><span class="line">            <span class="keyword">if</span> product <span class="keyword">in</span> candidates:</span><br><span class="line">                <span class="comment">#전체 범위 목록에서 임시변수를 삭제한다.</span></span><br><span class="line">                candidates.remove(product)</span><br><span class="line">            <span class="comment">#임시변수는 기본값의 배수이다.</span></span><br><span class="line">            product = product+base</span><br><span class="line">        <span class="comment">#결과 목록에 기본값을 추가한다.</span></span><br><span class="line">        result.append(base)</span><br><span class="line">        <span class="comment">#다음 기본값은 (이미 걸러진)전체 목록의 첫 번째 값이다. : 1회 걸렀을 경우 2와 2의 배수를 모두 삭제했으므로 3이다.</span></span><br><span class="line">        base = candidates[<span class="number">0</span>]</span><br><span class="line">        <span class="comment">#초기값의 배수를 구하기 위해 임시 변수를 다시 생성한다.</span></span><br><span class="line">        product = base</span><br><span class="line">        <span class="comment">#전체 범위에서 초기값을 제거한다.</span></span><br><span class="line">        <span class="keyword">del</span> candidates[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 범위 내의 마지막 기본값을 결과 목록에 추가한다.</span></span><br><span class="line">    result.append(base)</span><br><span class="line">    <span class="comment">#결과 목록을 화면에 출력한다.</span></span><br><span class="line">    <span class="keyword">print</span> result</span><br></pre></td></tr></table></figure><hr><h5 id="안수찬-선생님의-조언"><a href="#안수찬-선생님의-조언" class="headerlink" title="안수찬 선생님의 조언"></a>안수찬 선생님의 조언</h5><ul><li>생각하면 실행해본다, 실행력이 매우 중요</li><li>개발자 영어는 충분히 할 수 있는 영역</li><li>실력을 늘리는 가장 주요한 방법은 외주개발</li><li>시간을 팔아서 돈을 버는 것을 지양하자</li><li>코드카데미, 팀트리하우스 에서 열심히 수강해보자</li><li>역량을 증명하기 전까지는 후려침을 겪을 수 밖에 없다</li></ul><h5 id="내가-개발자-성향을-가지고-있는가"><a href="#내가-개발자-성향을-가지고-있는가" class="headerlink" title="내가 개발자 성향을 가지고 있는가?"></a>내가 개발자 성향을 가지고 있는가?</h5><ul><li>개발자 성향이란?<ul><li>문제 해결에 대한 집요함 = 문제를 중간에 포기하지 않고 끝까지 해결하려 하는가</li><li>문제해결력 = 상당 부분 연습으로 극복가능</li></ul></li></ul><h5 id="파이썬-관련-추천도서"><a href="#파이썬-관련-추천도서" class="headerlink" title="파이썬 관련 추천도서"></a>파이썬 관련 추천도서</h5><ul><li>깐깐하게 배우는 파이썬</li><li>실전 파이썬 프로그래밍</li><li>Two Scoops of Django</li><li>클린 코드를 위한 테스트 주도 개발</li><li>파이썬 라이브러리를 활용한 데이터 분석 = 데이터 분석이 필요하다면 기본서</li><li>Udemy - Learning Python for Data Analysis and visualization</li></ul><h5 id="왜-파이썬인가"><a href="#왜-파이썬인가" class="headerlink" title="왜 파이썬인가?"></a>왜 파이썬인가?</h5><ul><li>개발을 처음 배우는 이에게 가장 제대로 기본을 다질 수 있는 언어</li><li>파이썬을 완벽히 하는 것이 매우 중요하다, 그래야만 범용적 개발을 해나갈 수 있다</li><li>Pandas는 R스러운 파이썬 패키지</li><li>모든 언어를 익힐 때 가장 먼저 배워야 할 것은 문화이다</li></ul><h5 id="기타-팁"><a href="#기타-팁" class="headerlink" title="기타 팁"></a>기타 팁</h5><ul><li>jupyter 또는 ipython 은 ?변수 라고 입력하면 자세히 안내해준다</li><li>모르는 함수들은 늘 ?를 입력해보는 습관을 들일 것</li><li>Google, Facebook, Jupyter 모두 Vim 단축키들이 작동함</li><li>파이썬은 고수준 작업에 많이 사용되다보니 비트연산을 자주 사용하지는 않음(연산자는 &gt;&gt; or &lt;&lt;)</li><li>= 와 + 은 양쪽을 띄워줘야 한다</li><li>폴더명 등의 자동완성은 이용할만 하지만, 명령어 등은 자동완성하기 보다는 직접 타이핑하는 것을 권한다</li><li>언어의 철학에 따라 변수 지정, 패턴 등이 달라져야 한다</li><li>계속해서 Zen을 떠올리면서 코딩을 해야 한다</li><li>Docker 가상 환경 = 환경만 그렇게 보이도록 한 것, 속도가 빠름</li><li>Parallels = 가상 머신</li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1일차&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;자료형&lt;/li&gt;
&lt;li&gt;제어문&lt;/li&gt;
&lt;li&gt;입력과 출력&lt;/li&gt;
&lt;li&gt;함수&lt;/li&gt;
&lt;li&gt;PEP8&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;자료형과-자료구조는-무엇이-다른가&quot;&gt;&lt;a href=&quot;#자료형과-자료구조는-무
      
    
    </summary>
    
      <category term="Python" scheme="https://eclatant.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://eclatant.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>반대로 하는 법</title>
    <link href="https://eclatant.io/2017/11/05/Contrary/"/>
    <id>https://eclatant.io/2017/11/05/Contrary/</id>
    <published>2017-11-04T15:00:00.000Z</published>
    <updated>2018-05-02T15:18:46.024Z</updated>
    
    <content type="html"><![CDATA[<p>오늘 체형교정 관련한 세션에 다녀왔다.</p><p>강사님의 입담도 매우 좋으셨고, 도움이 되는 여러 가지 얘기들을 많이 들었다.</p><p>그 내용들을 딱 하나로 압축해본다면 <code>평소의 반대로 스트레칭</code>이었다.</p><p>평소에 앞으로 쏠려있는 상체는 뒤로, 우뚝 솟아있는 어깨는 아래로, 앞으로 몰려있는 어깨는 뒤로-</p><p>그러다보면 몸의 균형이 잡히고, 몸을 바르게 쓰게 될 수 있을 것이라 말했다.</p><p>몸만 그러할까? 아니다 그렇지 않다.</p><p>무엇이든 다양한 요구사항과 제한된 환경을 극복하려다보면 모든 것을 만족시킬 수 있는 것은 없는 법이다.</p><p>어느 하나에 치우쳐지면 반드시 트레이드 오프된 다른 하나가 부메랑처럼 돌아온다.</p><p>그러므로 우선순위에 따른 나름의 균형을 맞춰줘야 한다.</p><p>위와 같은 내용을 모르지 않는데, 쉽지 않은 것은 늘 알면서도 평소와 같이 하기 때문은 아닐까.</p><p>그렇다면 관성을 벗어나려면 어떻게 해야 할까? 두 가지가 필요할 것 같다. <code>관찰</code>과 <code>피드백</code></p><p>루틴대로 그냥 쉽게 처리하지 않고, 관찰하려면 의식적인 자각과 그 지루함을 견딜 수 있는 여유가 필요하다.</p><p>의식적인 자각은 의지가 아닌 환경에 따른 장치가 있으면 조금 더 수월하지 않을까?</p><p>그러기 위해서 흔히들 목표를 손으로 적어서 눈에 보이는 곳에 두라고 하는 듯 하다.<br>(개인적인 생각으로는 한국은 환경에 비해 의지와 노오오오력을 너무 강조한다고 생각한다.<br>개인의 실패를 개인에게 떠넘기기 위해서일까.)</p><p>조급함을 견딜 수 있는 여유는 <code>버리는 것</code>에서 오지 않을까?</p><p>사람은 결국 한 번에 하나 밖에 못한다고 생각한다.</p><p>그렇기 때문에 지금 당장 붙잡고 할 수 있는 것 또는 해야 하는 것 외에는 마음 속에서 잠시 감춰둘 수 있는 요령이 필요한 것 같다.</p><p>문제해결이란 결국 한 번에 하나씩 집중적으로 풀어가야 하는 법이니까.</p><p>피드백을 잘 받으려면 어떻게 해야 할까? 이 역시 두 가지가 필요할 것 같다. <code>질문</code>과 <code>변화</code></p><p>질문을 어떻게 해야 하는지 인지한지 얼마 되지 않았다.</p><p>내가 알고 있는 가장 좋은 질문 방법은 질문을 받는 사람이 한 입에 쏙 먹기 좋게끔 아주 간결하게만 던지는 것이다.</p><p>조금만 질문이 길어져도 금방 집중력을 잃고 원래 들을 수 있었던 말조차 듣지 못 하게 될 수 있으니,<br>디테일한 상황을 전달하고 싶은 욕심을 잠시 내려놓고 아주 핵심적인 것만 물어볼 수 있어야 한다.</p><p>또한 피드백이 일회성에 끝나지 않도록 하려면, 그 전 질문에 대한 반응을 잘 반영해야 한다, 그러기 위해서라도 앞의 질문은 많이 할 수가 없다.<br>원래 말을 들은 사람은 기억하지 못해도, 해준 사람은 다 기억하는 법이다.</p><p>위와 같이 하면 조금은 그 전과 반대로 할 수 있지 않을까…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;오늘 체형교정 관련한 세션에 다녀왔다.&lt;/p&gt;
&lt;p&gt;강사님의 입담도 매우 좋으셨고, 도움이 되는 여러 가지 얘기들을 많이 들었다.&lt;/p&gt;
&lt;p&gt;그 내용들을 딱 하나로 압축해본다면 &lt;code&gt;평소의 반대로 스트레칭&lt;/code&gt;이었다.&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="Essay" scheme="https://eclatant.io/categories/Essay/"/>
    
    
      <category term="Essay" scheme="https://eclatant.io/tags/Essay/"/>
    
  </entry>
  
  <entry>
    <title>CodeSquad Blue Level</title>
    <link href="https://eclatant.io/2017/03/13/2017-03-13-Blue/"/>
    <id>https://eclatant.io/2017/03/13/2017-03-13-Blue/</id>
    <published>2017-03-13T01:00:00.000Z</published>
    <updated>2018-10-13T09:09:06.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">&lt;JK&apos;s Intro&gt;</span><br><span class="line">서양에서는 물질을 주어로 두고 많이 생각해요</span><br><span class="line">(Arrival, 새로 물건이 도착, 새출발)</span><br><span class="line"></span><br><span class="line">언어를 배우려면, 그 문화처럼 사고해야 된다</span><br><span class="line"></span><br><span class="line">공학적 사고방식</span><br><span class="line">문제 정의 -&gt; 자료 수집 -&gt; 해결 아이디어 도출 -&gt; 접근 방법 토론 -&gt; 실험 -&gt; 문제 정의</span><br><span class="line"></span><br><span class="line">compute: 함께 해결하다</span><br><span class="line"></span><br><span class="line">팀프로젝트가 중요하다</span><br><span class="line"></span><br><span class="line">목표 달성을 위해 자기에게 잘 맞는 도구를 찾아보세요</span><br><span class="line"></span><br><span class="line">동기부여(함축적인 문장), 목표설정(장기 목표와 그것을 세분화하고 달성 여부를 측정 가능한 단기목표), 집중력(심성모델과 직관적인 예측), 정보습득(기록, 가공, 검증, 설득)</span><br><span class="line"></span><br><span class="line">어렵게 기록해야 자기 것이 된다</span><br><span class="line"></span><br><span class="line">의식의 4단계</span><br><span class="line">- 무의식적 무지(Unconscious Not Knowing), 무엇을 모르는지 알지 못한다, 즐길 수는 있다</span><br><span class="line">- 의식적 무지(Consccious Not Knowing), 무엇을 모르는지 알고 배우기 시작, 즐길 수 없음</span><br><span class="line">- 의식적 지식(Conscious Knowing), 지식을 배워가면서 다른 분야로 확장하고 업적이 쌓임, 여전히 즐겁지 않음</span><br><span class="line">- 무의식적 지식(Unconscious Knowing), 의식하지 않고 직감적으로 움직이며 즐길 수 있다</span><br><span class="line"></span><br><span class="line">마음 먹기에 따라 2~3단계를 얼른 벗어날 수 있어요, 4단계로 가는 것에는 마음 가짐이 중요해요</span><br><span class="line"></span><br><span class="line">Act Fast, Start Small and Scale Big.</span><br><span class="line"></span><br><span class="line">&lt;Honux&apos;s Intro&gt;</span><br><span class="line">한국 사람들은 반갑습니다 라고 하면 박수를 쳐요(웃음)</span><br><span class="line"></span><br><span class="line">수업에 적극적으로 임할 것, 어려우면 질문에 대해서 속으로라도 대답해볼 것</span><br><span class="line"></span><br><span class="line">무턱대고 쓸 수 있는 무엇인가를 만드는 것이 최선이에요</span><br><span class="line"></span><br><span class="line">지식 학습과 만드는 것을 적절히 배합해보세요</span><br><span class="line"></span><br><span class="line">전부 다 공부해서 만들려고 하지 마세요</span><br><span class="line">만들다가 궁금하면 그 부분만 공부하자</span><br><span class="line">불필요하게 미래를 예측해서 잉여를 만들지 말자, 당장 필요한 그것만을 만들어라</span><br><span class="line">필요할 것 같은 것은 공부하지 마세요, 필요한 것만 공부하세요</span><br><span class="line"></span><br><span class="line">면접을 잘 보려면, 눈치를 보고 상대방이 좋아할 행동을 해야 합니다</span><br><span class="line"></span><br><span class="line">매일 스스로 잘해보자고 다독여보아요</span><br><span class="line"></span><br><span class="line">혼자 하다가 안 되면 학원에서 그만두곤 해요, 주변 사람들과 친하게 지내세요</span><br><span class="line">멘탈 관리는 필수에요, 즐겁게 지내세요</span><br><span class="line"></span><br><span class="line">코드리뷰에서 도망가지 마세요</span><br><span class="line">코드를 자식과 같이 소중히 여기지 마세요, 여러분이 더 소중합니다</span><br><span class="line">리뷰가 제일 중요합니다</span><br><span class="line">아무것도 못 했어요 도 괜찮으니까 나오세요</span><br><span class="line">그래야 살아남을 수 있습니다</span><br><span class="line"></span><br><span class="line">개발자는 늘 공부해야 합니다</span><br><span class="line"></span><br><span class="line">개발자들 중에 영어 못 하는 사람이 많으니, 훌륭한 개발자가 되는 것보다 영어를 적당히 할 줄 아는 개발자가 되는 것이 쉽습니다</span><br><span class="line">하루에 1분이라도 하세요, 10분은 해야지 라고 생각하시면 결국 안 하게 되어요</span><br><span class="line">밤샐 수 있는 체력을 쌓을 수 있게 운동하세요</span><br><span class="line">세상, 한국, 민주주의를 구하려고 하지 말고, 우선 나부터 구하세요</span><br><span class="line"></span><br><span class="line">동영상을 혼자 보려고 하지 말고, 같이 계획세워서 진도체크하세요</span><br><span class="line">SNS를 의지를 북돋는 용도로 활용하세요, 선 선언 -&gt; 후 행동</span><br><span class="line">모든 인간은 의지가 전혀 없어요</span><br><span class="line">의지 강화를 위해 다양한 장치를 활용하세요</span><br><span class="line"></span><br><span class="line">&lt;Crong&apos;s Intro&gt;</span><br><span class="line">많은 것을 얕게 알기 보다는 좁은 것을 깊게 할 줄 아는 것이 중요합니다</span><br><span class="line">다 잘 하려고 하지 마세요, 면접에서 3번 정도 파고 들면 다 모르게 되어요</span><br><span class="line">너무 많은 욕심을 가지지 마세요</span><br><span class="line"></span><br><span class="line">한 달 이내의 기간 내에 시니어와 같이 프로젝트에 기여할 수 있을 것</span><br><span class="line"></span><br><span class="line">많이 아는 것은 중요치 않고, 할 줄 있는 것들이 중요하다</span><br><span class="line">리팩토링을 할 줄 아는 것이 중요해요 (동일 기능, 더 나은 성능)</span><br><span class="line">협업과 공유를 할 수 있어야 해요, 피하지 마셔요</span><br><span class="line"></span><br><span class="line">갈수록 고민이 깊어져야 합니다</span><br><span class="line"></span><br><span class="line">미션수행, 동료평가, 결과물평가, 현장의 실무자 평가로 수료 여부를 결정할 것 같아요</span><br><span class="line"></span><br><span class="line">깃헙 관리를 정말 빡세게 하셔야 해요요</span><br><span class="line"></span><br><span class="line">&lt;Git 강의&gt;</span><br><span class="line">몰랐던 부분</span><br><span class="line">git commit 파일명 -m &quot;Update&quot; 처럼 적으면 add된 것들 중에 특정 파일만 커밋할 수 있음</span><br><span class="line">git commit -am &quot;Update&quot; 라고 적으면 add와 동시에 커밋 가능</span><br><span class="line"></span><br><span class="line">Commit Message</span><br><span class="line">- 한 줄로 설명할 수 있는 단위로 커밋</span><br><span class="line">- 어떻게 보다는 무엇과 왜를 설명</span><br><span class="line">- 첫 줄 외에 나머지 줄에 항상 자세히 기록</span><br><span class="line"></span><br><span class="line">주석에 대해서도 자기만의 가치관을 가지는 것이 좋아요</span><br><span class="line">(정답이 없는 부분이기 때문에!)</span><br><span class="line"></span><br><span class="line">참여하게 되는 프로젝트에서 사용하는 방식을 보고 따라하세요!</span><br><span class="line">라이브러리인지, 서비스인지에 따라서도 크게 달라요!</span><br><span class="line">규칙을 준수하는 것이 중요해요</span><br><span class="line">커밋을 기준으로 릴리즈 노트(Change Log)를 만들곤 해요</span><br><span class="line">하위 호환성을 유지하는 것은 마이너, 호환성이 깨질 수도 있는 것은 메이저</span><br><span class="line"></span><br><span class="line">git branch -b : 새로운 브랜치를 만들면서 그리로 checkout</span><br><span class="line">git branch : 브랜치 목록 보기</span><br><span class="line">git merge dev_1.2 : 지금 있는 브랜치에 dev_1.2 브랜치를 merge함</span><br><span class="line">git tag 1.2 : 현재 시점에 대해 1.2라는 태그를 달아줌</span><br><span class="line">git branch -d dev_1.2 : dev_1.2 브랜치를 삭제함</span><br><span class="line"></span><br><span class="line">협업할 때는 자주 Merge해주면서 늘 서비스가 동작되는 상태를 유지하면서 개발해야 합니다</span><br><span class="line"></span><br><span class="line">git push --tags 를 통해 모든 태그를 푸시 가능</span><br><span class="line">https://blog.outsider.ne.kr/644</span><br><span class="line"></span><br><span class="line">우선 돌아가게 하고, 그 다음에 개선하셔요</span><br><span class="line"></span><br><span class="line">Branch도 작명법이 있어요</span><br><span class="line">master branch는 최신 배포버전을 유지해요!</span><br><span class="line">태그를 기준으로 다운로드받도록 할 수도 있어요</span><br><span class="line"></span><br><span class="line">네이버 메인에서 class명에 &quot;-&quot; 또는 &quot;_&quot;가 들어간 것이 몇개인지 찾으세용!</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// includes 사용</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">tag</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> tagList = <span class="built_in">document</span>.querySelectorAll(tag);</span><br><span class="line">  <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, max = tagList.length; i &lt; max; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (tagList[i].className.includes(<span class="string">"-"</span>) || tagList[i].className.includes(<span class="string">"_"</span>)) &#123;</span><br><span class="line">      result += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 정규표현식 test 사용</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">tag</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> tagList = <span class="built_in">document</span>.querySelectorAll(tag);</span><br><span class="line">  <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, max = tagList.length; i &lt; max; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/[-_]/g</span>.test(tagList[i].className)) &#123;</span><br><span class="line">      result += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">solution(<span class="string">"div"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 해당 조건에 맞는 ClassName 삭제하기</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">tag</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> tagList = <span class="built_in">document</span>.querySelectorAll(tag);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, max = tagList.length; i &lt; max; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/[-_]/g</span>.test(tagList[i].className)) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>, maxi = tagList[i].classList.length; j &lt; maxi; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/[-_]/g</span>.test(tagList[i].classList[j])) &#123;</span><br><span class="line">          tagList[i].classList.remove(tagList[i].classList[j]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">solution(<span class="string">"div"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수 넘겨주는 버전</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remover</span>(<span class="params">parent, child</span>) </span>&#123;</span><br><span class="line">  parent.classList.remove(child);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">tag, remover</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> tagList = <span class="built_in">document</span>.querySelectorAll(tag);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, max = tagList.length; i &lt; max; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/[-_]/g</span>.test(tagList[i].className)) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>, maxi = tagList[i].classList.length; j &lt; maxi; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/[-_]/g</span>.test(tagList[i].classList[j])) &#123;</span><br><span class="line">          remover(tagList[i], tagList[i].classList[j]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">solution(<span class="string">"div"</span>, remover);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 위의 for문 두 개 도는 것을 피하기 위해, for문 중 하나는 remover로 넘겨주자!</span></span><br></pre></td></tr></table></figure><hr><h2 id="170314"><a href="#170314" class="headerlink" title="170314"></a>170314</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Template을 HTML 내 Script로 숨겨놓거나, Ajax로 가져와서 쓰는 방법이 있어요</span><br><span class="line">foreach의 변수명은 value index object을 줄인 v i o를 많이 써요-</span><br><span class="line"></span><br><span class="line">함수의 흐름을 손으로 그려보세요, 더 좋은 아이디어가 떠오르면 처음부터 다시 짜보세요</span><br><span class="line"></span><br><span class="line">기능이 복잡할수록 재사용성은 당연히 떨어져요</span><br><span class="line">춘호님의 명언 : 이벤트는 없어지지 않는 곳에 걸어야 함</span><br></pre></td></tr></table></figure><hr><h2 id="170315"><a href="#170315" class="headerlink" title="170315"></a>170315</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">DOM 조작을 최소화하려는 노력을 하세요 (DOM을 탐색한 뒤, 지역변수에 담아두기 등)</span><br><span class="line">Ajax를 통한 결과를 재사용할 수 있도록 하는 노력을 기울여보세요</span><br><span class="line">코드를 짤 때는 사람이 알아보기 쉬운 코드를 짜는 것이 목표에요</span><br><span class="line"></span><br><span class="line">DOMContentLoaded 이후에 querySelector를 사용해야 문제가 안 생겨요</span><br><span class="line">위와 같이 하고 싶지 않다면, 미리 HTML를 script단에 만들어두면 되어요</span><br><span class="line"></span><br><span class="line">DOMContentLoaded - the whole document (HTML) has been loaded.</span><br><span class="line">load - the whole document and its resources (e.g. images, iframes, scripts) have been loaded.</span><br><span class="line"></span><br><span class="line">DOM 조작을 하려는 것이라면 많이 느린 load보다는 DOMContentLoaded를 사용해보세요</span><br><span class="line"></span><br><span class="line">실행되는 흐름을 쉽게 분석할 수 있도록 하려면, 아무 곳에서나 함수를 실행시키면 안 됩니당!</span><br><span class="line"></span><br><span class="line">replace를 체이닝해서 사용할 수도 있어요</span><br><span class="line">.replace().replace() 등</span><br><span class="line"></span><br><span class="line">jQuery는 가능하면 쓰지 마세요</span><br><span class="line"></span><br><span class="line">((doc, win) =&gt; &#123;</span><br><span class="line">  console.log(doc.body);</span><br><span class="line">  let div = doc.querySelector(&quot;div&quot;);</span><br><span class="line">  console.log(div);</span><br><span class="line">&#125;)(document, window)</span><br><span class="line"></span><br><span class="line">bind를 활용하면 전역변수를 줄일 수 있어요, 또한 this도 지정해줄 수 있어요!</span><br><span class="line"></span><br><span class="line">항상 설정정보나 URL은 밖으로 빼놓으세요!</span><br><span class="line"></span><br><span class="line">. 표기법으로 접근할 수 있으면 모두 객체다</span><br><span class="line"></span><br><span class="line">함수도 변수에요</span><br><span class="line"></span><br><span class="line">array에서 원본을 바꾸지 않으면서, 카피본을 만들 때도 const를 활용해보세요</span><br><span class="line">const list = [&apos;john&apos;, &apos;adele&apos;, &apos;hary&apos;];</span><br><span class="line">list2 = [].concat(list, &quot;tiger&quot;);</span><br><span class="line">list == list2</span><br><span class="line"></span><br><span class="line">const를 쓰되, Error나면 let으로 바꾸셔요!</span><br><span class="line"></span><br><span class="line">Closure는 Scope에요</span><br><span class="line">세상에는 전역 Scope, 함수 Scope만 있는 것이 아니라 블록 Scope와 Closure Scope가 있는 거에요!</span><br><span class="line">원래는 접근할 수 없었던 부모 Scope에 접근할 수 있게 된 것이에요!</span><br><span class="line"></span><br><span class="line">Closure VS Let</span><br><span class="line"></span><br><span class="line">Debugger를 통해서 문제 상황이 왜인지 파악해가는 것이 가장 중요해요!</span><br><span class="line">문제를 해결해가는 과정이 중요하지, 그 각개 현상을 모두 외우는 것은 매우 어려워요!</span><br><span class="line">Debugger를 잘 활용하는 것이 제일 중요해요!</span><br><span class="line"></span><br><span class="line">Closure는 JS Scope와 관련한 문제라는 것을 기억하는 것이 가장 중요해요</span><br><span class="line">부모 함수의 변수를 부모 함수가 끝나고도 계속 쓸 수 있게 한다!</span><br><span class="line">(Functional Scope에 대한 극복 방안)</span><br><span class="line"></span><br><span class="line">Let은 Closure와 달리 공유되지 않는 개별적 변수로 구분해주어요 (매 블록마다 구분하여 존재함)</span><br><span class="line"></span><br><span class="line">해당 변수를 Share를 해야 한다면, Closure</span><br><span class="line">해당 변수를 Share되지 않아야 한다면, Let</span><br><span class="line"></span><br><span class="line">스코프는 선언될 때 결정되어요, 그래서 눈에 보일 때와 같아요</span><br><span class="line"></span><br><span class="line">local -&gt; block -&gt; closure -&gt; global</span><br><span class="line"></span><br><span class="line">Currying 이라는 키워드로 찾아보셔요!</span><br><span class="line">요새 RxJS라는 것도 있어요!</span><br><span class="line"></span><br><span class="line">눈에 보이진 않지만, new를 하면 return this를 하게 되어요(Instance 생성)</span><br><span class="line">new + 생성자 함수 =&gt; 새로운 객체</span><br><span class="line">위와 같이 하면 생성자 함수에 있는 내용이 계속 복사되어 생겨난다</span><br><span class="line"></span><br><span class="line">그렇게 하지 않으려면 Share할 수 있는 공간인 prototype을 활용하면 된다 (메모리 측면에서 효율적)</span><br><span class="line"></span><br><span class="line">스코프처럼 프로토타입도 체이닝되어요</span><br><span class="line"></span><br><span class="line">공통으로 사용하려면 prototype, prototype을 기반으로 각기 따로 관리하려면 new를 통한 생성</span><br><span class="line">공통으로 사용하려면 var Closure, 각기 따로 관리되길 원하면 let Closure</span><br><span class="line">let은 정의 당시의 그 변수 상황에 적용됨</span><br><span class="line"></span><br><span class="line">Object 리터럴에서는 Arrow는 window를 가르키니까 쓰지마세요!</span><br><span class="line"></span><br><span class="line">var testObj = Object.create(object);</span><br><span class="line">new 대신에 위와 같은 방식으로 짜는 것이 완전 JS스러워서 정말 좋아요</span><br><span class="line"></span><br><span class="line">var healthObj = &#123;</span><br><span class="line">showHealth : function() &#123;</span><br><span class="line">console.log(&quot;오늘은 &quot; + this.lastTime + &quot;까지 &quot; + this.name + &quot; 운동을 하셨네요&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">실습 1에서 만든 코드를 Object.create로 변경하고, Closure에 대해서 정리해서 글을 적어보세요!</span><br><span class="line">var myHealth = Object.create(healthObj);</span><br><span class="line">myHealth.name = &quot;달리기&quot;;</span><br><span class="line">myHealth.lastTime = &quot;23:10&quot;;</span><br></pre></td></tr></table></figure><hr><h2 id="170316"><a href="#170316" class="headerlink" title="170316"></a>170316</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">심심하면 오픈소스 프로젝트에서 클래스를 어떻게 만드는지 찾아보세요</span><br><span class="line">디버깅을 통해 브라우저의 동작원리를 파악해가는 방식이 정말 좋습니다!!!</span><br><span class="line">이전에 짠 코드는 기능을 이해하기 위한 시도였다고 생각하고, 처음부터 다시 짜야한다고 생각하세요</span><br><span class="line">시나리오를 짜고, 그 시나리오를 모두 통과할 수 있게 하는 설계나 테스트가 갖춰진 뒤에 구현에 들어가세요</span><br></pre></td></tr></table></figure><hr><h2 id="170317"><a href="#170317" class="headerlink" title="170317"></a>170317</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">수행해야 할 로직이라면 무작정 추상화하기 보다는 명시적으로 보여주는 것도 좋을 것 같아요</span><br><span class="line">똑같은 로직을 계속해서 다시 짜보는 과정을 블로깅해보세요</span><br><span class="line">원래 이런 코드였는데, 이런 문제가 있어서 요렇게 새롭게 짜보았다 라고 사고를 드러내는 포스트, 박수쳐드릴게요</span><br><span class="line">패턴과 같은 것들을 접할 때, 비판적 사고를 할 수 있어야 해요</span><br><span class="line">요구사항에 따라서 구현해야 할 패턴이 달라질 수 밖에 없어요</span><br><span class="line">늘 내 의도를 타인에게 얘기할 수 있어야 해요</span><br><span class="line"></span><br><span class="line">var cs = &#123;&#125;;</span><br><span class="line">cs.view = &#123;&#125;;</span><br><span class="line">cs.model = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">위와 같이 네임스페이스를 쓸 수 있어요</span><br><span class="line"></span><br><span class="line">Object cache를 사용해보세요</span><br><span class="line"></span><br><span class="line">반복적으로 template.secondTemplate 가 반복되면,</span><br><span class="line">const st = template.secondTemplate; 와 같이 써보세요</span><br><span class="line">이렇게 하면 입력도 편하고 탐색 비용이 선언할 때 한 번으로 줄어들기 때문에 매우 좋습니다</span><br><span class="line"></span><br><span class="line">어떤 것 하나가 변경될 때, 영향력이 최대한 적도록 코딩을 해야 해요</span><br><span class="line"></span><br><span class="line">컴포넌트의 핵심은 재사용성이에요</span><br><span class="line">컴포넌트가 구조와 동작의 측면에서 완전한 구성을 이룰 수 있어야 해요</span><br><span class="line">(스타일은 CSS의 변화로 바꿀 수 있어요)</span><br><span class="line"></span><br><span class="line">그 전까지는 HTML, CSS, JS의 분리가 일반적이었어요</span><br><span class="line">그러나 모바일 중심으로 가면서 트렌드가 컴포넌트로 바뀌어가고 있어요요</span><br><span class="line"></span><br><span class="line">컴포넌트를 재사용하지 못하면 리액트를 쓰는 의미가 없어요</span><br><span class="line"></span><br><span class="line">인자를 잘 활용하면 객체간의 결합도를 낮출 수 있어요</span><br><span class="line">한 번 코딩하고 나서, 요구사항의 변화로 인해 수정이 적어질 수 있어요</span><br><span class="line"></span><br><span class="line">function a(oFn) &#123;</span><br><span class="line">  if (true) oFn.afterBtn();</span><br><span class="line">&#125;</span><br><span class="line">a(&#123;&quot;afterBtn&quot;: aaa.ddd&#125;);</span><br><span class="line"></span><br><span class="line">기능변화에 따른 변화를 줄일 수 있도록 결합도를 낮출 수 있도록 시도해보세요</span><br><span class="line"></span><br><span class="line">객체 중심의 개발이 Event 중심의 개발과 이어져요</span><br><span class="line"></span><br><span class="line">function a() &#123;</span><br><span class="line">  Dispatcher.emit(&quot;beforeFn&quot;);</span><br><span class="line">  ele.on(&quot;click&quot;, () =&gt; &#123;</span><br><span class="line">    result = &quot;ddddd&quot;;</span><br><span class="line">    // 메시지 패싱</span><br><span class="line">    Dispatcher.emit(&quot;afterClick&quot;, result);</span><br><span class="line">  &#125;</span><br><span class="line">  Dispatcher.emit(&quot;afterFn&quot;, result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">aaa = &#123;</span><br><span class="line">  ddd : function()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a(&#123;&quot;afterClick&quot; : [aaa.ddd, fn2, fn3]&#125;);</span><br><span class="line"></span><br><span class="line">무분별하게 프레임워크를 쓰는 것이냐 아니냐에 따라 실력이 확갈린다</span><br><span class="line">어느 곳에나 리액트가 최선인 것이 아니다</span><br><span class="line">필요한 사이즈에 적정한 도구만 딱 쓸 수 있는 것이 고급 개발자</span><br><span class="line"></span><br><span class="line">Element 탭에서 Break on을 사용하면 변화를 만들어내는 코드를 알 수 있어요</span><br><span class="line">Source 탭에서 async를 꼭 체크하고 보세요</span><br><span class="line">옵션 커맨드 F를 누르면 소스 검색을 해줘요</span><br><span class="line"></span><br><span class="line">develop branch를 만들어두고, 거기에 업데이트를 하다가 완성되면 master에 merge하세요</span><br><span class="line"></span><br><span class="line">var dataObjFn = (function() &#123;</span><br><span class="line"></span><br><span class="line">   var json = [&quot;aaaa&quot;];</span><br><span class="line"></span><br><span class="line">   function dataModelObj() &#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   dataModelObj.prototype = &#123;</span><br><span class="line">       getName : function() &#123;</span><br><span class="line">           return json;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   return dataModelObj;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">var dd = new dataObjFn();</span><br><span class="line">누가 물어봐서.. 외부에서 인스턴스변수 접근을 하기 싫다고해서 .</span><br><span class="line">알아서 보시길..</span><br><span class="line">module pattern 의 일종.</span><br><span class="line">접근이 되는 것과 되지 않는 것을 구분할 수 있어야 합니다</span><br></pre></td></tr></table></figure><hr><h2 id="170320"><a href="#170320" class="headerlink" title="170320"></a>170320</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">동작이 된다 -&gt; 개선을 한다 -&gt; 내가 만든 구조로 다른 요구사항에 맞춰 만들어본다</span><br><span class="line">객체별로 역할을 어떻게 나누는지 고민하는 것이 매우 중요해요</span><br><span class="line">규모가 커지면 설계가 잘 된 것인지 여부가 바로 티가 납니다</span><br><span class="line">특정한 요구사항으로부터 자유로울수록 좋은 설계입니다</span><br><span class="line"></span><br><span class="line">옵저버 패턴, 구독 구현, 재개발</span><br><span class="line"></span><br><span class="line">어떤 방법으로든 요소간 의존성을 낮출 수 있어야 합니다</span><br><span class="line"></span><br><span class="line">전체적인 구조보다 사용자 입장에서 접근하는 것도 좋습니다다</span><br><span class="line">그러면 직관적으로 쓰기 좋은 구성이 될 수 있을거에요</span><br><span class="line">API를 만드는 느낌이죠, 인터페이스를 먼저 만들고 실제 구현을 그 다음에-</span><br><span class="line"></span><br><span class="line">Controller는 View와 Model로 인해 생겨난 느낌이 강함</span><br><span class="line">(View, Model의 변화에 따라 해야 할 일을 등록)</span><br><span class="line"></span><br><span class="line">Dispatcher는 변화가 발생시 미리 가지고 있는 정보를 토대로 필요할 일을 실행시킴(register -&gt; fire, emit)</span><br><span class="line"></span><br><span class="line">옵저버 패턴이란 콜백함수를 제 3의 공간에 등록시켜둔 것이에요요</span><br><span class="line"></span><br><span class="line">실행은 Dispatcher, View와 Model의 관계형성은 Controller</span><br></pre></td></tr></table></figure><hr><h2 id="170321"><a href="#170321" class="headerlink" title="170321"></a>170321</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">학습하다가 진도가 밀리면, 계획을 미루세요</span><br><span class="line">늦어도 좋으니 매일 아주 조금씩이라도 진보시키시면 됩니다</span><br><span class="line"></span><br><span class="line">Git의 최소단위는 커밋</span><br><span class="line">커밋은 최초 커밋 외에는 늘 부모가 있어요</span><br><span class="line"></span><br><span class="line">브랜치도 결국에는 특정 커밋에 대한 참조일 뿐이에요</span><br><span class="line">커밋 외에는 모두 참조변수에 불과해요</span><br><span class="line"></span><br><span class="line">git pull = fetch + merge</span><br><span class="line">fetch : 원격 저장소를 로컬 저장소에 반영</span><br><span class="line">merge : 로컬 저장소에 있는 내용을 작업 디렉토리에 반영</span><br><span class="line">checkout : 워킹 디렉토리를 특정 시점으로 바꿔주며, HEAD가 옮겨짐</span><br><span class="line"></span><br><span class="line">echo $RANDOM &gt;&gt; 1.txt; git add .; git commit -m &quot;2&quot;</span><br><span class="line"></span><br><span class="line">브랜치에 속해있는 것이 아니라, 지금 가리키고 있는 곳만 브랜치, 특정 커밋에서 git branch를 해보면 알 수 있음</span><br><span class="line">head : 내가 작업하고 있는 커밋</span><br><span class="line"></span><br><span class="line">한 번 저장된 커밋은 바뀌지 않아요, 원격에 반영한 커밋은 수정하지 마세요</span><br><span class="line"></span><br><span class="line">git branch -f 3rd C4</span><br><span class="line">3rd가 아닌 다른 브랜치에서 3rd 브랜치를 C4로 옮김</span><br><span class="line"></span><br><span class="line">git checkout 3rd</span><br><span class="line">git merge C8</span><br><span class="line">3rd 브랜치를 C8과 merge</span><br><span class="line"></span><br><span class="line">git branch -f 2rd C5</span><br><span class="line">git merge C9</span><br><span class="line"></span><br><span class="line">git checkout -b 4th</span><br><span class="line"></span><br><span class="line">git clone jj tomasj</span><br><span class="line">로컬 저장소 jj를 복사해서 tomasj를 만듬</span><br><span class="line">로컬 저장소도 원격저장소가 될 수 있다</span><br><span class="line"></span><br><span class="line">git config --global user.name &quot;Hoyoung Jung&quot;</span><br><span class="line">git config user.name &quot;Doraemong&quot;</span><br><span class="line"></span><br><span class="line">git config --global alias.co commit</span><br><span class="line">git config --global alias.st status</span><br><span class="line">git log --pretty=oneline --decorate --graph --all</span><br><span class="line">git config --global alias.logs &quot;log --oneline --decorate --graph --all&quot;</span><br><span class="line"></span><br><span class="line">alias gl=&apos;git logs&apos;</span><br><span class="line"></span><br><span class="line">git branch bb 6e20</span><br><span class="line">git checkout -b 3rd 5aa7e62 : 5aa7e62에 3rd를 만들고 HEAD를 옮겨줌</span><br><span class="line"></span><br><span class="line">^1 첫 번째 부모</span><br><span class="line">^^1 할아버지</span><br><span class="line">~1 부모</span><br><span class="line">~2 할아버지</span><br><span class="line">~3 증조 할아버지</span><br><span class="line"></span><br><span class="line">git reset HEAD^</span><br><span class="line">git rebase : 나를 들어서 상대편에게 얹어주는 것, 상대편이 베이스(머지는 내가 베이스)</span><br><span class="line">rebase는 하고 나면 늘 한 줄이 되어요</span><br><span class="line">나랑 base와의 차이점을 찾아서 쭉 얹어줘요</span><br><span class="line">git rebase master : 나를 master 밑에 얹어줘요, 충돌날 가능성이 높아요</span><br><span class="line"></span><br><span class="line">git checkout master</span><br><span class="line">git merge 2nd</span><br><span class="line"></span><br><span class="line">git branch -f master 2nd : force, master와 2nd를 merge</span><br><span class="line"></span><br><span class="line">git cherry-pick : 커밋을 떼어와서 붙여요</span><br><span class="line"></span><br><span class="line">git revert C2 : C3를 그대로 남겨두고 C2 상태로 돌려줘요</span><br><span class="line">git reset --hard HEAD~2 : 할아버지로 돌려줘! 해당하는 커밋으로 돌아가!</span><br><span class="line"></span><br><span class="line">리셋은 소프트 리셋과 하드 리셋이 있는데, 우리가 흔히 원하는 것은 하드 리셋이다(git reset --hard)</span><br><span class="line"></span><br><span class="line">current branch는 -f 옵션을 사용할 수 없어요</span><br><span class="line"></span><br><span class="line">옵션을 붙이면 전혀 다른 명령어가 되어요</span><br><span class="line">git rebase -i HEAD~2 : 나와 HEAD~2과의 관계를 재정의(interactive)</span><br><span class="line">- 커밋의 순서 변경</span><br><span class="line">- 커밋 제거(엄밀히 말하면 해당 커밋이 없는 것을 새로 만들어주는 것)</span><br><span class="line">여러 갈래로 퍼져있는 것은 편집할 수 없어요 HEAD~2 미만만 나와요</span><br><span class="line">pick : 해당 커밋을 포함</span><br><span class="line">reword : 커밋 메시지 변경</span><br><span class="line">edit(amend) : </span><br><span class="line">squash : commit들을 합쳐서 한 커밋으로 만들어줌</span><br><span class="line"></span><br><span class="line">git commit --amend : 바로 전 커밋에 추가 반영해서 새로 만듬</span><br><span class="line"></span><br><span class="line">git remote add origin url</span><br><span class="line">git push master origin</span><br><span class="line">git push --set-upstream origin master</span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br><span class="line">git rm --cached 4.txt : index에서 4.txt를 내려주셔요</span><br><span class="line"></span><br><span class="line">git push origin master --force</span><br></pre></td></tr></table></figure><p><img src="http://1.bp.blogspot.com/-ndhGl934uVg/VgV5SjuK0NI/AAAAAAAAAn4/BsSvs4KP_2E/s1600/git-vademecum.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. HTML 레이아웃 구조 (쪼개고 쪼개고 쪼개고)</span><br><span class="line">- 태그별 영역 확인 : * &#123;outline: 1px solid; &#125;</span><br><span class="line">- 책의 목차를 생각해볼 것</span><br><span class="line">2. 스타일</span><br><span class="line">- reset.css (기본 margin, padding, line-style 등을 무위로 돌림)</span><br><span class="line">- CSS 작성</span><br><span class="line">- 필요시에 SASS 사용</span><br></pre></td></tr></table></figure><hr><h2 id="170322"><a href="#170322" class="headerlink" title="170322"></a>170322</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"windooow"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test = &#123;</span><br><span class="line">  getName: <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"abc -&gt;"</span>, a, b, c);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test2 = &#123;</span><br><span class="line">  name: <span class="string">"jinny"</span>,</span><br><span class="line">  printName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(test.getName.call(<span class="keyword">this</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(test.getName.apply(<span class="keyword">this</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]));</span><br><span class="line">    <span class="built_in">console</span>.log(test.getName.apply(<span class="built_in">window</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test.getName();</span><br><span class="line">test2.printName();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> h = &#123;</span><br><span class="line">  name: <span class="string">"ooooo"</span>;</span><br><span class="line">  log: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"run"</span>);</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">"h1"</span>).addEventListener(<span class="string">"click"</span>, h.log.bind(o));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">o.run();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 콜백함수를 실행시켜주는 함수가 어떻게 실행되었는지에 따라 this가 결정된다</span></span><br><span class="line"><span class="comment">// bind: 선언할 때, 실행이 될 때의 컨텍스트 지정</span></span><br><span class="line"><span class="comment">// call, apply: 지금 실행시킬 때의 컨텍스트 지정</span></span><br><span class="line"><span class="comment">// 일단 짜고, 오류가 나면 디버깅을 하고, 그 다음에 바인딩을 해!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Deactivate breakpoint라는 것도 있어요</span></span><br><span class="line"><span class="comment">// Breakpoints에서도 조정할 수 있어요</span></span><br><span class="line"><span class="comment">// XHR breakpoints에서도 조정 가능</span></span><br></pre></td></tr></table></figure><hr><h2 id="170323-MySQL-강의-수강"><a href="#170323-MySQL-강의-수강" class="headerlink" title="170323 : MySQL 강의 수강"></a>170323 : MySQL 강의 수강</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">Lubuntu, MySQL 설치</span><br><span class="line">왜 DBMS인가?</span><br><span class="line">Data -&gt; Information -&gt; Knowledge -&gt; Wisdom</span><br><span class="line">Information에서 Knowledge와 Wisdom을 얻는 것이 빅데이터 분석의 목표</span><br><span class="line"></span><br><span class="line">데이터 간의 관계를 이용하는 것것</span><br><span class="line">SQL은 무엇을 할지 정의하는 선언적 언어</span><br><span class="line"></span><br><span class="line">Not Only SQL, 관계형이 아닌 나머지 데이터베이스</span><br><span class="line"></span><br><span class="line">CAP</span><br><span class="line">- Consistency : 일관성, 데이터 저장</span><br><span class="line">- Availability : 가용성, 얼마나 다운타임없이 운영되는가</span><br><span class="line">- Partition Tolerence : 내성, 일부가 고장나더라도 전체는 유지됨</span><br><span class="line"></span><br><span class="line">위 세 가지 모두를 만족하는 시스템은 구현할 수 없다</span><br><span class="line"></span><br><span class="line">ACID</span><br><span class="line">- Atomicity : 원자성, 트랜잭션을 할 때 All or Nothing </span><br><span class="line">- Consistency : 일관성, 삽입 갱신 삭제가 멀티유저를 상대로 바로 이루어지는가</span><br><span class="line">- Isolation : 고립성, 마치 유저당 각각 하나의 데이터베이스를 사용하는 것처럼 고립성을 보장해주는가</span><br><span class="line">- Durability : 내구성, 한 번 저장된 데이터는 영구적으로 저장되는가</span><br><span class="line"></span><br><span class="line">수평 확장 : 서버 대수를 늘린다</span><br><span class="line">수직 확장 : 사양을 늘린다</span><br><span class="line">(수직확장이 좀 더 비용이 많이 듬)</span><br><span class="line"></span><br><span class="line">SQL VS NoSQL</span><br><span class="line">NoSQL은 CAP의 일부를 만족하기 위해 나오는 경우가 다수</span><br><span class="line">ACID는 관계형 데이터베이스의 특징</span><br><span class="line">관계형 데이터베이스의 Transaction 성질은 ACID로 요약가능</span><br><span class="line"></span><br><span class="line">관계형 데이터베이스는 수직확장을 하는 경우가 다수</span><br><span class="line">샤딩이라는 기술을 사용하면 수평확장도 가능</span><br><span class="line">NoSQL은 수평확장이 쉬운 편</span><br><span class="line"></span><br><span class="line">Graph DB (사이클 같은 것이 생기면 그래프)</span><br><span class="line">Neo4j</span><br><span class="line">- 복잡한 관계 처리 지원</span><br><span class="line">- 친구 추천 알고리즘, SNS 등에 적합</span><br><span class="line"></span><br><span class="line">순환 루프가 생기지 않으면, 하이라키가 있다면 트리</span><br><span class="line"></span><br><span class="line">Document DB (JSON 기반으로 레코드 저장)</span><br><span class="line">MongoDB</span><br><span class="line">- json 기반 레코드 저장</span><br><span class="line">- 아무거나 막 저장</span><br><span class="line">- 비교적 빠르고 사용이 간단</span><br><span class="line">- 조인에 부적합</span><br><span class="line">- 이전 버전은 쓰기 성능이 좋지 않았음</span><br><span class="line">- 서비스 구현에 가장 쉬운 DB</span><br><span class="line"></span><br><span class="line">Key-Value DB (Key값으로 Value를 저장)</span><br><span class="line">Redis, Mem-cached</span><br><span class="line">- 엄청 빠르다</span><br><span class="line">- 단순 데이터 처리</span><br><span class="line">- 캐시 / 데이터 분산용</span><br><span class="line"></span><br><span class="line">Cloud DB</span><br><span class="line">Amazon DynamoDB, Google Firebase, Realm</span><br><span class="line">- 설치 X, 사용이 쉽고 편리함, 고성능 고가용성 내구도</span><br><span class="line"></span><br><span class="line">Hadoop Eco System</span><br><span class="line">- HBASE, Spark</span><br><span class="line"></span><br><span class="line">Cassandra : 대용량 처리</span><br><span class="line">Elastic Search : 자연어 처리</span><br><span class="line"></span><br><span class="line">--------------------</span><br><span class="line"></span><br><span class="line">데이터 타입에 따라 저장 방식, 용량, 성능, 지원 가능 등이 달라진다</span><br><span class="line">CREATE TABLE USER (</span><br><span class="line">USERID CHAR(12) PRIMARY KEY,</span><br><span class="line">NAME VARCHAR(64),</span><br><span class="line">MONEY DEC(12),</span><br><span class="line">SCORE INT</span><br><span class="line">CREATE_TIME DATETIME</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">MySQL Data Type</span><br><span class="line">Numeric 숫자</span><br><span class="line">Date, Time 날짜와 시간</span><br><span class="line">String 문자열</span><br><span class="line">Spatial 지리 데이터, 공간 데이터</span><br><span class="line">JSON json 저장용</span><br><span class="line"></span><br><span class="line">Numeric Types</span><br><span class="line"></span><br><span class="line">| 타입 | 용도 | 기타 |</span><br><span class="line">| --- | --- | --- |</span><br><span class="line">| INT(=INTEGER) | 정수 | 4Byte |</span><br><span class="line">| TINYINT, SMALLINT, BIGINT | 기타 정수 | 1Byte, 2Byte, 8Byte |</span><br><span class="line">| DEC(10,2) | 8(정수) + 2(소수)자리 실수 | 정확한 계산용, Fixed Point |</span><br><span class="line">| FLOAT, DOUBLE | 부동소수점 실수 | 4Byte, 8Byte, 약간의 계산오차가 있을 수 있음, Float Point, DOUBLE이 FLOAT에 비해 두 배 정확 |</span><br><span class="line"></span><br><span class="line">SELECT * FROM A;</span><br><span class="line">DELETE FROM A;</span><br><span class="line">INSERT INTO A VALUES (1), (100), (1000);</span><br><span class="line"></span><br><span class="line">숫자 타입의 범위를 초과하면 오버플로우되어 타입의 최대값을 저장</span><br><span class="line"></span><br><span class="line">show warnings;</span><br><span class="line"></span><br><span class="line">Date and Time Types</span><br><span class="line">| 타입 | 용도 | 설명 |</span><br><span class="line">| --- | --- | --- |</span><br><span class="line">| TIME | 시간 | 1000~9999년 |</span><br><span class="line">| DATETIME | 날짜와 시간 | 1970~2038년까지 저장 |</span><br><span class="line">| DATE | 날짜 | --- |</span><br><span class="line">| TIMESTAMP | 생성 및 변경시간을 자동 저장 | --- |</span><br><span class="line">| YEAR | 년도 | --- |</span><br><span class="line"></span><br><span class="line">timezone 등 여러 이슈가 많음</span><br><span class="line"></span><br><span class="line">날짜 계산에는 DATE_SUB()와 DATE_ADD()함수를 사용</span><br><span class="line">SELECT DATE_SUB(NOW(), INTERVAL 1 DAY); # 어제</span><br><span class="line">SELECT DATE_ADD(NOW(), INTERVAL 1 DAY); # 내일</span><br><span class="line">SELECT DATE_ADD(&apos;1999-12-31 23:50:00&apos;, INTERVAL 5 HOUR);</span><br><span class="line"></span><br><span class="line">String Types</span><br><span class="line"></span><br><span class="line">| 타입 | 용도 |</span><br><span class="line">| --- | --- |</span><br><span class="line">| CHAR | 고정길이 문자열 |</span><br><span class="line">| VARCHAR | 가변길이 문자열 |</span><br><span class="line">| BINARY | 2진 데이터 |</span><br><span class="line">| BLOB | 대용량 데이터, 파일 등 아무거나 저장용 |</span><br><span class="line">| TEXT | 대용량 텍스트, 인코딩 및 콜레이션 설정, 검색 가능 |</span><br><span class="line"></span><br><span class="line">[콜레이션](http://chobodba.tistory.com/3)</span><br><span class="line"></span><br><span class="line">select id, title, IF(completed, &apos;true&apos;, &apos;false&apos;) as completed from todo;</span><br><span class="line"></span><br><span class="line">docker exec -it mysql mysql -u root</span><br><span class="line"></span><br><span class="line">insert into user (email, name, pw) values (&apos;crong@naver.com&apos;, &apos;crong&apos;, &apos;asdf&apos;);</span><br><span class="line"></span><br><span class="line">select * from user</span><br></pre></td></tr></table></figure><hr><h2 id="170328"><a href="#170328" class="headerlink" title="170328"></a>170328</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br><span class="line"></span><br><span class="line">CI, CD</span><br><span class="line"></span><br><span class="line">Travis, Jenkins</span><br><span class="line"></span><br><span class="line">back-end와 통신할 때, 최소한의 통신으로 처리할 수 있도록 노력해야 해요</span><br><span class="line"></span><br><span class="line">회사가 아주 잘 풀려서 막 확장하려고 할 때가 매우 위험한 시기이기도 해요</span><br><span class="line"></span><br><span class="line">MIT는 굉장히 자유로운 라이센스</span><br><span class="line">GPL은 사용하면 소스를 반드시 공개해야 함</span><br><span class="line"></span><br><span class="line">git commit에 -v 옵션을 추가하면 편집기에 diff 메시지도 추가된다</span><br><span class="line"></span><br><span class="line">vi에서 ~ 누르면 대문자로 바뀌어요</span><br><span class="line"></span><br><span class="line">git push origin --delete serverfix</span><br><span class="line"></span><br><span class="line">내가 Collaborators일 때, pull-request 순서</span><br><span class="line">1. Master branch를 clone  </span><br><span class="line">2. 새로운 브랜치를 생성</span><br><span class="line">3. 브랜치 이름은 구현할 기능 이름으로 지정</span><br><span class="line">4. add/commit/push</span><br><span class="line">5. pull request 생성</span><br><span class="line">6. Reviewer 지정</span><br><span class="line">7. Reviewer는 Review 및 수정</span><br><span class="line">8. 작업자가 다시 Commit 실행</span><br><span class="line">9. 7번과 8번을 반복 후 merge</span><br><span class="line"></span><br><span class="line">깃헙에 내가 만든 것은 모두 올리고, 자동으로 만들어진 것은 모두 올리지 마세요</span><br><span class="line"></span><br><span class="line">서버 세팅 -&gt; 소스 가져오기 -&gt; 빌드 -&gt; 실행</span><br><span class="line"></span><br><span class="line">sudo apt-get install git vim-nox tmux</span><br><span class="line"></span><br><span class="line">uname -a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Agile의 개념에 많은 부분은 도요타의 생산방식인 Lean방식에서 가져왔어요</span><br><span class="line"></span><br><span class="line">Goal 수립 : 명확한 목표, Epic 정의</span><br><span class="line">- Story Workshop: Epic, Story 도출, 전략짜기, PBI(Product Backlog Items)</span><br><span class="line">- Breakdown : Epics -&gt; Stories -&gt; Tasks (Product Backlog -&gt; Sprint Backlog)</span><br><span class="line">Planning : 팀 전체의 계획, 역할분담</span><br><span class="line">- 이 일이 얼마나 걸릴지 추정하는 것이 가장 어려움</span><br><span class="line">- Planning Poker : 작업 크기 추정, 상호 연관 작업 간 조율, 담당자 결정정</span><br><span class="line">- 항상 애자일에서는 할 일들을 단위로 나누어서 시각화를 합니다, 팀 내 맥락이 공유되기 위함</span><br><span class="line">- Product Owner가 기능 명세서를 가지고 설명해준 뒤에 서로 얼마나 걸릴지 예상해서 생각한 근거를 나눔, 가용할 수 있는 시간 내에 가능한지를 검토하고 협의하는 과정</span><br><span class="line">- 이 과정에서 나오는 숫자들은 성과 측정과는 전혀 무관하다</span><br><span class="line">Daily Scrum : 매일 서로 진행 상황/이슈 공유 + Blocker(장애물) 제거</span><br><span class="line">- 어제 무엇을 얼마나 했고, 오늘 무엇을 할 예정인데, 문제점/이슈는 이런 것이 있다</span><br><span class="line">- 내 상태를 다른 사람과 공유해서 확인하는 자리</span><br><span class="line">- 칸반보드에 현재 상황을 반영하고, 번다운 차트를 그려요(burndown chart)</span><br><span class="line">- 15분 내에 끝낸다</span><br><span class="line">- 저녁 때 해서 오늘 뭐했고, 내일 무엇을 할지를 나눌 수도 있어요</span><br><span class="line">- 이 모든 과정에서 성장을 위한 피드백을 주는 것이 목표에요</span><br><span class="line">- 해결책을 찾기 위해 공유를 하는 것이에요</span><br><span class="line">- 생산성을 떨어뜨리는 요소들을 발견하고 해결</span><br><span class="line">- Story별 Planning(스토리와 일정)</span><br><span class="line">- 단계별 목표를 주고 해결하도록 유도</span><br><span class="line">- Actor(주어, 사용자 || 관리자), Behavior, Goal(Why, Acceptance Criteria)</span><br><span class="line">- 추정 및 추정 기반 Planning</span><br><span class="line">- 이 Story가 테스트 단위 또는 데모 시연단위</span><br><span class="line">- AC가 곧 테스트커버리지 대상</span><br><span class="line">Review &amp; Retroperspective</span><br><span class="line">- 기획자의 의도와 개발자가 만들어낸 것이 같은가?</span><br><span class="line">- 서비스 배포를 통해 검증</span><br><span class="line">- Sprint Review &amp; Retroperspective</span><br><span class="line">- 스프린트는 2주이고, 2주마다 계획한 그대로 잘 했는지 리뷰</span><br><span class="line">- 대부분 일정보다 늦게 끝나요요</span><br><span class="line">- 다 같이 더 잘 할 방법 찾기기</span><br><span class="line">- Speed Car Retroperspective</span><br><span class="line">- 장애요소를 찾아 다음 스프린트 때는 방해되지 않도록 제거</span><br><span class="line">- 2주 동안 할 수 있는 만큼만 해야지, 2주 후에 번아웃이 되선 안 된다다</span><br><span class="line">- 다 같이 전체적으로 잘 하는 것이 중요하지, 혼자 다 하는 것이 좋은 것이 아니다</span><br><span class="line"></span><br><span class="line">핵심적인 기능을 많이 만드세요(로그인 기능만 만들다가 끝나는 프로젝트도 상당수)</span><br><span class="line">기간 내에 할 수 있는 일을 잘 정리하는 것이 중요합니다</span><br><span class="line">스크럼과 더불어 커밋 푸시도 루틴함이 필요해요</span><br><span class="line">커밋이 Task와 같이 갈 수 있도록 시도해보세요</span><br><span class="line">애자일은 더 잘 하기 위해서 만들어진 것입니다</span><br><span class="line">리소스의 20~30%는 커뮤니티에 쏟게 됩니다, 이 점을 염두해두고 플래닝을 해야 합니다</span><br><span class="line">생각보다 작게 잡고 예상을 해야 합니다</span><br></pre></td></tr></table></figure><hr><h3 id="170329"><a href="#170329" class="headerlink" title="170329"></a>170329</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">브라우저별로 상황이 달라서, 로직만큼이나 브라우저를 위한 코드가 많아지게 됨</span><br><span class="line">(예전에는 QuerySelector, InnerHTML, Insertadjacenthtml, classList, addEventListener와 같은 것이 없었어요)</span><br><span class="line">그것을 대체하기 위해서 나온 해결책 중 하나가 jQuery</span><br><span class="line">Method Chaining 즉, 직관적이고 사고와 일치하는 패턴으로 지원하기 시작함</span><br><span class="line">API 설계가 참 잘 되어있고, 문서화도 참 잘 되어있음, 지원해주는 플러그인도 많음</span><br><span class="line"></span><br><span class="line">요새는 갈수록 호환성 이슈가 줄고, ES표준이 좋아지고 있어서,</span><br><span class="line">jQuery가 아닌 Polyfill을 쓰는 것이 더 좋아요</span><br><span class="line">(jQuery보다 빠르고, 표준이니까 의존적일 필요도 없어요)</span><br><span class="line">폴리필로 쓰다가, 지원 브라우저 버전이 업그레이드되면 폴리필만 걷어내면 되어요</span><br><span class="line">Animation을 구현할 때, CSS3를 통해서 구현하는 것이 훨씬 좋아요</span><br><span class="line">요새는 의존성이 없는 라이브러리를 선호하는 추세에요</span><br><span class="line">jQuery Mobile이라는 것이 있는데, Mobile UI(+Interaction)를 만드는 패키지에요</span><br><span class="line"></span><br><span class="line">체이닝을 지원한다는 것은 좋은 라이브러리의 요건이라고 생각해요</span><br><span class="line">쓴다 안 쓴다는 일단 써보고 경험해보고 결정해보세요</span><br><span class="line">장단점을 느끼고 누구에게 말할 수 있어야 하고 제작할 수 있어야 해요</span><br><span class="line">이것을 써서 모든 것을 다 해야지 이런 식의 접근은 하지 말고,</span><br><span class="line">좋은 도구라는 것은 무엇일지 고민해보세요</span><br><span class="line">자바스크립트 표준이라는 것이 무엇인지 잘 이해하고 라이브러리에 접근해보세요</span><br><span class="line">먼저 자바스크립트 표준에 대해 잘 이해해야 합니다, 표준을 나중에 익히면 표준이 어색하게 느껴집니다</span><br><span class="line"></span><br><span class="line">회사에 가서 브라우저 지원 범위를 명확히 알아야 합니다, 그것에 맞춰서 최대한 표준을 활용해보세요</span><br><span class="line"></span><br><span class="line">특정 디바이스에 따라서 애니메이션 등을 지원해주지 않는 방법도 있어요</span><br><span class="line"></span><br><span class="line">javascript feature detection google search url</span><br><span class="line">https://goo.gl/kL96fX</span><br><span class="line"></span><br><span class="line">progressive enhancement google search url</span><br><span class="line">https://goo.gl/j1Tk0c</span><br><span class="line"></span><br><span class="line">jQuery Method 써봤냐고 물어보는 회사는 가지 마세요, 가봐야 후회합니다!</span><br><span class="line"></span><br><span class="line">체이닝을 위해선 아래와 같이 구현되어야 해요</span><br><span class="line"></span><br><span class="line">var obj = &#123;</span><br><span class="line">    append : function(name) &#123;</span><br><span class="line">        this.name += name;</span><br><span class="line">return this;</span><br><span class="line">    &#125;,</span><br><span class="line">    removeSpecial : function() &#123;</span><br><span class="line">        this.name = this.name.replace(/[^a-z]/ig, &quot;&quot;);</span><br><span class="line">return this;</span><br><span class="line">    &#125;,</span><br><span class="line">    getName : function() &#123;</span><br><span class="line">        return this.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var code = Object.create(obj);</span><br><span class="line">code.name = &quot;^^crong$$&quot;;</span><br><span class="line">var cleanName = code.append(&quot;))))))&quot;).removeSpecial().getName();</span><br><span class="line">console.log(cleanName); //crong</span><br><span class="line"></span><br><span class="line">어떤 것은 상태값을 반환하고 어떤 것은 함수를 반환하는 등 일관성이 없어선 안 됩니다</span><br><span class="line">사용자가 예상할 수 없게 만든다는 것은 설계가 잘못되었다는 것입니다</span><br></pre></td></tr></table></figure><hr><h2 id="170330"><a href="#170330" class="headerlink" title="170330"></a>170330</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line">컨벤션에 따라서 자바는 파일명과 클래스명은 대문자로 시작하고, 파일명과 public class명은 늘 같아야 한다</span><br><span class="line"></span><br><span class="line">컴파일 : .java라는 파일을 컴퓨터가 인식할 수 있는 바이너리 코드로 바꿔주는 것</span><br><span class="line"></span><br><span class="line">메인 메소드로부터 프로그램이 시작됩니다(entry point)</span><br><span class="line"></span><br><span class="line">C언어를 쉽게 만들려고 나온 언어가 java에요(C언어 쉽게 + 객체지향)</span><br><span class="line">C언어도 늘 main에서 시작해요, main이 없으면 실행되지 않아요</span><br><span class="line">public 어떤 class의 main에서 무조건 시작!</span><br><span class="line"></span><br><span class="line">자바는 함수를 메소드라고 불러요, 클래스 관점에서 바라보기 때문이에요</span><br><span class="line">항상 소문자로 시작합니다</span><br><span class="line"></span><br><span class="line">println : method</span><br><span class="line">System : class</span><br><span class="line">out : 객체</span><br><span class="line"></span><br><span class="line">String[] : String의 배열타입을 인자로 주겠다</span><br><span class="line"></span><br><span class="line">C#은 Java를 벤치마킹해서 만들었어요</span><br><span class="line">Java 다음 언어는 Scala라고 보시면 되어요</span><br><span class="line"></span><br><span class="line">public static void main</span><br><span class="line"></span><br><span class="line">1byte</span><br><span class="line">= 8bit</span><br><span class="line">= 00000000 ~ 11111111</span><br><span class="line">= 0 ~ 255</span><br><span class="line"></span><br><span class="line">int 4byte = 4G</span><br><span class="line">0이 8개있으면 1억이에요</span><br><span class="line">int는 40억까지 되어요</span><br><span class="line">범위 -20억 ~ +20억</span><br><span class="line"></span><br><span class="line">float, double는 연산이 정확하지 않아요</span><br><span class="line">java는 true false가 소문자에요</span><br><span class="line"></span><br><span class="line">16진수 하나 4bit, 2^4 = 16 / 0000~1111</span><br><span class="line">16진수중에 가장 의미있는 숫자는 64에요</span><br><span class="line">16 * 6 + 4 = 100</span><br><span class="line"></span><br><span class="line">2^4 = 16, 2^8 = 256</span><br><span class="line"></span><br><span class="line">2^10 = 1K</span><br><span class="line">2^20 = 1M</span><br><span class="line">2^30 = 1G</span><br><span class="line">2^40 = 4G</span><br><span class="line"></span><br><span class="line">컴퓨터 내부에는 문자열이라는 타입은 없어요, 모두 숫자로 저장하지만 문자열로 보여주는 것 뿐이에요</span><br><span class="line"></span><br><span class="line">String c = &quot;hello&quot;;</span><br><span class="line">c는 변수가 아니라 스트링의 인스턴스의 참조에요</span><br><span class="line"></span><br><span class="line">메모리는 1byte씩 주소값을 가져요</span><br><span class="line">0000 0000 ~ ffff ffff 이렇게 적으면 각각 4byte</span><br><span class="line">a = 4</span><br><span class="line">java외에는 케릭터와 스트링이 같아요</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">  int a = 4;</span><br><span class="line">  double b = 3.5;</span><br><span class="line">  String c = &quot;Hello&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int a = 4;</span><br><span class="line">int가 4byte이니, 0000 0000 ~ 0000 0003 에 4라고 적고 a라는 별명을 붙여줘요</span><br><span class="line"></span><br><span class="line">double b = 3.5;</span><br><span class="line">함수는 스택을 만들기 때문에, 주소도 위로 쌓여요(0000 0000 앞에 메모리 할당)</span><br><span class="line"></span><br><span class="line">변수 선언은 각각의 타입에 맞는 메모리만큼 할당해주는 과정이에요</span><br><span class="line"></span><br><span class="line">String a = &quot;Hello&quot;;</span><br><span class="line">스택이 아닌 heap에 저장되어요</span><br><span class="line">4byte cccc 0000, Hello는 이런 주소에 저장되어요</span><br><span class="line">c에 Hello가 있는 곳의 주소를 저장해요, primitive외에는 주소를 저장하는거에요</span><br><span class="line"></span><br><span class="line">c = &quot;Hello&quot; + &quot;World&quot;;</span><br><span class="line">라고 하는 순간, &quot;Hello World&quot;를 어딘가 저장하고 c에 주소값을 할당해서 참조를 바꿔주는 거에요</span><br><span class="line"></span><br><span class="line">나중에 &quot;Hello&quot;는 GC(Garbage Collector)가 정리해줘요</span><br><span class="line"></span><br><span class="line">String a = &quot;*&quot;;</span><br><span class="line">for (1~1,000,000)</span><br><span class="line">a += &quot;a&quot;;</span><br><span class="line"></span><br><span class="line">String은 Imutable하기 때문에 돌릴 때마다 클래스를 하나씩 만들어줘요</span><br><span class="line">String buffer는 Imutable하지 않아서 이럴 때는 String buffer를 써요</span><br><span class="line">옛날 프로그램들은 GC가 정리해주지 않아서 Memory Leak으로 인해 뻗어요</span><br><span class="line"></span><br><span class="line">C의 전제는 개발자는 올마이티하다 에요</span><br><span class="line"></span><br><span class="line">다른 사람들이 잘 못 알아듣는 단어도 가끔 써줘야 해요</span><br><span class="line">사실 리터럴은 누구나 아는 단어에요</span><br><span class="line">변수에 값을 대입하기 위한 것</span><br><span class="line">메모리(Data, Code, Stack, Heap)의 Code영역에 저장되고, 그것의 메모리주소가 변수에 할당되어요</span><br><span class="line"></span><br><span class="line">한 줄일 때는 &#123;&#125;를 생략해도 되지만 무조건 쓰세요 (컨벤션을 위해서)</span><br><span class="line"></span><br><span class="line">Tab과 Space는 절대 섞어쓰지마세요</span><br><span class="line"></span><br><span class="line">for (i = 1; i &gt; 10; i++) &#123; 에서 i는 무조건 실행되어요</span><br><span class="line">System.out.println(i); 하면 1이 나와요</span><br><span class="line"></span><br><span class="line">코드는 짧은 것이 중요한게 아니라 가독성이 가장 중요해요</span><br><span class="line"></span><br><span class="line">언어마다 구현방식도 철학도, 문법도 다 달라요</span><br><span class="line">언어의 표준과 구현체도 달라요</span><br><span class="line"></span><br><span class="line">// 메소드 선언 방식 public static returntype func_name(arg1, arg2) &#123; &#125;</span><br><span class="line"></span><br><span class="line">자바는 함수가 무조건 클래스에 속해야만 합니다</span><br><span class="line"></span><br><span class="line">method 안에만 code를 쓸 수 있습니다</span><br><span class="line">java는 class method가 전부에요</span><br><span class="line"></span><br><span class="line">void에는 return이 필요없어요</span><br><span class="line"></span><br><span class="line">public은 접근제어자 이구용 !</span><br><span class="line">static은 이 클래스를 객체화 시키지 않아도 바로 메모리에 올려놓겠다 라는 거에요</span><br><span class="line">void는 각 메소드에는 항상 마지막에 return 이라는 반환값이 있어야 하는대, 그게 아무것도 없어도 된다 라는 거구요</span><br><span class="line">main은 이 메소드는 이름이 main이다 라는 거 메소드 명</span><br><span class="line">void자리에 int가 들어가면 이 메소드는 다 실행한 후 return 값으로 int값을 반환하겠다 라는 거에요</span><br><span class="line"></span><br><span class="line">함수는 값을 돌려주겠다는 것과 종료하겠다는 의미를 같이 가지고 있어요</span><br><span class="line"></span><br><span class="line">Object : State와 Behavior가 있는 소프트웨어 꾸러미</span><br><span class="line">  - State : 변수</span><br><span class="line">  - Behavior : 메소드 (함수)</span><br><span class="line"></span><br><span class="line">Class : user defined data type with behavior</span><br><span class="line">  - new 키워드를 이용함</span><br><span class="line"></span><br><span class="line">Class는 new가 필요한데, String은 없어도 되어요</span><br><span class="line">모든 클래스는 멤버변수를 가질 수 있어요, 각각의 인스턴스들이 고유하게 가지는 값을 Instanc 변수라고 해요</span><br><span class="line"></span><br><span class="line">DB에 저장되는 것들이 Class의 대상이 되어요</span><br><span class="line"></span><br><span class="line">같은 folder에 있는 class file들끼리는 바로 불러와서 쓸 수 있어요</span><br><span class="line"></span><br><span class="line">포유류라는 것은 원래 존재하지 않죠? 이런 것으로 추상 클래스라고 있어요</span><br><span class="line">추상 클래스는 행동이 없어요, 동작이 없는 메소드가 추상 메소드, 추상 메소드가 있으면 추상 클래스</span><br><span class="line">구현된 몸체가 없으면 추상 메소드</span><br><span class="line">추상 메소드가 있으면 객체를 만들어낼 수 없어요, 상속받을 다른 클래스를 만들고 추상 메소드를 대신 정의해줘야 해요(메소드 오버라이딩)</span><br><span class="line">move는 다 하고 싶지만, 각각의 방식은 모두 다르게 하고 싶을 때</span><br><span class="line"></span><br><span class="line">다중상속을 위해 인터페이스라는 것이 있어요!</span><br><span class="line">인터페이스는 능력에 관한 것이 많아서 able로 끝나는 것이 많아요</span><br><span class="line">인터페이스에는 구현된 것이 아무 것도 없어요!</span><br><span class="line">추상메소드만 있으면 인터페이스에요</span><br><span class="line"></span><br><span class="line">면접장에서 Java가 다중상속이 지원되는지 를 자주 물어봐요</span><br><span class="line"></span><br><span class="line">new로 만드는 순간 무조건 Heap에 저장되어요</span><br><span class="line"></span><br><span class="line">메모리를 잘못 썼기에 NullPointerException이 발생해요</span><br><span class="line"></span><br><span class="line">추상 메소드 -&gt; 추상 클래스 -&gt; for 다중상속 인터페이스</span><br><span class="line">배열 선언시의 new</span><br><span class="line"></span><br><span class="line">잘 모르겠을 때는 그림을 그려봐라</span><br><span class="line"></span><br><span class="line">CPU 클락은 1초에 컴퓨터가 몇 개의 명령어를 처리할 수 있는가를 나타내는 단위</span><br><span class="line"></span><br><span class="line">시간의 최소단위가 클락이라고 해서, 모든 명령어를 저 단위로 할 수 있다는 것을 의미하지 않음</span><br><span class="line">어떤 명령어는 1클락, 어떤 명령어는 1000클락</span><br><span class="line">나누기는 정말 오래 걸리는 연산이에요, 정수보다 실수를 연산하는 것이 훨씬 느려요</span><br><span class="line"></span><br><span class="line">기계어 -&gt; 디스크 -&gt; 실행 -&gt; 메모리</span><br><span class="line"></span><br><span class="line">Program Counter : 내 프로그램이 어디까지 실행되었는지 기록하는 레지스터</span><br><span class="line"></span><br><span class="line">컴퓨터 구조 라는 수업을 들으면 컴퓨터 구조에 대해 알 수 있어요</span><br><span class="line"></span><br><span class="line">메모리와 레지스터 사이에 캐시가 있어요</span><br><span class="line"></span><br><span class="line">프로그램이 메모리에 올라가면 프로세스가 됩니다</span><br><span class="line">프로세스는 실행중인 프로그램이에요</span><br><span class="line"></span><br><span class="line">32bit machine은 명령어를 한 번에 읽어들일 수 있는 것이 4byte이에요</span><br><span class="line">한 번에 전선 32가닥을 읽어들일 수 있다는 것이에요요</span><br><span class="line">프로세스 하나당 4GB를 차지해요</span><br><span class="line">메모리의 일부를 하드에 저장했다가 필요할 때 불러오는 것은 swap방식이에요</span><br><span class="line">4Gbyte를 모두 쓸 수 있지만, 일반적으로 그 중의 일부만 사용해요</span><br><span class="line">가상 메모리 덕분에 동시에 많은 것을 처리할 수 있어요</span><br><span class="line">프로세스는 가상 메모리를 쓰지만, 실제로 어느 물리 메모리에 저장되는지는 알지 못 해요</span><br><span class="line">모든 프로세스는 4GB를 혼자 쓴다고 생각하고 있어요</span><br><span class="line">용량이 늘어나면 swap이 덜 일어나요</span><br><span class="line"></span><br><span class="line">메모리는</span><br><span class="line">CODE : 컴파일된 기계명령어를 보관하는 곳곳</span><br><span class="line">DATA : 전역변수</span><br><span class="line">STACK : 지역 변수, CallStack (함수 호출이 끝나면 사라져요)</span><br><span class="line">HEAP : 동적 할당영역(JS의 Object를 만들면 HEAP에 들어가요)</span><br><span class="line"></span><br><span class="line">GC는 HEAP을 잘 정리하는 것이에요</span><br><span class="line">STACK은 함수가 끝나면 알아서 다 휘발되어요</span><br></pre></td></tr></table></figure><hr><h2 id="170331"><a href="#170331" class="headerlink" title="170331"></a>170331</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">비주얼디자인에 너무 초점을 두지 둘 필요가 없고, 외부 스타일 가이드를 가져다 쓸 것</span><br><span class="line">데모 때 이쁘게 보이는 것은 아주 중요합니다, 경영진은 주로 UI로 평가하곤 합니다</span><br><span class="line"></span><br><span class="line">완료조건대로 테스트를 하고, 데모 시연을 하세요</span><br><span class="line">모든 팀원이 이번 주 해야 할 목표를 정확히 알고 있어야 합니다</span><br><span class="line">데모 때는 이번 스프린트에서 완성되어야 할 내용이 담긴 데모 시나리오를 가지고, 보면서 진행하면 됩니다</span><br><span class="line"></span><br><span class="line">데모를 하려면 전 날 자정 정도까지는 코드 프리징이 되어야 하고, 그러기 위해서 그 이전의 테스트 계획 등도 착착 나와야 합니다</span><br><span class="line">데모도 하나의 릴리즈입니다, 이번 주의 완성품은 어디까지 되어야 하는가?</span><br><span class="line"></span><br><span class="line">이슈에 커밋번호를 넣어놓으면 바로 연결할 수 있어요</span><br><span class="line">하나의 이슈가 해당하는 어떤 커밋과 연결되어있는 것이 아주 좋아요</span><br><span class="line">이슈에 대한 이슈를 기재하세요</span><br><span class="line">리스크를 최소화하기 위해서 수시로 머지를 해서 지속적 통합(충돌없이 계속 빌드/배포를 할 수 있는 것)을 하세요</span><br><span class="line"></span><br><span class="line">Issue를 Close할 때, 그 시점에 대한 이슈들을 적어주는게 좋아요(안 그러면 추정을 할 수가 없어요)</span><br><span class="line"></span><br><span class="line">원래 Ajax는 다른 도메인에는 안 되요</span><br><span class="line">그래서 최근에 CORS라는 것이 나왔어요</span><br><span class="line">서버에서 헤더값에 관련한 설정을 할 수 있어요, 내가 허용할 수 있는 도메인이 무엇인가, 일치하면 데이터를 받을 수 있어요</span><br><span class="line"></span><br><span class="line">JSONP (padding)은 완전 다른 방법이에요, 콜백함수를 주고 받으며 클라이언트에서 실행하는 등의 방식이에요</span><br><span class="line">네이버 검색창은 JSONP로 되어있어요, 사실상 표준처럼 제일 많이 사용해요</span><br><span class="line"></span><br><span class="line">기획서는 쉽게 공유/수정할 수 있는 방법이 가장 좋아요</span><br><span class="line">업무할 때 가장 비효율인 것중 하나가 싱크가 제대로 안 되는 것이에요</span><br><span class="line"></span><br><span class="line">커밋을 좀 더 자주 나누어서 많이 하세요, 전체적으로 더 자주 하셔야 합니다</span><br><span class="line"></span><br><span class="line">팀 활동을 최대한 많이 해보세요</span><br><span class="line">페어 프로그래밍도 꼭 해보세요</span><br></pre></td></tr></table></figure><hr><h3 id="170405"><a href="#170405" class="headerlink" title="170405"></a>170405</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">ES6는 아직 한국은 많이 못 쓰이고 있어요, 하지만 외국에서는 많이 쓰이고 있고, 이게 곧 표준이기 때문에 잘 배워야 해요, 브라우저 호환성이 매우 좋아졌어요</span><br><span class="line"></span><br><span class="line">Const를 기본으로 쓰고, 문제가 생기면 let을 쓰세요, var를 쓰지마셔요</span><br><span class="line"></span><br><span class="line">새로운 메소드를 익힐 때 브라우저 지원범위를 늘 보셔야 해요</span><br><span class="line"></span><br><span class="line">for in은 객체를 돌릴 때 써요</span><br><span class="line">자기가 가지고 있지 않은 것도 함께 탐색해요</span><br><span class="line">사용자에 의해 추가된 프로퍼티를 다 가져와서 보여줘요</span><br><span class="line">자기 것이 아니어도 가져와요</span><br><span class="line">객체에서 쓸 때도 내가 가지고 있는 것만 보여주려면 hasOwnProperty를 썼어야 했어요</span><br><span class="line"></span><br><span class="line">for of는 자기가 가지고 있는 것만 보여줘요</span><br><span class="line">string에서도 쓸 수 있어요</span><br><span class="line"></span><br><span class="line">concat처럼 Spread Operator로도 객체를 복사할 수 있어요</span><br><span class="line"></span><br><span class="line">=== 원시타입일 때는 값으로 비교, Object일 때는 주소값으로 비교</span><br><span class="line"></span><br><span class="line">...을 외우려고 하지 말고, 펼쳐서 들어간다고 생각하면 아주 쉬워요</span><br><span class="line"></span><br><span class="line">원래 문제가 무엇이었는지 잘 익히고 배우는게 중요해요</span><br><span class="line"></span><br><span class="line">Destructuring을 쓸 때,</span><br><span class="line">배열은 순서가 중요하니까 ,,로 명시가 필요하고</span><br><span class="line">객체는 이름이 중요하니까 property name을 명시하면 됩니다</span><br><span class="line"></span><br><span class="line">function getNewsList(&#123;target&#125;) &#123;</span><br><span class="line">  console.log(target);</span><br><span class="line">&#125;</span><br><span class="line">getNewsList(evt);</span><br><span class="line"></span><br><span class="line">자기가 아는 지식을 설명할 줄 알아야 합니다</span><br><span class="line"></span><br><span class="line">객체에 관해 조작할 때는 set보다는 weakSet을 사용하세요</span><br><span class="line">데이터가 담겨있는지 체크해야 한다면 set, weakSet을 떠올려보세요</span><br><span class="line">새로운 데이터 구조에요</span><br><span class="line">문자열은 set으로 쓰세요</span><br><span class="line"></span><br><span class="line">set을 Array.from을 쓰면 변환할 수 있을거에요</span><br><span class="line"></span><br><span class="line">map, weakMap은 키/값 구조에요(set보다 부연설명을 할 수 있어요)</span><br><span class="line">예를 들면 함수를 호출회수를 담아놓을 수 있어요</span><br><span class="line">map은 set에 대한 보완이에요, 있는지 없는지만 체크 set, 부연설명 필요하면 map</span><br><span class="line">참조를 가진 것만 모으고 싶으면 weakSet, weakMap</span><br><span class="line"></span><br><span class="line">Class를 통해서 set과 map을 구현해보세요</span><br><span class="line"></span><br><span class="line">여기서의 Map과 고차함수의 Map은 다른 뉘앙스이다</span><br><span class="line"></span><br><span class="line">면접 때 질문을 받았는데 설명을 못 하겠으면, 이해했었는데 잊어버려서 5분 시간을 주시면 찾아보고 설명드리겠다고 해볼 것</span><br><span class="line"></span><br><span class="line">tagged 할 때 \ 붙여주면 문자열로 쓸 수 있어요</span><br><span class="line"></span><br><span class="line">arrow function을 쓸 때 &#123;&#125;를 안 쓰면 자동으로 return을 해줘요</span><br><span class="line"></span><br><span class="line">var obj = &#123;</span><br><span class="line">run() &#123;</span><br><span class="line">setTimeout(function() &#123;</span><br><span class="line">console.log(this);</span><br><span class="line">&#125;, 1000);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.run(); //window</span><br><span class="line"></span><br><span class="line">var obj = &#123;</span><br><span class="line">run() &#123;</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">console.log(this);</span><br><span class="line">&#125;, 1000);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.run(); //obj</span><br><span class="line"></span><br><span class="line">Debugger를 계속 하면서 추적하고 탐구하는 습관을 들이세요</span><br><span class="line"></span><br><span class="line">비동기 콜백 상황 : Ajax, EventListen, SetTimeOut</span><br><span class="line"></span><br><span class="line">존재에는 모두 이유가 있습니다</span><br><span class="line"></span><br><span class="line">Default Parameter 대체하기</span><br><span class="line">function sum(value, count, size) &#123;</span><br><span class="line">count = count || 10;</span><br><span class="line">size = size || 20;</span><br><span class="line">return value * size;</span><br><span class="line">&#125;</span><br><span class="line">sum(3,10);</span><br><span class="line"></span><br><span class="line">rest operator와 spread operator는 다릅니다</span><br><span class="line"></span><br><span class="line">array.every, array.some</span><br><span class="line"></span><br><span class="line">Object.create가 사실상 표준이라고 생각하면 되어요!</span><br><span class="line"></span><br><span class="line">__proto__가 표준이 되었어요!</span><br><span class="line"></span><br><span class="line">항상 가볍게 짜는 것이 좋기 때문에, 라이브러리에 의존하지 않고 순수한 코드로 구성하는 것이 좋습니다</span><br><span class="line"></span><br><span class="line">DOM과 Template를 최적화시키는 것이 프론트의 핵심이에요</span><br><span class="line">모바일은 ES6를 쓸 수 있습니다</span><br><span class="line">ES6는 Babel로 트랜스파일링을 할 수 있기 때문에 괜찮지만,</span><br><span class="line">IE8, 9는 ES5도 지원하지 않아서 PC는 어려움이 많습니다</span><br></pre></td></tr></table></figure><hr><h3 id="170407"><a href="#170407" class="headerlink" title="170407"></a>170407</h3><p>크롱의 조언<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">커밋단위가 너무 큼</span><br><span class="line">작은 기능이 완성되었을 때 하라</span><br><span class="line">정말 작아도 좋다</span><br><span class="line">라인 수와 상관없이, 함수 단위가 좋다</span><br><span class="line"></span><br><span class="line">자주 올리는 것이 훨씬 낫다</span><br><span class="line"></span><br><span class="line">팀으로 같이 문제를 해결하는 것이 중요한데,</span><br><span class="line">각자가 맡은 부분에 너무 집중한 것이 아닌가?</span><br><span class="line"></span><br><span class="line">브랜치명도 중요합니다</span><br><span class="line"></span><br><span class="line">마일스톤을 좀 더 쪼개보세요</span><br><span class="line"></span><br><span class="line">이슈에 세부 작업을 표시해서 진행해보세요</span><br><span class="line"></span><br><span class="line">커밋로그를 잘 써보세요</span><br><span class="line"></span><br><span class="line">항상 머지를 자주 해주세요요</span><br><span class="line"></span><br><span class="line">테스트 코드를 통해서 머지할 때 검증되도록 하는 것이 좋습니다</span><br><span class="line"></span><br><span class="line">Merge &amp; Change 라는 항목을 프로젝트에 따로 만들어두는 것이 정말 좋아요</span><br><span class="line"></span><br><span class="line">팀의 대시보드, 현황판 역할을 프로젝트가 해줘야 해요</span><br><span class="line">https://github.com/NamNUNU/SNS_Project/projects/2</span><br><span class="line">극찬대상</span><br><span class="line"></span><br><span class="line">완료조건이 충족되었는지 여부는 커밋 아이디를 적어두어서 확인할 수 있도록 할 것</span><br><span class="line"></span><br><span class="line">팀의 코드라면 서로 리뷰를 하고, 최대한 코드를 공유할 수 있도록 노력하고 하는 것</span><br><span class="line"></span><br><span class="line">1년에서 실제 개발 기간은 3개월 정도 밖에 안 되곤 해요,</span><br><span class="line">커뮤니케이션, 테스트, 버그 대응 등 하다보면 개발할 시간이 별로 없는 것이 현실입니다</span><br><span class="line"></span><br><span class="line">테스트에 신경쓰면 한 단계 높은 개발자가 될 수 있을 것입니다</span><br><span class="line"></span><br><span class="line">팀의 상태를 자주 들여다봐야 합니다</span><br><span class="line">마음 속으로 대충 알고 있는데, 그것을 꺼내놓는 용기를 가져야 합니다</span><br><span class="line">거듭 진단해보세요</span><br><span class="line"></span><br><span class="line">CSS 단위를 통일시키세요</span><br><span class="line">컨벤션을 만들어서 유지하세요</span><br><span class="line">클래스명은 어떻게 쓸 것인지도</span><br><span class="line"></span><br><span class="line">유틸리티와 같은 것은 별도 파일로 독립시켜서 가져다쓰세요</span><br><span class="line"></span><br><span class="line">고차함수도 한 번 써보세요</span><br><span class="line"></span><br><span class="line">자주 쓰이는 것은 변수로 캐싱하세요</span><br><span class="line"></span><br><span class="line">하드코딩하지 마세요</span><br><span class="line">이름을 적는 순간 그곳에 종속된 메소드가 되어버려요</span><br><span class="line"></span><br><span class="line">외부 오픈소스를 썼다면 README.md에 기재해주세요</span><br><span class="line"></span><br><span class="line">라이센스에 대해서도 공부해보세요</span><br><span class="line"></span><br><span class="line">외부 라이브러리를 쓸 때는 별도의 파일로 만들어놓고 불러다 쓰세요</span><br><span class="line"></span><br><span class="line">Util을 만들어두면 js.doc와 같은 라이브러리를 통해 함수인자, 리턴값 등을 적어서 쓸 수 있게 공유해야 해요</span><br><span class="line"></span><br><span class="line">지역변수로 쓸 수 있는 것은 지역변수로 쓰세요</span><br><span class="line"></span><br><span class="line">EventListenr 안에는 밖에서 만들어둔 것을 호출해서 쓰세요</span><br><span class="line"></span><br><span class="line">템플릿을 관리할 때는 일관된 방식을 쓰는 것이 좋아요</span><br><span class="line">기왕이면 HTML안에 적는 방식은 피하세요</span><br><span class="line"></span><br><span class="line">잘한 것, 못한 것, 개개인에 대한 솔직한 피드백</span><br><span class="line"></span><br><span class="line">커밋 하나 하나를 쳐다볼 것이지, 기능 많이 구현한 것은 별 필요없을 수 있어요</span><br><span class="line"></span><br><span class="line">조금씩 아는 것은 다 모르는 것이나 별 차이 없어요</span><br></pre></td></tr></table></figure></p><hr><h2 id="170410"><a href="#170410" class="headerlink" title="170410"></a>170410</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">실제 조에 개발 인력이 절반이 안 될 수 있어요</span><br><span class="line"></span><br><span class="line">분업을 할지 협업을 할지 결정하는게 좋아요</span><br><span class="line"></span><br><span class="line">클라이언트는 원래 모델을 전혀 신경쓰지 않았는데, 그것을 가져오기 시작했어요</span><br><span class="line">View만 있다가 Model이 오니까 Controller가 따라왔어요, 그러다보니 복잡도가 증가해요</span><br><span class="line"></span><br><span class="line">React는 View가 핵심이에요</span><br><span class="line"></span><br><span class="line">OpenGL을 Web에서 쓸 수 있게 해준 것이 WebGL이에요</span><br><span class="line"></span><br><span class="line">라이브러리는 개발단계에서 자주 사용되는 기능들을 묶어서 제공해요</span><br><span class="line"></span><br><span class="line">프레임워크는 모두 묶여서 패키지로 제공되어요</span><br><span class="line">프레임워크는 구현해야 할 기능들이 내부적으로 모두 연결되어있고 관계되어있어요</span><br><span class="line">정해져있는 틀(와꾸)이 있어요, 러닝커브가 높아요</span><br><span class="line">대신 숙련되지 않은 개발자들도 평균 수준을 유지할 수 있어요</span><br><span class="line">협업에도 유리해요</span><br><span class="line"></span><br><span class="line">규모가 큰 회사들은 자체적인 프레임워크를 도입하려는 경우가 많아요</span><br><span class="line">프레임워크를 아예 안 쓰는 경우들도 있어요, 사실 Vanila가 제일 빨라요</span><br><span class="line"></span><br><span class="line">자바 개발자들은 앵귤러를 선호하는 경우가 많아요(원래 하던 개발과 유사해요)</span><br><span class="line"></span><br><span class="line">리액트는 가벼운 프레임워크 또는 라이브러리와 프레임워크의 중간이라고 생각해요</span><br><span class="line"></span><br><span class="line">프레임워크에 대한 사고가 있어야 해요</span><br><span class="line"></span><br><span class="line">SPA : 페이지 전환없이 이루어지는 서비스</span><br><span class="line">구글 닥스, 페이스북, 트렐로</span><br><span class="line"></span><br><span class="line">SPA가 목적이어야 하는 것은 아닙니다</span><br><span class="line"></span><br><span class="line">인터넷은 리소스라는 키워드가 중요해요</span><br><span class="line">앱과 다르게 인터넷은 공유를 할 수 있어야 합니다</span><br><span class="line">그러기 위해 리소스는 유니크해야 합니다</span><br><span class="line">웹으로서의 큰 장점은 공유에요</span><br><span class="line"></span><br><span class="line">SPA는 페이지가 바뀌지 않지만 가짜 URL을 만들어서 보여줘요</span><br><span class="line">SPA에서는 템플릿이 매우 중요해요, 템플릿 작업 자체가 많아져요</span><br><span class="line">Ajax로 서버랑 데이터를 주고 받으면서 DOM조작이 빈번하게 일어나는 등의 진행이 이루어졌어요</span><br><span class="line">SPA가 성공하려면, 클라이언트만 잘 한다고 되는 것이 아니에요</span><br><span class="line">맨 처음 로딩 때는 서버사이드 렌더링을 하고, 그 다음부터는 API 설계를 잘 해서 효과적으로 통신을 주고 받는 등의 협업 과정이 필요해요</span><br><span class="line"></span><br><span class="line">프레임워크의 단점을 얘기할 수 있는 사람은 정말 깊이 써본 사람일거에요</span><br><span class="line">공식 홈페이지에는 약파는 내용이 워낙 많아요</span><br><span class="line"></span><br><span class="line">라이브러리: 기능의 재사용</span><br><span class="line">프레임워크: 설계의 재사용</span><br><span class="line"></span><br><span class="line">프레임워크를 도입하려면 초기 도입을 위해 리서치 시간이 많이 필요해요</span><br><span class="line">우리 서비스에 잘 맞는 설계를 하는 것이 유지보수를 위한 비용을 훨씬 절감시킬 수 있어요</span><br><span class="line">React, Vue, FrameWork X 들을 모두 프로토타이핑해보는 등의 과정을 거쳐요</span><br><span class="line">우리 팀이 원하는 서비스를 해당 프레임워크로 구현할 수 있는 능력(여건)이 있는지 확인할 수 있어요</span><br><span class="line">팀 내에 비협조적인 인간이 있다면 내보내야해요</span><br><span class="line">리서치하는 능력도 매우 중요해요, 보편적인 자료만으로는 우리 서비스에 잘 맞는지 검증하기 어려워요</span><br><span class="line">이미 공개되어있는 자료를 공유하는 것은 별 의미가 없어요</span><br><span class="line"></span><br><span class="line">UI는 재사용이 매우 어렵다는 것이 팩트에요</span><br><span class="line"></span><br><span class="line">컴포넌트 단위 개발은 내부에 HTML, CSS, JS 모두 내포하고 있어요 (재사용을 위해서)</span><br><span class="line">인터랙션과 스타일이 같아야 재사용할 수 있으니, 구글은 매테리얼 디자인 같은 것으로 통일시켜야 해요</span><br><span class="line">폴리머를 쓰려면, 스타일이 통일되어있어야 해요</span><br><span class="line">디자인과 스타일이 동일하기에 레고처럼 획일적으로 딱딱 쓸 수 있어요</span><br><span class="line">한국 사이트들은 복잡하고 헤비하고 밀도있게 가기 때문에 부적합한 면도 있어요</span><br><span class="line">또한 리액트는 퍼블리셔와의 협업 과정이 어렵기 때문에 부적합한 면도 있어요</span><br><span class="line">우리나라는 R&amp;R이 쓸데없이 명확해요, 네이버는 nts가 모든 마크업을 다 하고 있는데, 리액트를 쓰는 일부 조직은 자체적으로 해결하는 것이에요</span><br><span class="line">혼자 마크업과 JS를 다 하는 환경에 굉장히 적합해요, 프론트엔드 개발자가 구조 스타일 동작을 모두 다 할 수 있어야 해요, CSS도 못 하면 풀스택을 떠나서 클라이언트 풀스택조차 못 하는거에요</span><br><span class="line">퍼블리셔를 거쳐야만 한다면 필연적으로 개발이 늦어질 수 밖에 없어요</span><br><span class="line"></span><br><span class="line">모바일 웹은 PC 웹에 비해 보다 단순하기에 리액트와 같은 것이 더 적합할 수 있어요</span><br><span class="line">우리나라는 인터넷이 매우 빨라서 성능&amp;최적화에 대한 이슈가 흘러지나갔어요</span><br><span class="line">대신 글로벌하게 가는 사이트들은 여전히 많은 공부가 필요해요</span><br><span class="line"></span><br><span class="line">논리적이지 않은 것은 굳이 외우려고 하지 마시고 디버깅으로 해결하세요</span><br><span class="line"></span><br><span class="line">console.log(a); // function a() &#123; console.log(&quot;a&quot;); &#125;</span><br><span class="line">var a = 1;</span><br><span class="line">function a() &#123; console.log(&quot;a&quot;); &#125;</span><br><span class="line">console.log(a); // 1</span><br><span class="line">a(); // a is not a function</span><br><span class="line"></span><br><span class="line">리액트는 다른 프레임워크들과 다르게 뷰에만 집중했어요(모델 빼!)</span><br><span class="line">컴포넌트, JSX, Virtual DOM</span><br><span class="line">Virtual DOM이 왠만한 코드보다는 빨라요,</span><br><span class="line">내가 최적화에 대한 방법을 아주 잘 알고 있다면 비슷한 퍼포먼스일거에요</span><br><span class="line">마법처럼 동작하는 것은 성능적으로 의심해봐야 해요</span><br><span class="line">직접적으로 비교를 해보세요</span><br><span class="line"></span><br><span class="line">성능 차이가 있더라도, 유저가 느끼는 차이(체감 속도)가 훨씬 중요합니다</span><br><span class="line">성능 차이로 프레임워크를 선택하는 것은 부적절해요</span><br><span class="line">개발 생산성이 중요해요</span><br><span class="line"></span><br><span class="line">리액트 코드가 간결해보이는 것은 ES6의 힘인 것이 커요, 리액트 덕분이 아니에요</span><br><span class="line">모든 프레임워크들은 당시의 첨단 기능들을 넣어서 멋있어보이려고 해요</span><br><span class="line"></span><br><span class="line">ES2015라는 표준은 2015년에 따단하고 나온 것은 아니고, 미리 나뉘어 보급되고 있었어요</span><br><span class="line"></span><br><span class="line">리액트가 가져다 쓸 함수들이 많아서 라이브러리와 같은 특성이 있어요</span><br><span class="line"></span><br><span class="line">module loader와 같은 기능들이 아직 대부분의 브라우저에서는 동작하지 않는데,</span><br><span class="line">webpack과 같은 도구를 사용해서 사용할 수 있어요</span><br><span class="line"></span><br><span class="line">공식홈페이지에 있는 자료들을 바탕으로 공부를 하고, 해당 내용으로 Q&amp;A를 하는 것이 참 좋아요요</span><br><span class="line"></span><br><span class="line">한글 콘텐츠를 소비하다보면 영어에 대한 거부감이 점차 커져요</span><br><span class="line">영어로 읽는 트레이닝이 1~2년 되면 금방 해결되어요</span><br><span class="line"></span><br><span class="line">프레임워크를 책으로 공부하는 것은 바보같은 행위에요</span><br><span class="line">안 바뀌는 책을 사서 공부하세요</span><br><span class="line">프레임워크는 어제 발매된 것을 기준으로 개발하는 것이 최선일거에요</span><br><span class="line"></span><br><span class="line">react는 this.state에 상태와 관련한 정보를 담아두고 그것이 바뀌면 렌더링을 다시 해줘요</span><br><span class="line"></span><br><span class="line">createElement 또는 JSX 중에 선택해서 사용할 수 있지만 가독성이 JSX가 더 좋아요</span><br><span class="line"></span><br><span class="line">Webpack은 loader와 plugin을 공부해야 함</span><br><span class="line">code syntax, 코드에서 쓰는 여러 가지 신택스 결과물들을 가져다 쓸 수 있도록 해주는 것, 간편하게 외부 파일을 가져와서 코드에 포함시켜줌, loader</span><br><span class="line">코드 최적화, 코드 검사 등은 plugin</span><br><span class="line"></span><br><span class="line">lint 코드를 정적으로 검사, 로직이나 시맨틱하지 않은 부분</span><br><span class="line"></span><br><span class="line">gulp, grunt, Yeoman 등은 webpack으로 평정되어가는 분위기에요</span><br><span class="line"></span><br><span class="line">react component를 담은 파일은 .jsx라고 하면 명시적이어서 좋은 것 같아요(view만 담당하는 파일)</span><br><span class="line">action code는 .js가 맞아요</span><br><span class="line"></span><br><span class="line">새로운 프레임워크를 만나면 일단 구글에서 best practice를 붙여서 찾아봐요(원작자의 코드면 베스트)</span><br><span class="line"></span><br><span class="line">프레임워크로 짜도 의외로 사람마다 굉장히 달라요, 그래서 잘 짜는 사람의 코드를 봐야 해요</span><br><span class="line"></span><br><span class="line">코어는 가벼운데, 살을 붙이다보면 커지게 되어요</span><br><span class="line"></span><br><span class="line">전반적인 추세는 경험이 없다면 앵귤러, 자바스크립트를 잘 하면 리액트(조립을 할 수 있는 경우)</span><br><span class="line"></span><br><span class="line">구글은 만들어놓고 안 써서 믿을 수가 없어요(앵귤러, 폴리머 등)</span><br><span class="line"></span><br><span class="line">새로운 것 나왔다 -&gt; 왜 나왔지? 서포터가 있나? 누가 쓰나? 의심 의심 의심</span><br><span class="line"></span><br><span class="line">render 안에서는 보여주는 것들을 담아두시고, for, if 등의 작업은 별도 메소드에서 해보세요</span><br><span class="line">render에는 로직을 넣지 마세요</span><br><span class="line"></span><br><span class="line">state나 lifecycle이 없다면 functional component로 짜는 것이 더 좋아요</span><br><span class="line"></span><br><span class="line">리액트는 그냥 카멜표기법</span><br></pre></td></tr></table></figure><hr><h2 id="170412"><a href="#170412" class="headerlink" title="170412"></a>170412</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">트렌드에 너무 예민해하실 필요는 없어요</span><br><span class="line"></span><br><span class="line">이해하지 못 하고 사용해선 안 되어요(원리, 필요성 등)</span><br><span class="line">(axios를 왜 사용해야 하는가? ajax로는 왜 안 되는가? ajax와의 차이가 무엇인가? 어떻게 구현했을까?)</span><br><span class="line"></span><br><span class="line">키 값에는 고유한 값을 넣어줄 수 있으면 좋아요</span><br><span class="line"></span><br><span class="line">CSS를 inline으로 하기 보다는 ClassName으로 컨트롤을 많이 합니다</span><br><span class="line"></span><br><span class="line">defaultProps는 property값이 없으면 세팅해줄 때 적용되는거에요</span><br><span class="line"></span><br><span class="line">bind는 contructor에서 하는 것을 권장해요</span><br><span class="line"></span><br><span class="line">promise를 적용한 ajax인 fetch라는 것이 있어요</span><br><span class="line"></span><br><span class="line">setState는 DidMount 이후에 실행되어요</span><br><span class="line">setState도 비동기에요</span><br><span class="line">WillMount에서 setState를 사용하는 것은 이상한 것이에요</span><br><span class="line">(아직 그리지 않았는데, 그 사이에 변경사항을 주는)</span><br><span class="line"></span><br><span class="line">DOM조작은 DidMount에서 해야 해요</span><br><span class="line"></span><br><span class="line">React는 View에만 집중하도록 하는 것이 맞아요(Model, Hanlder를 분리하세요)</span><br><span class="line"></span><br><span class="line">shouldComponent를 통해서 변경되어도 렌더링되지 않도록 할 수 있어요(성능 개선)</span><br><span class="line"></span><br><span class="line">Ajax를 주고 받아서 보여주려고 하면, 비동기적으로 데이터가 없는 모습을 보여주는 상황들이 발생할 수 있어서 해결하기 위한 여러 가지 방법이 있어요</span><br><span class="line">React를 Server에서도 사용할 수 있어요, 서버사이드 렌더링</span><br><span class="line"></span><br><span class="line">create-react-app를 활용하면 Webpack 세팅을 별도로 하지 않아도 되어요</span><br><span class="line"></span><br><span class="line">그저 가져다쓰지 말고, redux와 같은 것을 설계해서 사용해보세요</span><br><span class="line">(redux와의 기술적 차이, 내 것의 장단점, 한계, 철학)</span><br><span class="line"></span><br><span class="line">Redux는 Architecture에요</span><br><span class="line">React와 Redux는 전혀 다른거에요</span><br><span class="line">Redux는 그저 데이터를 관리하기 위한 패턴이에요</span><br><span class="line"></span><br><span class="line">데이터, 스토어, 스테이츠, 모델 이라는 표현 중에서 states와 store를 많이 사용합니다</span><br><span class="line">서비스가 커도, Store는 하나입니다(하나의 객체 안에 모든 데이터를 JSON과 같이 보관하고 있는 것)</span><br><span class="line">코드 상으로는 Store가 보이지 않고, 내부 코드에서 구현되어있어요</span><br><span class="line"></span><br><span class="line">처리의 단순화를 위해서 단방향 흐름으로 처리해요</span><br><span class="line">프레임워크에서는 이러한 디자인 패턴이 매우 중요해요</span><br><span class="line">어떻게 흘러가는지 예측이 가능해진다, 소프트웨어는 예측가능한지 여부가 매우 중요합니다</span><br><span class="line"></span><br><span class="line">Action이 호출되면, 무엇이 발생했는지 Dispatcher에게 알려주고, 그것을 Store에 전달해주면 상태값을 변경하고,</span><br><span class="line">그 변경된 상태값을 View에 전달해서 어떤 View가 바뀌었는지 확인하고, 다시 렌더링한다</span><br><span class="line">Action(발생했다) -&gt; Dispatcher(전달자, 등록된 것을 실행) -&gt; Store(모델 변경) -&gt; View(뷰 변경)</span><br><span class="line">? Action은 EventListener와 정확히 동일한가</span><br><span class="line"></span><br><span class="line">Reducer가 Store 내부에 있어요</span><br><span class="line">Action에 따라 Reducer를 여러 가지로 나눈다</span><br><span class="line">Reducer는 상태값을 바꾸는 함수에요(분기문 처리)</span><br><span class="line"></span><br><span class="line">Store는 해당 결과를 취합해서 저장하고 있음</span><br><span class="line">Store는 Class</span><br><span class="line">Store를 최상위 컴포넌트에 전달해주고, props로 내려보내면서 활용</span><br><span class="line">(Store가 직접 Component를 부르지는 않는다)</span><br><span class="line">Store는 자기가 바뀌었을 때 View 어디가 바뀌어야 하는지 전혀 모른다, 의존성이 없다</span><br><span class="line"></span><br><span class="line">Store가 바뀌었을 때 View를 어떻게 바꿔줘야 하는지를 정의하는 과정이 매우 복잡해요</span><br><span class="line">이 부분이 Redux의 핵심이에요</span><br><span class="line"></span><br><span class="line">Dispatch가 Store에 있는 Method에요</span><br><span class="line"></span><br><span class="line">실제로는 View에서 Dispatcher를 호출하면서 Action을 넘겨줘요</span><br><span class="line">View에서는 직접 데이터를 변경하지 않고 Action을 Dispatch로 전달해줘야 해요</span><br><span class="line"></span><br><span class="line">여태 수업하면서 이해하지 못 하고 있는 부분</span><br><span class="line">1. dispatcher</span><br><span class="line">2. CSS</span><br><span class="line">3. React practical</span><br><span class="line">4. Honux 전체</span><br><span class="line"></span><br><span class="line">Action은 개발자가 함수로 정의해줘야 해요</span><br><span class="line">그리고 View에서는 해당 함수를 호출해요</span><br><span class="line">Dispatch는 Object 형태의 인자를 받아요</span><br><span class="line">변경시키고 Store가 그것을 모아서 View에 전달해주고 렌더링한다</span><br><span class="line"></span><br><span class="line">좋다고 그냥 쓰는 것이 아니라, 원론적인 고민을 해야 해요</span><br><span class="line">늘 의심해야 해요</span><br><span class="line">Redux는 복잡한 어플리케이션을 개발하기 위해 협업해야 하는 상황에 적합해요</span><br><span class="line">Redux를 사용하기로 했으면 엄격하게 일관되도록 사용해야 해요</span><br><span class="line">Component, function name, Action, Reducer, Coding Convention, Test, Comment, import 등</span><br><span class="line"></span><br><span class="line">? 왜 Dispatcher를 사용하면 결합도가 낮아지는가? 같은 로직이 스텝이 늘어나 더 복잡해진 느낌</span><br><span class="line"></span><br><span class="line">Action은 무엇을 해야 할지, Reducer는 데이터를 변화시킨 후 바뀐값을 리턴</span><br><span class="line">결국 최종목적은 View를 바꾸는 것입니다</span><br><span class="line">Observer Pattern + Messaging Pattern</span><br><span class="line"></span><br><span class="line">디자인 패턴은 개발을 하면서 학습을 해야 합니다, 그래야 내 것이 되고 아키텍쳐로 성장할 수 있어요</span><br><span class="line">Store라는 namespace가 있고, 그 안에 Reducer 여러 개가 담겨있는 셈이에요</span><br><span class="line"></span><br><span class="line">Action은 객체 형태로 무엇을 해야 할지 반환하는 함수</span><br><span class="line">Reducer는 데이터에 변화를 준 후 변경된 데이터를 반환해주는 함수</span><br><span class="line">Store안에는 여러 가지가 혼재되어있어요</span><br><span class="line">action을 reducer에게 전달해주는 것은 dispatch, subscribe는 State변화시 Callback 실행, getState는 subscribe안에 담아두어 Store에 저장된 데이터를 반환하도록 할 수 있다</span><br><span class="line"></span><br><span class="line">min된 것은 error message 등을 보여주는 코드가 다 날려버린 것이므로 production용으로만 적합합니다</span><br><span class="line"></span><br><span class="line">major 이전 버전과의 호환성을 보장하지 않음(함부로 업그레이드하기엔 위험성이 큼)</span><br><span class="line">minor 이전 버전과의 호환성을 보장</span><br><span class="line"></span><br><span class="line">trivial ?</span><br><span class="line"></span><br><span class="line">액션은 보통 대문자로 정의해요</span><br><span class="line">dispatch는 자기가 어디로 전달해야 할지 알아야 하기 때문에 store에 대한 정보도 전달받아야 해요</span><br><span class="line"></span><br><span class="line">redux와 비동기가 많이 어려워요</span><br><span class="line"></span><br><span class="line">어떠한 패턴을 언제 써야 하는지, 언제 쓰지 말아야 하는지</span><br><span class="line">쓰는 것은 패턴이 허용하는 유용성에 해당할 때여야 한다</span><br><span class="line"></span><br><span class="line">객체 찾기</span><br><span class="line">객체 크기</span><br><span class="line">인터페이스</span><br><span class="line">구현</span><br><span class="line">재사용</span><br><span class="line">런타임/컴파일타임</span><br><span class="line">변화에 대비</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShowLog</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123; <span class="comment">// 왜 쓰지?</span></span><br><span class="line">    <span class="keyword">super</span>(); <span class="comment">// 왜 쓰지?</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">let</span> showHTML = <span class="literal">null</span>; </span><br><span class="line">     <span class="keyword">if</span>(<span class="keyword">this</span>.props.showLog) &#123; </span><br><span class="line">        showHTML = (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.currentNumber&#125; 번째 li가 선택됐어요!!!</span></span><br><span class="line"><span class="xml">                      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.props.onClick&#125;</span>&gt;</span>닫기<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>);</span><br><span class="line">                      <span class="comment">// 왜 ()로 감싸주었는가?</span></span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        showHTML = (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>);</span><br><span class="line">     &#125;</span><br><span class="line">                    </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;showHTML&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class BlogList extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp">  constructor(props) &#123;</span></span><br><span class="line"><span class="regexp">    super();</span></span><br><span class="line"><span class="regexp">    this.clickHandler = this.clickHandler.bind(this); /</span><span class="regexp">/ 왜 해줘야 하는가? 앞 this와 뒷 this는 왜 다른가? this가 이 클래스 내에서 언제 바뀔 수 있는가?</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp">  shouldComponentUpdate(nextProps, nextState) &#123;</span></span><br><span class="line"><span class="regexp">    return nextProps.posts !== this.props.posts; /</span><span class="regexp">/ props의 scope는 이 클래스 전체?</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp">  clickHandler(i) &#123;</span></span><br><span class="line"><span class="regexp">    this.props.onClick(i); /</span><span class="regexp">/ posts는 property, onClick은 method?</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ container Component의 Constructor와 render 사이에 들어갈 코드들의 종류</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  render() &#123; /</span><span class="regexp">/ render 함수의 정확한 정의</span></span><br><span class="line"><span class="regexp">    console.log("bloglist redner..");</span></span><br><span class="line"><span class="regexp">    const posts = this.props.posts;</span></span><br><span class="line"><span class="regexp">    const listHTML = posts.map((v,i) =&gt; &#123; /</span><span class="regexp">/ 왜 배열을 돌려받는 것이 목표가 아닌데, forEach를 쓰지 않는가? =&gt; 현재 li 배열을 만드는 것이 목표, forEach는 단순 순회만 할 뿐 아무런 return을 만들어내지 못한다</span></span><br><span class="line"><span class="regexp">      return (&lt;li</span></span><br><span class="line">            onClick=&#123; e =&gt; this.clickHandler(i)&#125; // onClick은 약속된 이벤트 리스너 함수인가? =&gt; 그렇다, https://facebook.github.io/react/docs/events.html#supported-events</span><br><span class="line">            key=&#123;i&#125;&gt; <span class="comment">// key 또한 약속된 키워드인가? =&gt; 렌더링을 최소화하기 위해 unique index</span></span><br><span class="line">              &#123;v.title&#125; </span><br><span class="line">            &lt;<span class="regexp">/li&gt;)</span></span><br><span class="line"><span class="regexp">      &#125;);    </span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">    return(</span></span><br><span class="line"><span class="regexp">      &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">        &#123;listHTML&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/u</span>l&gt;</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyBlog</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">posts</span> : [ <span class="comment">// 왜 state인가? state는 언제 사용하는가? =&gt; Component 안에서 사용할 데이터, 향후 state 관리는 redux에게 넘기게 됨</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"title"</span>: <span class="string">"sunt aut facere repellat"</span>,</span><br><span class="line">         <span class="string">"body"</span>: <span class="string">"quia et suscipit\nsuscipit"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"title"</span>: <span class="string">"qui est essexxxxx"</span>,</span><br><span class="line">        <span class="string">"body"</span>: <span class="string">"est rerum tempore vitae\nsequi sint"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ], </span><br><span class="line">    showLog :<span class="literal">false</span>,</span><br><span class="line">    selectedNumber : <span class="number">0</span>,              </span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  listClickHandler(number) &#123;</span><br><span class="line">    number++;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="string">'showLog'</span>:<span class="literal">true</span>, <span class="string">'selectedNumber'</span>:number&#125;);</span><br><span class="line">    <span class="comment">// setState를 호출하면 this.state를 찾아서 변환해준다</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  closeLayer = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="string">'showLog'</span> : <span class="literal">false</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;    </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;My Blog posts :-)&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">        &lt;BlogList onClick=&#123;this.listClickHandler.bind(this)&#125; posts=&#123;this.state.posts&#125; /</span>&gt;</span><br><span class="line">        &lt;ShowLog </span><br><span class="line">          onClick=&#123;<span class="keyword">this</span>.closeLayer&#125; <span class="comment">// this.state. 이 아닌 this. 는 props를 뜻하는가? constructor 와 render 사이에 선언한 함수에 대해서만 이렇게 하는가?</span></span><br><span class="line">          currentNumber=&#123;<span class="keyword">this</span>.state.selectedNumber&#125; </span><br><span class="line">          showLog=&#123;<span class="keyword">this</span>.state.showLog&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;MyBlog/</span>&gt;, <span class="built_in">document</span>.querySelector(<span class="string">"#wrap"</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><hr><h3 id="170413"><a href="#170413" class="headerlink" title="170413"></a>170413</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line">Amazon sofa 를 참고해보세요</span><br><span class="line"></span><br><span class="line">예전에는 SE 혼자서 100대도 관리하기 어려웠는데, 요새는 8,000대도 관리할 수 있어요</span><br><span class="line">또한 서버를 하나 새로 만들려면 2주 ~ 2달 걸렸는데, 이제는 2분이면 할 수 있어요</span><br><span class="line">서버에 문제가 생기면 그냥 꺼버리고 새로 만들면 되어요</span><br><span class="line">쓰고 나서 더이상 필요없으면 쉽게 정리할 수 있어요</span><br><span class="line"></span><br><span class="line">5~7년을 바라보면서 투자하는 회사에요</span><br><span class="line">아마존은 세상에 존재하는 모든 것을 팔아보려고 하는 집단이에요</span><br><span class="line">Cloud라는 단어가 없던 시절에 Amazon Web Service를 만들고 7년 동안 적자가 났어요</span><br><span class="line">3년 전부터 흑자로 돌아서면서 주가가 몇 배로 뛰었어요</span><br><span class="line">AWS Cloud 10조를 한 해동안 팔았고 수익률이 25%에요</span><br><span class="line"></span><br><span class="line">아마존의 문화를 쿠팡이 카피한다고 해서 쉽게 되진 않아요</span><br><span class="line">문화가 아닌 그 중 일부인 정책을 카피해왔기 때문이에요</span><br><span class="line">일은 삼성전자가 많지만, 아마존은 일을 할 때 자기가 자기 스스로 생각을 하고 윗사람이 일을 더 많이 하는 구조에요</span><br><span class="line">아마존은 일을 덜어내고 덜어내면서 점차 아래로 내려주는 방식으로 일을 진행하는데,</span><br><span class="line">삼성전자는 밑으로 내려갈수록 업무가 눈덩이처럼 불어나고 윗 사람이 모든 일을 하는 것으로 포장되어요</span><br><span class="line">아마존은 돈을 벌기 위해 태어난 회사에요</span><br><span class="line">1년 안에 90% 이상 다 나가지만 회사가 잘 돌아가요</span><br><span class="line"></span><br><span class="line">드랍박스에서 대부분의 고객들이 1TB를 빌려도 50MB도 쓰지 않아요</span><br><span class="line">드랍박스가 AWS에서 빌릴 때는 사용하고 있는 용량만큼만 지불하기 때문에 차익에서 돈을 버는 구조에요</span><br><span class="line">회사의 비즈니스 모델과 가치는 많이 달라요</span><br><span class="line">드랍박스는 누구나 편히 사용할 수 있는 클라우드 공간을 제공한다는 것이 가치지만, 비즈니스 모델은 빌린 만큼 사용하지 않는 차익을 노린 것이에요</span><br><span class="line">드랍박스는 AWS를 벗어나보려고 노력했었지만, 포기하고 슬그머니 다시 AWS로 돌아왔어요</span><br><span class="line">MS Google Oracle 등을 다 합쳐서 10배를 곱해도 AWS보다 작아요</span><br><span class="line">클라우드 산업에서 MS가 굉장히 열심히 쫓아오고 있어요(Window 제품군, Office365)</span><br><span class="line"></span><br><span class="line">오늘 아마존 제프 베조스 CEO가 주주들에게 보내는 편지 공개했습니다. . 연매출 1360억 달러(153조 6392억원), 시가총액 4276억 달러(483조 4018억원), 20년 역사의 거대기업 아마존이 갓 창업한 스타트업처럼 움직이는 비결이 담겨 있습니다. </span><br><span class="line">일단 키워드부터 정리해봤어요. </span><br><span class="line">(1)고객 중심 회사 만들어라 : 기술 중심, 경쟁자 중심, 제품 중심 있지만 고객중심이 가장 핵심. 고객은 언제나 만족을 모르기 때문)</span><br><span class="line">(2)프로세스에 함몰되지 마라 : 프로세스가 회사를 지배하는지 내가 회사를 지배하는지 반성해야)</span><br><span class="line">(3)시장조사, 설문조사는 독이다 : 조사결과 55%가 만족한다고 해서 제품 출시하지만 47%는 불만족인 것을 놓친다. </span><br><span class="line">(4)직관을 발전시켜라 : 훌륭한 발명가와 디자이너는 고객을 깊게 이해하고 그 직관을 발전시키기 위해 엄청난 에너지를 들인다</span><br><span class="line">(5)트렌드에 민감해라 : 강력한 트렌드를 포용하지 않으면 뒤쳐진다. 지금은 인공지능과 머신러닝이다. </span><br><span class="line">(6)빠르게 의사결정하라 : 고도의 의사결정을 늦게 하면 역동성 떨어져. </span><br><span class="line">(7)목표 불일치를 조기에 인식하라 : 각 팀은 다른 목표와 다른 견해를 가지고 있다. 의사 불일치를 인식하고 조기에 해소해야.</span><br><span class="line">*기사나 요약보다 원문을 읽으시는게 좋을 것 같습니다. 비교적 쉬운 영어로 돼 있습니다. 특히 스타트업 대표님들은 필독인 것 같습니다. 기존 기업 경영자들은 자신들이 최고경영자여서 남들로부터 아무것도 배울게 없다고 생각하지 않는 이상 베조스의 경영 비결을 보고 반성하거나 오히려 극복하고 발전시켜볼 계기를 만들어보는 것도 좋을 것 같습니다. </span><br><span class="line">https://www.sec.gov/Archives/edgar/data/1018724/000119312517120198/d373368dex991.htm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">swap은 오퍼레이션이 3개이에요</span><br><span class="line">임시 변수 할당, 바꿀 값, 바꾼 곳에 임시 변수 할당</span><br><span class="line">미루는 것과 swap은 달라요, 변수 자체를 1/3 계산 오버헤드를 줄일 수 있어요</span><br><span class="line">swap의 연속이 아니라, 들었다가 필요한 곳에 찾아넣는 방식이 좋아요</span><br><span class="line"></span><br><span class="line">TV는 전자총을 가지고 위에서 아래로 계속 그려주는거에요</span><br><span class="line">사람이 자연스럽다고 생각하는 칼라는 16만 칼라에요</span><br><span class="line">16.67 밀리세컨드가 1프레임</span><br><span class="line"></span><br><span class="line">모든 GUI 프로그램은 화면을 1초에 60번 정도 그려줘요</span><br><span class="line">main에서 프로그램이 꺼질 때까지 계속 무한 루프를 돌면서 loop(); 라는 함수를 호출해줘요</span><br><span class="line">(이벤트 루프)</span><br><span class="line">loop 함수는 화면을 그려주는데 레이어로 그려줍니다</span><br><span class="line">R/G/B/투명도 00~FF : 하나의 점을 찍을 수 있어요 (4byte)</span><br><span class="line">화면을 채우려면 4byte * 가로 길이 * 세로 길이의 메모리를 확보해야 해요</span><br><span class="line">메모리 공간을 두 개를 만들어서 그리려는 화면이 완성되면 바꿔치기해요, </span><br><span class="line">버퍼링이라고 해요</span><br><span class="line">첫 번째 루프와 두 번째 루프 사이에 텀을 두어서 강제로 초당 60장만 그리도록 제한을 걸어요</span><br><span class="line">(컴퓨터는 1초에 2만 장을 그릴 수 있어요)</span><br><span class="line">화면을 누른 순간 메시지 큐에 여러분들의 액션이 모두 저장되어요, FIFO</span><br><span class="line">큐가 처리되기까지 1/60 이내의 시간차가 존재하지만 사람은 인지하지 못해요</span><br><span class="line">이벤트에 대한 이벤트 함수를 콜백으로 구현하면, 해당 이벤트가 메시지 큐에서 처리될 때 호출되는 것이에요</span><br><span class="line">IO와 같은 작업은 늘 비동기로 짜야 해요</span><br><span class="line">게임에서 버튼을 눌렀을 때 반응하게 하려면 1/60 초 이내에 처리될 수 있도록 로직을 짜야 해요</span><br><span class="line">그렇지 않으면 화면이 늘어집니다, 그걸 렉이라고 하지만 실제로는 루프와 루프 사이에 텀이 생긴 것이에요, Network나 GPU로 인해 발생하는 경우가 다수에요</span><br><span class="line">예전에는 멀티 스레드로 처리했었는데, 요새는 비동기 테스크로 처리를 해줘요</span><br><span class="line">게임을 만들어보시면 여러분들의 사고 지평이 넓어지는 기회가 될거에요</span><br><span class="line"></span><br><span class="line">2진수 &lt;-&gt; 16진수</span><br><span class="line">2진수로 바꿀 때는 계속 2로 나누면서 만들어주면 되어요</span><br><span class="line">2진수를 16진수로 바꿔줄 때는 4자리씩 끊어서 계산해요</span><br><span class="line">상호 간의 전환이 정말 쉬워요</span><br><span class="line"></span><br><span class="line">1byte가 8bit</span><br><span class="line">bit는 0, 1을 표현할 수 있는 단위</span><br><span class="line">16진수 두 글자가 1byte에요</span><br><span class="line">4byte는 32bit</span><br><span class="line"></span><br><span class="line">int = word = 가닥수 = 4byte</span><br><span class="line"></span><br><span class="line">i386, x64</span><br><span class="line"></span><br><span class="line">선형대수 이산수학 통계가 컴퓨터공학에서 중요한 수학분야에요</span><br><span class="line"></span><br><span class="line">배열에 중복된 숫자 찾기</span><br><span class="line"></span><br><span class="line">연결 리스트 : 노드와 포인터로 연결된 선형 자료구조, 노드는 아이템, 포인터는 다음 노드의 주소</span><br><span class="line">배열은 메모리에 물리적 저장되는 방식이에요</span><br><span class="line">배열은 원소를 읽을 때 복잡도가 O(1)이에요, 왜? =&gt; 인덱스를 알고 있으면 바로 접근할 수 있어서</span><br><span class="line">링크드리스트가 임의의 노드로 가기 위한 복잡도는 O(N)</span><br><span class="line">Array List는 배열과 달리 업데이트에 유리한 자료구조, Array(배열)은 읽기에 유리한 자료구조에요</span><br><span class="line">빈번한 업데이트가 있다면 링크드리스트를 사용하세요, 최근에는 Red-Black-Tree라는 것을 많이 사용해요</span><br><span class="line">RBT로는 Binary Search를 통해 LogN의 복잡도를 통해 접근할 수 있어요</span><br><span class="line">링크드리스트와 배열의 읽기 쓰기 모두 중간 정도의 성능이에요(제네럴 리스트에요)</span><br><span class="line">링크드리스트 중에서 더블 서큘라 링크드 리스트를 가장 많이 써요</span><br><span class="line"></span><br><span class="line">Stack : 아래에서 탑처럼 쌓아놓는 것을 다 스택이라고 해요(LILO)</span><br><span class="line">옷거는 공간은 옷장의 캐시에요, 캐시는 사용빈도가 높은 것들을 모아두어야 해요,</span><br><span class="line">캐시는 가까운 시간 내에 사용할지(최신성, 리센시), 얼마나 자주 사용하느냐(빈도, 프리퀀시) 가 높은 것을 캐싱해두어야 해요</span><br><span class="line">자주 안 사용할 것은 victim으로 골라서 옷장으로 보내줘야 해요</span><br><span class="line">Victim 선정 기준은 사용한지 오래된 것, 자주 안 쓰는 것, 데이터 사이즈가 큰 것이에요</span><br><span class="line"></span><br><span class="line">Queue : FIFO</span><br><span class="line">Deque : Stack + Queue, 내 마음대로 뺄 수 있어요</span><br><span class="line">- 배열로 구현하면 앞에 있는 자료를 뺄 때마다 앞으로 다 옮겨줘야 해요</span><br><span class="line">- 그래서 양방향을 위해 더블 링크드리스트로 구현해야 해요</span><br><span class="line"></span><br><span class="line">사용 빈도는 Array List, Hash, Double Linked List 순이에요</span><br><span class="line"></span><br><span class="line">Java의 LinkedList는 Deque와 List를 상속받았어요(=Double Linked List에요)</span><br><span class="line">Implement라는 것은 강제하는거에요</span><br><span class="line"></span><br><span class="line">클라이언트 개발자는 Object, Array를 가장 많이 사용하게 되어요</span><br><span class="line"></span><br><span class="line">- Linked List나 Array를 사용한다</span><br><span class="line">- 담아야 하는 데이터 : a1, a2 ... an, b1, b2 ... bn</span><br><span class="line">- size() 불가, 전체 size 짝수</span><br><span class="line">- 결과 : a1, b1, a2, b2, ... an, bn</span><br><span class="line"></span><br><span class="line">runner(링크드리스트 사용 테크닉)</span><br><span class="line">참조를 하나는 1씩 하나는 2씩 증가시키면</span><br><span class="line">2씩 증가시킨게 끝부분을 통과하게 되면</span><br><span class="line">1은 가운데에 위치하게 된데요</span><br><span class="line">이거 쓰면 루프 하나 없앨수 있다고 했어요</span><br><span class="line">끝을 통과하면 링크드 리스트 같은경우는</span><br><span class="line">가리키는 값이 null이 되겠죠</span><br><span class="line"></span><br><span class="line">해시는 키를 이용해서 값을 찾고 싶을 때 사용해요</span><br><span class="line">접근할 때 평균적으로 O(1)이에요</span><br><span class="line">bucket이 일종의 배열이에요</span><br><span class="line"></span><br><span class="line">해시맵(동기화 미지원), 해시테이블(동기화 지원)</span><br><span class="line">성능은 해시맵이 더 좋지만, 여러 명이 사용해야 하면 해시테이블을 써야 해요</span><br><span class="line"></span><br><span class="line">Hash 구현하기</span><br><span class="line">좋은 Hash함수란 충돌이 발생하지 않는 것이에요</span><br><span class="line">선형조사</span><br><span class="line">Hash는 Table의 원소가 많아질수록 조사해야할 것이 많아서 느려져요</span><br><span class="line">본래 공간의 절반 정도는 쓰지 않아요</span><br><span class="line">구현하지 못 하더라도 동작원리를 이해해보세요</span><br><span class="line"></span><br><span class="line">Linked list 각각의 차이점, Hash의 원리</span><br><span class="line">자료구조는 만드는 것보다 잘 쓰는 것이 중요해요!</span><br><span class="line"></span><br><span class="line">알고리즘 문제는 자료구조를 하나로만 구현하려고 하지 말고, 여러 개를 조합해서 사용해서 해결하는 것이 훨씬 좋아요!</span><br><span class="line"></span><br><span class="line">컴퓨터과학에서의 많은 부분은 Convention으로 인한 것이 많아요</span><br><span class="line"></span><br><span class="line">CPU는 register와만 연결되어있어요</span><br><span class="line">Data pyramid</span><br><span class="line">HDD -&gt; Memory -&gt; L2 Cache -&gt; L1 Cache</span><br><span class="line"></span><br><span class="line">데이터 최초 요청시 cache miss(cache에 데이터가 없음) -&gt; cold miss(최초 디스크에서 메모리로 올림)</span><br><span class="line">안 쓰는 프로그램을 고르는 것을 victim을 찾는다고 해요, cache(buffer) replacement algorithm</span><br><span class="line">LRU least Recently Used, 이것을 O(1)로 찾으려면?</span><br><span class="line">Locality (temporal locality = 리센시 데이터를 읽을 가능성이 높다, special locality = 10번지를 읽으면 9, 11 번지를 읽을 가능성이 높다)</span><br><span class="line"></span><br><span class="line">덱은 더블링크드리스트로 구현되어있어요</span><br><span class="line">LRU Stack = Deck</span><br><span class="line">hit(page) -&gt; remove(page) -&gt; Add first(page)</span><br><span class="line"></span><br><span class="line">배열을 쓰려고 했는데, O(1)이 안 나오고 O(N)이라면 더블 링크드 리스트를 하나 추가했더니 문제가 더 추가되어서, 해시 테이블을 추가했더니 알고리즘 성능은 O(1)이 되었지만, 공간복잡도와 코딩이 증가했다(버그양산확률이 올라감)</span><br><span class="line">내가 원하는 알고리즘 성능이 안 나온다면 List나 Hash Table을 추가해볼 생각을 해보세요</span><br><span class="line"></span><br><span class="line">적당한 자료구조를 잘 가져다써야 한다</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">윤희님 강의내용!</span><br><span class="line">링크드리스트는 자료구조이면서 다른 자료구조를 만들어줄 수 있도록 하는 원자에 해당</span><br><span class="line">- 4종류가 있으며 싱글/더블, 서큘라여부로 나뉨</span><br><span class="line">- 흔히 생각하는 자료구조들 내부는 사실 다 링크드리스트로 구현되어있을 것</span><br><span class="line">- 면접관들은 API만 아는 것이 아니라 내부 원리를 제대로 이해했는지를 보고자 한다</span><br><span class="line"></span><br><span class="line">자료구조 : 스택, 큐, 덱, 트리, 그래프, 해쉬테이블</span><br><span class="line"></span><br><span class="line">Array List는 Linked List로 만든 배열이에요, 이 아이는 Update가 쉬운 대신에 탐색하는데 O(N)이 소요되고, Array는 읽기가 O(1)인 대신에, Update시에는 O(N)</span><br><span class="line">Array List는 초기에 설정한 size를 변경하는데 Array에 비해서 어려움이 매우 적어요</span><br><span class="line"></span><br><span class="line">Honux</span><br><span class="line">Q. Array는 Linked List가 아닌 다른 것으로 만들어져있나요?</span><br><span class="line">Q. Primitive의 반대말은?</span><br><span class="line"></span><br><span class="line">이진탐색트리의 시간복잡도는 log2N이에요</span><br><span class="line"></span><br><span class="line">J. Javascript으로 Linked List를 구현해오세요! (Operator 값추가, 값 프린트, 넥스트, 값 삭제)</span><br><span class="line">​```javascript</span><br><span class="line">const LinkedList = function(data, next = null) &#123;</span><br><span class="line">  this.data = data;</span><br><span class="line">  this.next = next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">LinkedList.prototype = &#123;</span><br><span class="line">  print() &#123;</span><br><span class="line">    console.log(this.data);</span><br><span class="line">  &#125;,</span><br><span class="line">  find(number) &#123;</span><br><span class="line">    let result = this;</span><br><span class="line">    for (let i = 0; i &lt; number; i++) &#123;</span><br><span class="line">      result = result.next;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">  &#125;,</span><br><span class="line">  add(Node) &#123;</span><br><span class="line">    this.next = Node;</span><br><span class="line">  &#125;,</span><br><span class="line">  delete() &#123;</span><br><span class="line">    this.next = null;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const firstNode = new LinkedList(&apos;first&apos;);</span><br><span class="line">const secondNode = new LinkedList(&apos;second&apos;);</span><br><span class="line">firstNode.next = secondNode;</span><br><span class="line"></span><br><span class="line">console.log(firstNode);</span><br><span class="line">console.log(firstNode.find(1));</span><br><span class="line">firstNode.delete();</span><br><span class="line">console.log(firstNode);</span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>J. runner 구현<br>​<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> resultArr = [];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runner</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, j = <span class="number">0</span>; arr[i] !== <span class="literal">undefined</span>; i+=<span class="number">2</span>, j++) &#123;&#125;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> max = runner(arr)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; max; k++) &#123;</span><br><span class="line">resultArr.push(arr[k]);</span><br><span class="line">resultArr.push(arr[k+max]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> resultArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">solution([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]);</span><br><span class="line">​</span><br></pre></td></tr></table></figure></p><p>J. Insertion Sort(템플릿 코드 보고 해오세요)<br><a href="https://gist.github.com/honux77/31f67eabf0996a8656d3146ed19afb12" target="_blank" rel="noopener">https://gist.github.com/honux77/31f67eabf0996a8656d3146ed19afb12</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```java</span><br><span class="line">package honux;</span><br><span class="line"></span><br><span class="line">public class MyList &#123;</span><br><span class="line">public Node head, tail;</span><br><span class="line">public MyList() &#123;</span><br><span class="line">head = tail = null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Node next(Node n) &#123;</span><br><span class="line">return n.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void add(int i) &#123;</span><br><span class="line">Node n = new Node(i);</span><br><span class="line">if(head == null) &#123;</span><br><span class="line">head = tail = n;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">tail.next = n;</span><br><span class="line">tail = n;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void print() &#123;</span><br><span class="line">Node current = head;</span><br><span class="line">while(current!= null) &#123;</span><br><span class="line">System.out.print(current.item + &quot;, &quot;);</span><br><span class="line">current = current.next;</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">MyList list = new MyList();</span><br><span class="line">for (int i = 1; i &lt;= 10; i ++) &#123;</span><br><span class="line">list.add(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node n = list.head;</span><br><span class="line">int count = 0;</span><br><span class="line">while (n != null) &#123;</span><br><span class="line">n = n.next;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(count);</span><br><span class="line"></span><br><span class="line">MyList list2 = new MyList();</span><br><span class="line">Node n2 = list.head;</span><br><span class="line">n = list.head;</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; count /2 ; i++) &#123;</span><br><span class="line">n2 = n2.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(n.item + &quot;,&quot; + n2.item);</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; count /2 ; i++) &#123;</span><br><span class="line">list2.add(n.item);</span><br><span class="line">list2.add(n2.item);</span><br><span class="line">n = n.next;</span><br><span class="line">n2 = n2.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//result</span><br><span class="line">list.print();</span><br><span class="line">list2.print();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">Need to create Node.java in the same package</span><br><span class="line"></span><br><span class="line">package honux;</span><br><span class="line"></span><br><span class="line">public class Node &#123;</span><br><span class="line">int item;</span><br><span class="line">public Node next;</span><br><span class="line"></span><br><span class="line">public Node(int i) &#123;</span><br><span class="line">item = i;</span><br><span class="line">next = null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">package honux;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Simple Hash implementation </span><br><span class="line"> * It can&apos;t expand and no exception handling for put!</span><br><span class="line"> * </span><br><span class="line"> * @author honux</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class MyHash &#123;</span><br><span class="line">    private final static int TABLE_SIZE = 128;</span><br><span class="line">    private int count = 0;</span><br><span class="line">    HashEntry[] table;</span><br><span class="line"></span><br><span class="line">    public MyHash() &#123;</span><br><span class="line">          table = new HashEntry[TABLE_SIZE];</span><br><span class="line">          for (int i = 0; i &lt; TABLE_SIZE; i++)</span><br><span class="line">                table[i] = null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int get(int key) &#123;</span><br><span class="line">          int hash = (key % TABLE_SIZE);</span><br><span class="line">          while (table[hash] != null &amp;&amp; table[hash].getKey() != key)</span><br><span class="line">                hash = (hash + 1) % TABLE_SIZE;</span><br><span class="line">          if (table[hash] == null)</span><br><span class="line">                return -1;</span><br><span class="line">          else</span><br><span class="line">                return table[hash].getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void put(int key, int value) &#123;      </span><br><span class="line">          int hash = (key % TABLE_SIZE);</span><br><span class="line">          while (table[hash] != null &amp;&amp; table[hash].getKey() != key)</span><br><span class="line">                hash = (hash + 1) % TABLE_SIZE;</span><br><span class="line">          table[hash] = new HashEntry(key, value);</span><br><span class="line">          count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class HashEntry &#123;</span><br><span class="line">    private int key;</span><br><span class="line">    private int value;</span><br><span class="line"></span><br><span class="line">    public HashEntry(int key, int value) &#123;</span><br><span class="line">          this.key = key;</span><br><span class="line">          this.value = value;</span><br><span class="line">    &#125;     </span><br><span class="line"></span><br><span class="line">    public int getKey() &#123;</span><br><span class="line">          return key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getValue() &#123;</span><br><span class="line">          return value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="170417"><a href="#170417" class="headerlink" title="170417"></a>170417</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">Gulp, Grunt 같은 것들을 Task Runner라고 해요</span><br><span class="line"></span><br><span class="line">Webpack도 그런 것들 중 하나에요</span><br><span class="line">Merge, Linting, Module loader, transpiling(sourcemap)</span><br><span class="line"></span><br><span class="line">우리는 원본파일을 표준대로 잘 짜기만 하면, 이 도구를 통해서 브라우저에서도 사용할 수 있는 코드로 변환해줘요</span><br><span class="line"></span><br><span class="line">Build Tool이 이제는 Webpack으로 통일되어가는 추세에요</span><br><span class="line">Build Tool을 한 번 선정하면 바꾸는 것이 참 어려워요, 기존 것으로 잘 되던 것을 바꾸기가 부담스럽기 때문이죠</span><br><span class="line"></span><br><span class="line">프론트엔드 분야는 서버에 장애를 일으키는 경우가 거의 없으므로, 자주 업데이트해줄 수 있다고 생각해요, 한 번 업데이트를 미루기 시작하면 따라잡기 어려워져요</span><br><span class="line"></span><br><span class="line">간단한 부분들은 webpack없이 npm script를 통해서도 개발할 수 있어요</span><br><span class="line"></span><br><span class="line">개발도구 세팅은 논리적인 부분도 아니고, 어려움이 많아요</span><br><span class="line">검색을 해도 나와 맞는 것을 찾기도 어렵고, 원리를 이해하기 어려워요</span><br><span class="line">빌드 도구가 하는 역할이 너무 많아서 내가 원하는 조합을 어떻게 찾아야 하기도 어려워요</span><br><span class="line"></span><br><span class="line">Create React App은 핵심 플러그인 외에는 제공하지 않아요</span><br><span class="line">추가 설정이 필요하면 eject를 통해 끄집어내야 해요</span><br><span class="line"></span><br><span class="line">빌드 환경은 개발용(development)과 배포용(production)을 구분해서 관리해요</span><br><span class="line"></span><br><span class="line">development : dependencies + devDependencies, Sourcemap, Live Reload / for Debugging</span><br><span class="line">production : dependencies, for 최적화(난독화)</span><br><span class="line"></span><br><span class="line">development build 외에도 production build를 주기적으로 해봐야 문제점을 찾을 수 있어요</span><br><span class="line"></span><br><span class="line">bundle : dependency를 파악해서 하나의 파일로 합쳐주는 과정</span><br><span class="line"></span><br><span class="line">Create React App에서 eject해서 해보고, 필요할 때마다 loader를 하나 하나씩 추가해보세요</span><br><span class="line"></span><br><span class="line">jsx babel sass react webpack2</span><br><span class="line"></span><br><span class="line">beta는 쉽게 바뀔 소지가 있기 때문에 Production용에 적용하면 안 되어요</span><br><span class="line"></span><br><span class="line">Create React App를 이해하고 싶으면 npm start부터 추적해보세요</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">최종적으로 보여지는 페이지가 무엇이냐? -&gt; 엔드페이지</span><br><span class="line"></span><br><span class="line">많은 문제점</span><br><span class="line">유저가 기대했던 것과 다른 페이지, 원하는 정보를 찾기 어려운 페이지, 이미지가 통으로 되어있는 페이지</span><br><span class="line"></span><br><span class="line">삼성에서 새로운 핸드폰이 출시하기 전에, 네이버 카카오톡 등 유명 서비스에 대해선 QA를 미리 다 해요</span><br><span class="line"></span><br><span class="line">다행히도 모바일은 표준이 잘 지켜져있어요, 비슷한 Webkit을 사용해요</span><br><span class="line"></span><br><span class="line">모바일 웹은 간결하고 단순한 것이 좋아요</span><br><span class="line">쓸데없이 애니메이션을 다 빼버리세요</span><br><span class="line"></span><br><span class="line">개발은 절반, 기획과 싸우는 것이 절반</span><br><span class="line"></span><br><span class="line">모바일 앱에 익숙하기 때문에, 모바일 웹에서도 애니메이션을 기대하는 경우가 많아요</span><br><span class="line"></span><br><span class="line">애니메이션은 CSS3를 사용해서 하세요</span><br><span class="line"></span><br><span class="line">setTimeOut, setInterval, requestanimationframe 각각은 어떻게 다른가?</span><br><span class="line"></span><br><span class="line">opacity : 투명도</span><br><span class="line">opacity, filter, transform 와 같은 property들은 gpu를 사용한 것이어서 성능상 이점이 있어요(GPU Acceleration Property)</span><br><span class="line"></span><br><span class="line">http://d2.naver.com/helloworld/2061385</span><br><span class="line"></span><br><span class="line">반복적인 애니메이션은 keyframes를 사용</span><br><span class="line"></span><br><span class="line">Mobile Touch Move는 Touch Start없이는 구현이 안 되어요</span><br><span class="line">(마우스는 누르지 않아도 이동가능)</span><br><span class="line"></span><br><span class="line">마우스는 움직여서 변화하는 경우는 거의 없어요</span><br><span class="line"></span><br><span class="line">기울기나 시작점과 끝점의 길이 차이 등을 기반으로 여러 애니메이션들을 구현해요</span><br><span class="line"></span><br><span class="line">touches는 별로 의미가 없고 changeTouches를 쓰다가 막히면 다른 것을 찾아쓰세요</span><br><span class="line">(변화가 일어난 것만 changeTouches에 담겨요)</span><br><span class="line"></span><br><span class="line">media query는 (보통 width를 기반으로) 분기처리를 하는 것이에요</span><br><span class="line">기본적으로 원래 있는 CSS를 다 적용하고, 따로 지정한 부분만 바꿔줘요</span><br><span class="line"></span><br><span class="line">꼭 데스크탑을 모바일보다 먼저 구현할 필요는 없어요 (편견을 가지지 마세요)</span><br><span class="line">모바일은 핵심만 담아내기 때문에, 먼저 만들고 나중에 살을 더 붙여서 데스크탑을 만드는 것도 가능해요</span><br><span class="line"></span><br><span class="line">모바일과 연결해서 브라우저는 모바일, 디버깅은 PC에서 작업해서 하는 것이 가능해요</span><br><span class="line">https://developers.google.com/web/tools/chrome-devtools/remote-debugging/</span><br><span class="line">브라우저에서 모바일 해상도로 보면, 화면은 거의 비슷하긴 하지만 모바일 기기로 보는 것과는 달라요(지원 API, 속도 등)</span><br><span class="line"></span><br><span class="line">Proxy, 피들러 와 같은 것도 있어요</span><br><span class="line"></span><br><span class="line">라이브러리 없이 모바일 웹, 애니메이션을 구현해보세요</span><br></pre></td></tr></table></figure><hr><h3 id="170419"><a href="#170419" class="headerlink" title="170419"></a>170419</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">- Readme도 이쁜걸 가져다가 써보시길.</span><br><span class="line">- 페이코딩을 해보자! 보다는 &apos;페어코딩을 매주 언제 어떻게하자&apos; 라는 목표가 더 좋음.</span><br><span class="line">- &quot;팀원들 간의 소통을 자주 하고, 우리는 팀 이라는 정체성을 가지자&quot; 보다는 의도적인 구체적인 커뮤니케이션 장치(시간이나 규칙)를 만드는 것도 방법임.</span><br><span class="line">- 백로그를 어떻게 주기적으로 업데이트해서 살아 있는 문서로 만들지 항상고민해보기.</span><br><span class="line">- 프론트엔드-백엔드에 대한 하나의 싸이클을 대상으로 진행하면 더 좋겠음. 예를들어 2주까지 게임구현을 프론트-백엔드까지 완성하기, 로그인은 그 다음주에 프론트-백엔드까지 완성하기.</span><br><span class="line">- https://github.com/pycraft114/octodog/milestone/1 &lt;- 마일스톤에 이번주의 목표가 표현되면 좋겠음.</span><br><span class="line">- 다루는 기술을 깊게 공부하자. 양보다는 질이다.</span><br><span class="line">- 리덕스가 익숙해질때까지 복잡한 개념과 라이브러리를 자제하는 것도 팁</span><br><span class="line">- 스터디를 하면서 프로젝트 진행하는거 자연스럽고 당연한일이다. 그렇게 가능한 방법을 찾아서 시도하시길.</span><br><span class="line">- 매일 회고를 하고 팀의 상태를 개선하려고 의도적으로 노력을 하세요.</span><br><span class="line">- 충분히 토론하고 결정된 건 최대한 잘 따르자.</span><br><span class="line">- 각자 한 일에 대해서 리뷰를 갖는 시간을 많이 갖도록 하자.</span><br><span class="line">- 링크 공유.</span><br><span class="line">   https://github.com/DongHyunKims/jinnecast/wiki/Team-Rule</span><br><span class="line">   https://docs.google.com/presentation/d/1qk_wO3yx6cSFEFea03sb468y3EAK5KQNlZxsczvgTiI/edit#slide=id.g2077e5b22c_0_77</span><br><span class="line">   </span><br><span class="line">좋은 css 코드란? 이라는 질문에 짧은 대답.</span><br><span class="line">---</span><br><span class="line">css도 읽기좋은 형태로 구현하는게 좋죠.</span><br><span class="line">이렇게 짜도 되고, 저렇게 짜도 돌아가기때문에 좋은 패턴이 있긴해요.</span><br><span class="line">예를들어, selector를 불필요하게 길게 쓰지 않고 간단하게 표현하고, class를 잘 활용하는 등.</span><br><span class="line"></span><br><span class="line">이런 글의 bad/good을 비교해보시면 좋겠어요.</span><br><span class="line">http://learn.shayhowe.com/html-css/writing-your-best-code/</span><br><span class="line"></span><br><span class="line">또한 less나 sass를 쓰는 것도 나중에 수정할때 좋기때문에,</span><br><span class="line">좋은 패턴을 유도하는 방법이라고 생각해요.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">react 관련 플러그인을 너무 많이 처음부터 쓰지 않아도 돼요.</span><br><span class="line">예를들어 로직과 서비스 개발이 되면,</span><br><span class="line">router 를 추가로 적용할 수 있고, (약간의 수정이 필요할 수도 있지만)</span><br><span class="line">인증로직도 넣을 수 있는거겠죠.</span><br><span class="line">비동기도 일단 처리할 수 있고, 더 나은 방법이 있다면 단계적으로 적용할 수 있을거에요.</span><br><span class="line">프레임워크를 조금 가볍게 시작하는 것도 방법이라 생각해요.</span><br></pre></td></tr></table></figure><hr><h3 id="170420"><a href="#170420" class="headerlink" title="170420"></a>170420</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">운영체제는 정부와 같다, 자기 자신은 하는 역할이 없지만 다른 프로그램들이 잘 돌아가도록 도와주는 역할을 한다</span><br><span class="line"></span><br><span class="line">연산 CPU, 프로세스 Memory</span><br><span class="line"></span><br><span class="line">하드웨어들은 모두 하드웨어 컨트롤러가 있어요</span><br><span class="line">각각의 컨트롤러들은 작은 컴퓨터라고 보시면 되어요</span><br><span class="line"></span><br><span class="line">버스라는 공동의 데이터 통로가 있어요</span><br><span class="line"></span><br><span class="line">CPU 바로 밑에 Register -&gt; Cache -&gt; Memory</span><br><span class="line"></span><br><span class="line">Thread는 실이라는 뜻이에요, 가벼운 프로세스, CPU에서 실행되고 있는 것</span><br><span class="line"></span><br><span class="line">프로그램 카운터, 현재 내 프로세스가 어디를 실행하고 있는지 알려주는 역할(Register에 있어요)</span><br><span class="line"></span><br><span class="line">운영체제의 핵심에 해당하는 것이 커널이에요</span><br><span class="line"></span><br><span class="line">인류의 역사상 단기간동안 가장 빠른 발전을 해온 것이 컴퓨터과학이에요</span><br><span class="line"></span><br><span class="line">운영체제의 주요 업무중 하나는 하드웨어를 보호하는 것이에요</span><br><span class="line"></span><br><span class="line">메모리에 있는 변수들끼리의 연산은 메모리에서 할 수 없어요, 레지스터로 전달하고 Adder를 통해 다른 레지스터에 결과값을 전달하고, 그것을 메모리에 올리는 방식으로 진행해요</span><br><span class="line"></span><br><span class="line">레지스터는 지금 쓸 것 같은 것 하나만, 캐시를 내가 쓸 것 같은 것들 뭉텅이</span><br><span class="line"></span><br><span class="line">책을 읽을 때, 책을 캐시에 올리고, 내가 보고 있는 해당 한 페이지는 레지스터에 있는 것</span><br><span class="line"></span><br><span class="line">비동기(Async, Non-blocking), 동기(Sync, Blocking)의 차이</span><br><span class="line">동기 Non-blocking도 있어요(해당 작업이 가능하지 않은 경우에는 Error를 발생시켜요)</span><br><span class="line">비동기를 하고 싶지 않으면 멀티스레드를 쓰세요</span><br><span class="line"></span><br><span class="line">파일은 항상 open read write close의 절차를 거쳐요</span><br><span class="line"></span><br><span class="line">Node.js가 좋은 이유는 Single Thread + Async로 Context Switch Overhead가 없기 때문이에요</span><br><span class="line"></span><br><span class="line">이해를 못 하겠다면 단어라도 들어두세요-</span><br><span class="line"></span><br><span class="line">부모없는 프로세스는 존재하지 않습니다</span><br><span class="line">크롬을 실행시키면 GUI 프로그램이라는 부모의 프로세스를 클론하고, 그것을 크롬으로 변신시킵니다</span><br></pre></td></tr></table></figure><hr><h3 id="170424"><a href="#170424" class="headerlink" title="170424"></a>170424</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">예매와 같은 서비스에서는 이력관리가 매우 중요할 수 있어요</span><br><span class="line"></span><br><span class="line">구글은 디자인은 심플하지만 사용자 경험은 훨씬 편할 수 있어요</span><br><span class="line">그와 달리 한국 사이트(네이버, 다음) 등은 디자인은 훨씬 화려할지 몰라도, 사용자 경험은 그렇지 않은 경우도 있어요</span><br><span class="line"></span><br><span class="line">React를 사용하지 않으면 history.js와 같은 라이브러리를 쓰면 되지만 React를 쓰는 우리는 React Router가 적합할거에요</span><br><span class="line"></span><br><span class="line">Ajax를 Cache해두었다가, 이전 이후 페이지 이동 시에 활용하여 렌더링해주면 아주 좋아요</span><br><span class="line"></span><br><span class="line">프레임워크마다 필요한 방식으로 만드는데, React는 Component를 통해 만들어요</span><br><span class="line"></span><br><span class="line">View State, Link State는 당연히 밀접한 연결관계를 가지고 있어요</span><br><span class="line"></span><br><span class="line">사용자가 해당 history를 기대하느냐가 매우 중요하다</span><br><span class="line">사용자가 이전 페이지를 눌렀을 때, 무엇을 기대하는가?</span><br><span class="line"></span><br><span class="line">과거에는 클라이언트 사이드에서 할 수 있는 일이 매우 적어서 요청하고 받는 것 밖에 없었는데,</span><br><span class="line">이제는 데이터 관리까지 하는 것으로 가용역할이 넓어지고 있어요</span><br><span class="line"></span><br><span class="line">NavLink와 Route 적용만 해도 훌륭하지만, 인증 로직까지 넣어볼 수도 있어요!(로그인 여부)</span><br><span class="line">+ 이전 페이지에서 내가 보고 있던 위치를 다시 보여주는 기능</span><br><span class="line">+ 회원가입 전에 보고 있던 페이지를 보여주는 기능</span><br><span class="line">+ 로컬스토리지를 확인해서 인증 정보 유무, 그것이 정말 유효한지 ComponentDidMount 내 코드를 통해 서버에 Ajax보내서 검증, 유효하지 않으면 로그인 페이지로 렌더링, 로그인하고 나면 처음에 인증 정보 확인하던 시점의 페이지로 돌려주기</span><br><span class="line"></span><br><span class="line">React Router를 사용하는 것은 1차적이고, 그것의 동작원리를 설명할 수 있어야 해요!</span><br><span class="line"></span><br><span class="line">https://tylermcginnis.com/build-your-own-react-router-v4/</span><br><span class="line">꼭 읽어보세요!</span><br><span class="line"></span><br><span class="line">왜 필요하고, 내부에서 어떻게 동작하고, 어떤 API를 쓰는 것이겠네</span><br><span class="line">(단순 API를 아냐 모르냐는 찾아보면 되는 문제이니 중요하지 않다)</span><br><span class="line"></span><br><span class="line">라이브러리를 모두 흉내내려하지 말고, 핵심만 담아서 구현해보세요</span><br><span class="line">(React Router의 v4가 아닌 v0.1을 따라해보세요)</span><br><span class="line"></span><br><span class="line">&quot;요즘 강의로 VanillaJS를 지나,</span><br><span class="line">Redux, Router, Promise와 같은 녀석들을 다루는 단계 쯤.</span><br><span class="line">그런데 추상화된 코드의 이해는 역시나 어렵고 고민스럽다. 프로젝트 과정을 거쳐도 동작에 대해 왜, 어떻게는 참 어렵다. </span><br><span class="line">그래서 종종 이녀석들을 직접 만들어 보시라는 요구도 하게 된다.</span><br><span class="line">이번주에는 Promise나 fetch API라도 직접 만들어 보시라 할까 고민중;;&quot;</span><br></pre></td></tr></table></figure><hr><h3 id="170426"><a href="#170426" class="headerlink" title="170426"></a>170426</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">비동기는 UX에서 중요한 기능이다(사용성이 좋게 만들기 위해)</span><br><span class="line"></span><br><span class="line">비동기 함수에서 비동기 함수를 호출하는 경험을 해본적 있는가?</span><br><span class="line"></span><br><span class="line">비동기에서는 에러 처리도 비동기 안에서 처리해줘야 해요(catch)</span><br><span class="line"></span><br><span class="line">Async 등으로 처리하다보면 마치 동기처럼 보이지만,</span><br><span class="line">실제로는 내부 로직에도 비동기가 숨겨져있기 때문에 복잡도가 증가하게 된다</span><br><span class="line">그렇더라도 그 비동기 뭉텅이 안에서라도 동기적인 코드처럼 동작시켜보자!</span><br><span class="line"></span><br><span class="line">사실 콜백헬 자체는 애초에 로직이나 API 자체를 우선적으로 해결하려고 해야 한다</span><br><span class="line"></span><br><span class="line">generator는 비동기를 위해 탄생한 아이는 아니고, 애니메이션 조작 등에 유용해요, 활용도가 아주 높진 않아요, 비동기 처리할 때도 유용하지만 Promise -&gt; Async/Await으로 가는 것이 더 좋을 것 같아요</span><br><span class="line"></span><br><span class="line">generator는 함수의 return을 멈추게 할 수 있어요, 원하는 지점에 yield를 표시해놓고 함수 바깥에서 실행을 조작할 수 있는 함수에요(겉으로 보기엔 breakpoint와 비슷해요), 비동기 로직에도 적용할 수 있어요, run할 때마다 다음의 yield까지만 실행시키는 등의- 많이 안 쓰이고 있어요</span><br><span class="line"></span><br><span class="line">Promise가 중요한 것은 generator와 Async/Await 모두 Promise 기반이기 때문이에요</span><br><span class="line">(Promise도 ES6 기반이므로 Babel이 필요해요)</span><br><span class="line"></span><br><span class="line">내부 코드가 어렵기 때문에, 사용법 위주로 먼저 익혀보세요</span><br><span class="line">then에서 Promise 객체를 반환하기 때문에 Method Chaining을 할 수 있어요</span><br><span class="line"></span><br><span class="line">프론트엔드 개발자가 비동기를 만나는 것은 Ajax의 연속인 경우가 매우 많아요</span><br><span class="line"></span><br><span class="line">Promise가 호출될 때 then 자체는 실행이 바로 되지만, then이 인자로 가지고 있는 콜백함수들은 resolve가 호출되는 시점에 실행됩니다</span><br><span class="line"></span><br><span class="line">resolve와 then을 Promise없이 직접 구현해보세요(SetTimeOut을 활용해야 해요 소근소근, time값은 0)</span><br><span class="line"></span><br><span class="line">동작은 Callback Hell과 똑같지만, 보여지는 코드가 다른 것</span><br><span class="line"></span><br><span class="line">Ajax 처리할 때, Fetch API를 사용하면 좋아요</span><br><span class="line"></span><br><span class="line">우선 Promise 표준대로 처리해보는 것을 추천해요</span><br><span class="line">Promise를 이해하면 Async/Await은 20분이면 익힐 수 있어요</span><br><span class="line"></span><br><span class="line">Redux를 사용하게 되면, Middleware를 통해서 함수를 통해 Action가 동작할 수 있도록 해서 비동기 로직을 넣어서 처리할 수 있어요, Redux-Chunk</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="CodeSquad" scheme="https://eclatant.io/categories/CodeSquad/"/>
    
    
  </entry>
  
  <entry>
    <title>CodeSquad White Level</title>
    <link href="https://eclatant.io/2017/01/17/2017-01-18-White/"/>
    <id>https://eclatant.io/2017/01/17/2017-01-18-White/</id>
    <published>2017-01-17T12:17:00.000Z</published>
    <updated>2018-10-13T09:09:14.552Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">잘 하기 위한 방법</span><br><span class="line"></span><br><span class="line">- 배운 것을 가지고 다른 것을 계속 만들기</span><br><span class="line">- 중학생 동생과 그 분야의 대가 앞에서 설명해보기</span><br><span class="line">- 금요일도 와서 공부할 수 있으니 열심히 공부할 것</span><br><span class="line"></span><br><span class="line">커뮤니케이션 채널</span><br><span class="line"></span><br><span class="line">- 강의 카페 - Schololgy</span><br><span class="line">- 커뮤니케이션 - Slack</span><br><span class="line">- 온라인 Q&amp;A - Piazza</span><br><span class="line">- 프로젝트 관리  - Github</span><br><span class="line"></span><br><span class="line">[질문하는 방법](http://www.slideshare.net/hoyoung2jung/ss-69526973)</span><br><span class="line"></span><br><span class="line">- 질문하기 전 3번 정도 다른 시도</span><br><span class="line">- 질문하기 전 검색 ( 구글, 스택오버플로우 )</span><br><span class="line">- 그 후 질문 ( 내뱉기 전 한 번 읽어볼 것 )</span><br><span class="line">  - 구체적이고 명확한 질문 제목</span><br><span class="line">  - 자세한 상황 설명 ( 플랫폼, 운영체제, 사용 언어 )</span><br><span class="line">  - 소스코드는 gist, pastebin</span><br><span class="line">  - 맞춤법 + 예의 바르게는 기본</span><br><span class="line">  - 질문을 올렸다면 추적할 것</span><br><span class="line"></span><br><span class="line">매일 공부해야 할 것들</span><br><span class="line"></span><br><span class="line">- 영어, 코딩, 운동, 독서</span><br><span class="line"></span><br><span class="line">마스터들 닉네임</span><br><span class="line"></span><br><span class="line">- 크롱(Front-end)</span><br><span class="line">- 호눅스(Common, Back-end)</span><br><span class="line">- JK(iOS)</span><br></pre></td></tr></table></figure><hr><h3 id="170102"><a href="#170102" class="headerlink" title="170102"></a>170102</h3><h5 id="리눅스-명령어"><a href="#리눅스-명령어" class="headerlink" title="리눅스 명령어"></a>리눅스 명령어</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">리눅스 커널의 다양한 배포판이 있음, 국내에서 가장 많이 쓰이는 것은 Ubuntu</span><br><span class="line"></span><br><span class="line">history로 확인한 뒤, !1105 를 입력하면 그 번호에 해당하는 명령어를 다시 동작시킬 수 있음</span><br><span class="line"></span><br><span class="line">say &quot;hello&quot; 하면 hello 라고 소리가 난다</span><br><span class="line"></span><br><span class="line">echo &quot;Hello&quot; &gt; Hello.txt</span><br><span class="line"></span><br><span class="line">cat 파일 내용 표시</span><br><span class="line"></span><br><span class="line">ctrl + U 를 누르면 명령줄을 삭제할 수 있다</span><br><span class="line"></span><br><span class="line">find ‐name &quot;파일 이름&quot; : 파일명 검색</span><br><span class="line"></span><br><span class="line">[vim adventures](http://vim-adventures.com/)</span><br><span class="line"></span><br><span class="line">자연적 소리 sound, 인위적 소리 audio</span><br><span class="line"></span><br><span class="line">1 켜짐, 0 꺼짐</span><br><span class="line">AND 곱, OR 합</span><br><span class="line"></span><br><span class="line">코드는 결국 숫자이다</span><br><span class="line"></span><br><span class="line">CS와 별도로 내가 관심있어하는 도메인을 가지고 있는 것이 좋다</span><br><span class="line"></span><br><span class="line">이곳이 학원이 아니라 직장(베이스캠프)이라고 생각할 것</span><br><span class="line"></span><br><span class="line">내 성장의 동력은 나</span><br><span class="line"></span><br><span class="line">내가 무엇을 하고 싶은지에 대한 목표점에 관한 큰 그림을 스스로 그려나가야 함</span><br><span class="line"></span><br><span class="line">해보지 않으면 알 수 없는 것들 투성이</span><br></pre></td></tr></table></figure><hr><h3 id="170103"><a href="#170103" class="headerlink" title="170103"></a>170103</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">브라우저에서 지원되지 않으면 비표준(=플래시 같은)</span><br><span class="line">플러그인을 설치해야 활용할 수 있다</span><br><span class="line"></span><br><span class="line">뒤에 example, simple 또는 tutorial 을 넣어서 검색하는 것도 방법</span><br><span class="line"></span><br><span class="line">역시 MDN이 좋다 (검색어에 mdn 넣을 것)</span><br><span class="line">영어로 읽는 습관을 들여라</span><br><span class="line"></span><br><span class="line">우선 코드 -&gt; 서머리부터 읽어볼 것</span><br><span class="line">그 후 코드를 실행해보면서 이해할 것</span><br><span class="line"></span><br><span class="line">디버깅을 위해서 개발자 도구 활용</span><br><span class="line">=&gt; 에러가 무엇인지 명확히 알려준다</span><br><span class="line"></span><br><span class="line">문제가 생기면 바로 검색을 해라</span><br><span class="line"></span><br><span class="line">깃헙주소와 더불어, 스택오버플로우 내역을 요구하는 해외 기업도 있음</span><br><span class="line"></span><br><span class="line">parser를 통해 코드를 문자 단위로 잘게 나눔</span><br><span class="line">그것을 기반으로 컴퓨터가 해석할 수 있도록 bytecode로 변환</span><br><span class="line">그걸 interpreter가 해석하면서 출력</span><br><span class="line"></span><br><span class="line">생각보다 null, undefined가 중요하다</span><br><span class="line"></span><br><span class="line">javascript type check 로 검색해보면, typeof 의 한계를 알게 된다</span><br><span class="line"></span><br><span class="line">문자열을 입력할 때는 &quot;&quot;을 쓸 것</span><br><span class="line"></span><br><span class="line">오류를 무시하지 말고, 찬찬히 들여다볼 것</span><br><span class="line">오류 내용을 이해하라</span><br><span class="line"></span><br><span class="line">소프트웨어 공학 두 개의 축 : 테스트 / 프로세스(개발 방법론, 협업)</span><br><span class="line"></span><br><span class="line">테스트 자동화를 잘 했다면, 면접 때 대단한 플러스 요인이 될 수 있다</span><br><span class="line"></span><br><span class="line">방법보다 방법론이 왜 나왔는지가 중요하다</span><br><span class="line"></span><br><span class="line">당장 문제가 발생하지 않더라도, 잠재적 오류가 있을 수 있다</span><br><span class="line">의도한 것이 아닌데, 오류를 내뱉지 않는 경우도 있다(버그의 일종)</span><br><span class="line"></span><br><span class="line">포괄적인 의미의 디자인을 우선시하라</span><br><span class="line">디자인 &amp; 코드 ( 설계 )</span><br><span class="line"></span><br><span class="line">변수선언, 사칙연산</span><br><span class="line"></span><br><span class="line">console.log prints the element in an HTML-like tree</span><br><span class="line">console.dir prints the element in a JSON-like tree</span><br><span class="line"></span><br><span class="line">console은 객체이다</span><br><span class="line"></span><br><span class="line">&#123;&#125; : 브레이스</span><br><span class="line"></span><br><span class="line">아무 생각없이 메소드를 사용하지 말 것</span><br><span class="line">console을 쓸 때, 왜 console이 필요한가?</span><br><span class="line"></span><br><span class="line">JS에서는 네임스페이스를 객체로 표현함 ( 객체의 활용방안 )</span><br><span class="line">충돌을 방지하기 위한 이름 공간 구획</span><br><span class="line"></span><br><span class="line">console.log(&quot;a 더하기 b는 이것입니다. &quot; + c);</span><br><span class="line"></span><br><span class="line">c 를 type casting 해서 오류가 나오지 않은 것인데 이런 것을 암묵적 형변환이라고 한다</span><br><span class="line">JS의 특징이다</span><br><span class="line"></span><br><span class="line">연산자 우선순위</span><br><span class="line"></span><br><span class="line">type casting을 외우려고 하지 말고 그저 느껴서 익힐 것</span><br><span class="line"></span><br><span class="line">JS의 모든 함수는 결과값을 리턴하는데, 그것이 정의되어있지 않으면 undefined 반환</span><br><span class="line"></span><br><span class="line">코드 공유용 사이트</span><br><span class="line">jsbin.com</span><br><span class="line">codepen.io</span><br><span class="line"></span><br><span class="line">동적 타이핑(dynamic type)</span><br><span class="line"></span><br><span class="line">arguments.length</span><br><span class="line"></span><br><span class="line">에러는 가능한 일찍 출력해주는 것이 좋다</span><br><span class="line"></span><br><span class="line">디버깅을 위해서는 정해진 메소드일지라도 변수에 담아두는 것이 좋다</span><br><span class="line"></span><br><span class="line">함수 내 기능 코드가 너무 길어질 경우, 함수로 독립시켜서 만들 것</span><br><span class="line"></span><br><span class="line">오류상황을 위로 올릴 것</span><br><span class="line"></span><br><span class="line">로직 안에 데이터가 들어가있어선 안 된다 (메시지 등)</span><br><span class="line"></span><br><span class="line">debugger; 를 추가하고, scope란을 확인해보자</span><br><span class="line">브레이크 포인트를 찍고 함수를 돌려봐서 확인할 수도 있다</span><br><span class="line">(인터프리터 언어다보니, 컴파일 과정이 없어서, 브레이크 포인트로 확인하는 과정이 많이 필요하다)</span><br><span class="line"></span><br><span class="line">읽기 좋은 코드, 네이밍이 좋은 코드가 되기 위해 계속 지우고 새로 만들어볼 것</span><br><span class="line"></span><br><span class="line">If 안 If를 없애라</span><br></pre></td></tr></table></figure><hr><h3 id="170104"><a href="#170104" class="headerlink" title="170104"></a>170104</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">일급함수 일급객체에 대해서 조사해볼 것</span><br><span class="line"></span><br><span class="line">결합도가 낮은 코드가 좋은 코드이다</span><br><span class="line"></span><br><span class="line">함수를 최대한 작게 담백하게</span><br><span class="line"></span><br><span class="line">같은 것을 여러 번 다시 짜는 것이 참 좋습니다</span><br><span class="line">매번 설계를 새로 하면서 코드가 점점 더 좋아집니다</span><br><span class="line"></span><br><span class="line">남들에게 설명했을 때 이해가 잘 되는 코드가 좋은 코드입니다</span><br><span class="line"></span><br><span class="line">펑션을 잘 이해하고 있느냐가 중요한 실력 평가의 척도</span><br><span class="line"></span><br><span class="line">함수 결과의 true false를 변수에 담아서 보여주게 되면, 디버깅할 때 보다 수월하다</span><br><span class="line"></span><br><span class="line">Stack이 무엇인가?</span><br><span class="line"></span><br><span class="line">크롬 개발자 도구를 통해 디버깅하는 습관을 들이세요</span><br><span class="line"></span><br><span class="line">디버깅을 하면서 자바스크립트를 익히세요</span><br><span class="line"></span><br><span class="line">함수를 변수에 담을 수 있고, 반환할 수 있다</span><br><span class="line"></span><br><span class="line">네임스페이스는 객체에 쓰는 표현</span><br><span class="line"></span><br><span class="line">전역변수는 window라는 객체에 담긴다</span><br><span class="line"></span><br><span class="line">전역변수를 쓰지 말고, 필요에 따라서 지역변수를 쓰거나 매개변수로 넘겨주는 것이 좋다</span><br><span class="line"></span><br><span class="line">함수 안에 함수가 있을 때, 안쪽 함수에서는 바깥 함수의 변수에 접근할 수 있지만, 바깥 함수에서는 안쪽 함수의 변수에 접근할 수 없다</span><br><span class="line"></span><br><span class="line">스코프 체인(제일 가까운 스코프에서 찾는 변수가 없으면 바로 위 스코프로 가서 찾아본다)</span><br><span class="line"></span><br><span class="line">오늘 배운 내용 : 디버깅, 스코프</span><br></pre></td></tr></table></figure><h5 id="프로젝트별로-깃헙-계정을-다르게-쓰는-방법"><a href="#프로젝트별로-깃헙-계정을-다르게-쓰는-방법" class="headerlink" title="프로젝트별로 깃헙 계정을 다르게 쓰는 방법"></a>프로젝트별로 깃헙 계정을 다르게 쓰는 방법</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git config user.name Eclatant</span><br><span class="line">git config user.email distinct19@gmail.com</span><br><span class="line">위 명령어 입력을 통해 계정을 수정한 후,</span><br><span class="line"></span><br><span class="line">.git/config url에서 github.com 앞에 아이디를 추가해야 함</span><br><span class="line">( ex url : https://Eclatant@github.com/Eclatant )</span><br></pre></td></tr></table></figure><hr><h3 id="170105"><a href="#170105" class="headerlink" title="170105"></a>170105</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">토큰 : 파싱하기 위해 잘라진 하나 하나의 요소</span><br><span class="line"></span><br><span class="line">JS는 타입이 없는 것이 아니라 나중에 결정되는 것이다</span><br><span class="line">문자열, 숫자, boolean, array, 배열, 오프젝트, null, regularExpression, function 등</span><br><span class="line"></span><br><span class="line">마법같이 자동으로 되는 것은 없다</span><br><span class="line"></span><br><span class="line">키워드와 예약어를 외우지 말고, 활용하다가 디버깅 과정으로 체득할 것</span><br><span class="line"></span><br><span class="line">주석은 남들에게 코드로 전달하기 어려운 코드일 때만 부가적으로 필요하다 (분명한 이유가 필요하다)</span><br><span class="line"></span><br><span class="line">프로세스의 분리를 위해서 함수가 필요한 때도 있다 (if 또는 for문을 줄이는 등, 의존성 약화)</span><br><span class="line">핵심을 반영한 함수명으로 커버되지 않는 범위일 때 다른 함수로 독립시킨다</span><br><span class="line">줄 수보다 과정이 핵심이다, 길더라도 의미적으로 쉽게 파악되는 것이 훨씬 중요하다</span><br><span class="line"></span><br><span class="line">사람마다 논리적 관계를 다르게 생각한다는 점을 유념하라</span><br><span class="line"></span><br><span class="line">let을 사용하면 같은 함수 내에서도 블럭 단위로 스코프를 잡을 수 있다</span><br><span class="line"></span><br><span class="line">좋은 코드인지 여부와 표준인지 여부는 별도의 이야기</span><br><span class="line"></span><br><span class="line">매개변수의 개수를 늘려서, 함수 내부에 하드코딩된 부분을 없애는 것도 방법이다</span><br><span class="line"></span><br><span class="line">반환해줄 때, 변수에 담아 반환해줘서 디버깅시 확인하기 용이하게 할 것</span><br><span class="line"></span><br><span class="line">함수에 대한 간단한 설명을 주석에 담아 기재</span><br><span class="line"></span><br><span class="line">일단은 인간이 이해할 수 있는 코드를 짜는 것이 먼저입니다</span><br><span class="line"></span><br><span class="line">변수를 아낌없이 만드세요</span><br><span class="line"></span><br><span class="line">초기화, 조건식, 증감</span><br><span class="line">1. 무조건 초기화를 한 번 실행함</span><br><span class="line">2. 참인지 여부 검사</span><br><span class="line">3. 증감식 적용</span><br><span class="line">4. continue를 쓰면 조건식으로 돌아간다</span><br><span class="line"></span><br><span class="line">i++ 외에는 잘 안 씁니다</span><br><span class="line"></span><br><span class="line">왜 배열은 0부터 시작하는가?</span><br><span class="line"></span><br><span class="line">잘 하려면 쉽게 생각해야 한다</span><br><span class="line"></span><br><span class="line">함수에 관해 알아야 하는 것들</span><br><span class="line">1. 어떻게 동작하는가?</span><br><span class="line">2. 메소드가 무엇을 반환하는가?</span><br><span class="line">3. 원래의 배열에 변화가 생기는가?</span><br><span class="line"></span><br><span class="line">indexOf</span><br><span class="line">- indexOf(searchElement, fromIndex)</span><br><span class="line">- 인덱스 숫자 (fromIndex가 검색출발시작점, 검색출발시작점 이후로 없으면 -1)</span><br><span class="line">- 그렇지 않다</span><br><span class="line"></span><br><span class="line">slice</span><br><span class="line">- slice(beingIndex, endIndex)</span><br><span class="line">- beginIndex부터 endIndex전까지의 배열 요소를 가진 새로운 배열</span><br><span class="line">- 그렇지 않다</span><br><span class="line">- endIndex가 beginIndex보다 커야만 제대로 동작한다</span><br><span class="line"></span><br><span class="line">splice</span><br><span class="line">- splice(start, deleteCount, item)</span><br><span class="line">- delete 배열 요소를 가진 새로운 배열</span><br><span class="line">- 바꾼다</span><br><span class="line"></span><br><span class="line">내가 생각하는 MDN 사이트 읽는 순서</span><br><span class="line">- Parameter</span><br><span class="line">- Syntax</span><br><span class="line">- ReturnValue</span><br><span class="line">- Description</span><br><span class="line">- Example + DevTool</span><br><span class="line"></span><br><span class="line">늘 리턴값과 기존 데이터에 변화를 가하는지 여부를 확인해야 한다</span><br><span class="line"></span><br><span class="line">함수는 늘 직관적이어야 한다</span><br><span class="line">반환값을 알고 써야 한다</span><br><span class="line">난 추출만 하고 싶었는데, 원래 값이 바뀐다든지의 상황을 피해야 한다</span><br><span class="line">외우지 말고 찾아서 보고 쓰면서 익힐 것</span><br><span class="line"></span><br><span class="line">프로토타입이란 내장 메소드 집합을 의미한다</span><br><span class="line"></span><br><span class="line">function test(parameter) &#123;</span><br><span class="line">  pass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(para);</span><br><span class="line"></span><br><span class="line">JS는 함수를 정의할 때 파라미터를 정의하지 않았어도 입력받아서 활용할 수 있다</span><br><span class="line">JS는 a[100] = 100; 등을 선언하면 a의 length는 101</span><br></pre></td></tr></table></figure><h3 id="170109"><a href="#170109" class="headerlink" title="170109"></a>170109</h3><h4 id="Learn-Git"><a href="#Learn-Git" class="headerlink" title="Learn Git"></a>Learn Git</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">주요 단어</span><br><span class="line"></span><br><span class="line">- Working directory : 작업 디렉토리</span><br><span class="line">- Staging area : Local repository로 올리기 전에 이번 커밋과 관련된 파일들을 관리하는 것</span><br><span class="line">- Local repository : Remote repository로 Push하기 전에 관리하는 곳</span><br><span class="line"></span><br><span class="line">명령어</span><br><span class="line"></span><br><span class="line">- git init : 해당 Working directory을 깃에 등록함</span><br><span class="line">- git add : Working directory의 변경사항을 Staging area에 등록</span><br><span class="line">- git commit : Staging area의 사항들을 Local repository에 등록</span><br><span class="line">- git push : Local repository의 사항들을 Remote repository에 등록</span><br><span class="line">- git clone : Remote repository를 Working directory로 복사하면서 remote로 등록</span><br><span class="line">- git pull : git fetch + git merge, Push한 이후의 변경내용을 가져옴</span><br><span class="line">- git fetch : Remote repository를 Local repository로 가져옴</span><br><span class="line">- git merge : Local repository를 Working directory로 가져옴</span><br><span class="line"></span><br><span class="line">자동으로 병합되지 않는 conflict시에는 merge 또는 rebase를 사용할 것</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git config --global --edit</span><br><span class="line"></span><br><span class="line">서버(또는 데이터베이스)의 중요한 특징</span><br><span class="line">- 가용성 : 연중무휴로 사용가능</span><br><span class="line">- 내구성 : 저장된 데이터가 사라지면 안 된다</span><br><span class="line"></span><br><span class="line">내구성이 더 중요하며, 가용성은 서비스의 특징에 따라 다르다</span><br><span class="line"></span><br><span class="line">프로젝트별로 git 세팅을 바꿀 수도 있음</span><br><span class="line">git config --edit</span><br><span class="line">git config user.name / git config user.email</span><br><span class="line"></span><br><span class="line">커밋 메시지 첫 글자는 대문자, 첫 단어는 동사 현재형으로 할 것</span><br><span class="line"></span><br><span class="line">git status</span><br><span class="line">working directory와 staging area간 차이와 staging area에 올려놓은 파일들을 보여준다</span><br><span class="line"></span><br><span class="line">git clean</span><br><span class="line">local 저장소와 작업 디렉토리를 일치시킴</span><br><span class="line"></span><br><span class="line">로컬 저장소는 커밋의 집합</span><br><span class="line"></span><br><span class="line">git remote add origin https://Eclatant@github.com/Eclatant/TestRepository.git</span><br><span class="line"></span><br><span class="line">잘못 설정했다면 git config --edit</span><br><span class="line"></span><br><span class="line">cat .git/config 로도 확인가능</span><br><span class="line"></span><br><span class="line">git push --set-upstream origin master</span><br><span class="line"></span><br><span class="line">git reset --hard HEAD</span><br><span class="line"></span><br><span class="line">git clone</span><br><span class="line">임의의 디렉토리 만들고 로컬 저장소로 가져오고, 워킹 디렉토리에 최신내용 반영</span><br><span class="line">git clone 명령 맨 뒤에 폴더명을 입력하면 원하는 폴더명으로 가져올 수 있음</span><br><span class="line">git clone abc abcd 라고 하면 abcd라는 폴더로 로컬 저장소 abc와 작업 디렉토리를 복사해옴</span><br><span class="line"></span><br><span class="line">git checkout commit-id [file] : 해당 file만 커밋시점으로 되돌아감, file이 없으면 전체가 되돌아감</span><br><span class="line"></span><br><span class="line">Already up-to-date : 원격 저장소와 로컬 저장소가 일치함</span><br><span class="line"></span><br><span class="line">git commit -am : git add 와 git commit을 합침</span><br><span class="line"></span><br><span class="line">Tree와 Graph의 차이는 합쳐지냐 안 합쳐지냐이다</span><br><span class="line"></span><br><span class="line">origin/HEAD : 최신</span><br><span class="line">HEAD는 현재 작업 디렉토리</span><br><span class="line"></span><br><span class="line">git branch -r : 원격 브랜치 목록</span><br><span class="line">git remote -v : 원격 저장소 이름이 어떤 원격 저장소를 가리키고 있는지 확인가능</span><br><span class="line">git push 원격저장소 브랜치이름 이 기본(생략하면 git push origin master)</span><br><span class="line">git push --set-upstream origin master :  origin/master를 지금 브랜치의 원격저장소로 연결시키겠다</span><br><span class="line"></span><br><span class="line">upstream : local에 연결된 원격 저장소</span><br><span class="line"></span><br><span class="line">git branch feature : 현재 브랜치를 따와서 feature 브랜치를 생성</span><br><span class="line">Master는 배포용으로 가장 완벽한 브랜치로 유지되어야 한다</span><br><span class="line">서비스 개발시에는 develop브랜치를 따와서 그것에서 다른 기능에 해당하는 branch를 따와서 작업하다가 develop으로 merge해주고 검증 후에 master에 merge해서 배포해준다</span><br><span class="line"></span><br><span class="line">checkout을 commit으로 할 수도 있다</span><br><span class="line">checkout : 현재 작업 디렉토리를 바꿔주는 명령</span><br><span class="line">HEAD도 origin/master는 해당 커밋시점을 가리키는 것</span><br><span class="line"></span><br><span class="line">git log는 시간 순서대로 표시된다</span><br><span class="line">merge는 head와 합치는 것</span><br><span class="line"></span><br><span class="line">git reset 시에 staging area에 올려놓은 것은 날아간다</span><br><span class="line"></span><br><span class="line">collaborator 가 없으면 origin/head 가 안 나오는 이유</span><br><span class="line"></span><br><span class="line">우리는 과학자가 아닌 엔지니어이다</span><br><span class="line">알려고 고민하는 시간을 1시간 이상 들이지 마세요</span><br><span class="line"></span><br><span class="line">git checkout 2e4a153 -b event : 해당 커밋에서 브랜치를 생성하고 체크아웃</span><br><span class="line"></span><br><span class="line">새로 클론해오면 마스터와 HEAD만 존재</span><br><span class="line"></span><br><span class="line">origin/master 와 origin/head는 항상 기본적으로 같지만 설정에서 변경할 수 있음</span><br><span class="line"></span><br><span class="line">git checkout origin/feature-1 -b feature-1 : origin/feature-1 을 feature-1으로 만들어줘</span><br><span class="line"></span><br><span class="line">git checkout develop : remote에 develop이 있으면 가져와줘</span><br><span class="line"></span><br><span class="line">head 브랜치는 삭제할 수 없어요</span><br><span class="line">삭제하려는 브랜치에만 속해있는 커밋이 있다면 에러가 발생 (다른 곳으로 이전해달라는 의미)</span><br><span class="line">branch -d 옵션일 때만 가능</span><br><span class="line"></span><br><span class="line">echo &quot;zzz&quot; &gt;&gt; copy.js</span><br><span class="line">\&gt;\&gt; 쓰면 파일 밑에 덧붙이는 효과</span><br><span class="line"></span><br><span class="line">git branch -D branchname 강제로 브랜치를 삭제</span><br><span class="line"></span><br><span class="line">브랜치는 한 커밋을 가리키고 있는 것이고, 그것은 과거 이력을 모두 가지고 있다 (포인터)</span><br><span class="line">깃은 커밋 외에는 모두 허상에 가까움</span><br><span class="line"></span><br><span class="line">alias glogs=&apos;git log --oneline --graph --decorate --all&apos;</span><br><span class="line">alias glogs=&apos;git log --oneline --graph --decorate&apos; 를 일반적으로 더 많이 사용 (내 작업을 보기 위해서)</span><br><span class="line"></span><br><span class="line">git tip</span><br><span class="line"></span><br><span class="line">1. 로컬 브랜치를 다른 이름으로 원격에 푸시하기</span><br><span class="line"></span><br><span class="line">$ git push origin web:spiderweb</span><br><span class="line">로컬 브랜치 web을 원격에는 spiderweb으로 이름을 바꿔서 보낼 수 있습니다.</span><br><span class="line"></span><br><span class="line">2. 원격 브랜치 삭제하기</span><br><span class="line"></span><br><span class="line">$ git branch -r</span><br><span class="line">$ git push origin :branch_name</span><br></pre></td></tr></table></figure><p>switch문을 활용하여 동시에 여러가지 경우 적용</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//월 마지막 일자 반환</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">daysInMonth</span>(<span class="params"> month </span>)</span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (month) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">28</span>;</span><br><span class="line">    <span class="keyword">case</span> (month % <span class="number">2</span> === <span class="number">0</span>):</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">default</span> :</span><br><span class="line">      <span class="keyword">return</span> <span class="number">31</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="170110"><a href="#170110" class="headerlink" title="170110"></a>170110</h3><p><strong>함수의 스코프는 선언될 때 결정된다 (실행될 때가 아니다)</strong></p><p><strong>코드가 빨리 if문에서 벗어나도록 하라</strong></p><p><strong>특정 라인을 읽었을 때, 복잡한 생각이 들지 않도록 하라</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">MDN의 폴리필은 해당 메소드가 지원되지 않을 경우, 대체안 (하위 버전 호환성)</span><br><span class="line"></span><br><span class="line">타입, 객체, This 등이 어려운 요소</span><br><span class="line"></span><br><span class="line">!!1 : 1은 트루이니, 아니니?</span><br><span class="line">뒤에 있는 요소의 T/F 여부를 판단해줌</span><br><span class="line">undefined, null, NaN, &quot;&quot;, 0</span><br><span class="line"></span><br><span class="line">forEach 와 map의 차이를 모르겠다에 대한 답변</span><br><span class="line">=&gt; forEach : 각각의 array의 요소에 ( )안의 함수를 일괄 적용시키는 함수</span><br><span class="line">=&gt; map : 각각의 array의 요소에 ( )안의 함수를 일괄 적용시켜 새로운 배열을 만드는 함수</span><br><span class="line">=&gt; filter는 해당 배열에 조건을 충족시키는 요소들만 담긴 배열을 반환받고 싶을 때 쓰는 것</span><br><span class="line"></span><br><span class="line">자료형마다 Call By Value 와 Call By Reference가 나뉘어있음</span><br><span class="line">복사 비용이 큰 경우들은 Call By Reference</span><br><span class="line">(java의 철학을 javascript가 그대로 가져옴)</span><br><span class="line"></span><br><span class="line">건축과 소프트웨어 개발은 유사성이 많다</span><br><span class="line"></span><br><span class="line">Javascript destructor를 공부해볼 것</span><br><span class="line"></span><br><span class="line">Map : 같은 차원의 다른 값으로 바꾸는 것</span><br><span class="line">Reduce : 차원을 낮추는 것</span><br><span class="line"></span><br><span class="line">개인 프로젝트는 질보다 양을 많이 본다</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newContent = &#123;<span class="string">"id"</span> : <span class="number">88</span>, <span class="string">"name"</span> : <span class="string">"crong"</span>, <span class="string">"content"</span> : [<span class="string">"새로운글"</span>], <span class="string">"like"</span> : <span class="number">5</span>, <span class="string">"comment"</span> : [<span class="string">"댓글이다"</span>]&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">appendContent</span>(<span class="params">str, obj</span>) </span>&#123;</span><br><span class="line">obj[<span class="string">"content"</span>].push(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">appendContent(<span class="string">"어서오세요!"</span>, newContent);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newContent[<span class="string">"content"</span>]);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeContent</span>(<span class="params">obj, key</span>) </span>&#123;</span><br><span class="line"><span class="keyword">delete</span> obj[key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">removeContent(newContent, <span class="string">"id"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newContent);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isContent</span>(<span class="params">obj, key</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> obj.hasOwnProperty(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isContent(newContent, <span class="string">"id"</span>));</span><br><span class="line"></span><br><span class="line">newObj.forEach(<span class="built_in">console</span>.log);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">Object</span>.keys(newObj).length; i++) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(newObj[<span class="built_in">Object</span>.keys(newObj)[i]]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="170111"><a href="#170111" class="headerlink" title="170111"></a>170111</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">렌더링 : 화면에 배치 및 스타일을 뿌려주는 것</span><br><span class="line"></span><br><span class="line">DOM은 HTML을 조작할 수 있는 함수의 묶음, 그것을 Tree로 표현하면 DOM Tree</span><br><span class="line">브라우저가 HTML을 받아서 보관하는 방식</span><br><span class="line"></span><br><span class="line">id : 고유한 레이아웃 요소에 부여</span><br><span class="line">id와 class는 이름표 붙이기</span><br><span class="line">id가 class에 비해서 적용의 우선순위가 높다</span><br><span class="line"></span><br><span class="line">HTML(DOM Tree) + CSS =&gt; 렌더링(layouting =&gt; painting)</span><br><span class="line"></span><br><span class="line">스크롤 할 때마다 렌더링 작업이 이루어진다</span><br><span class="line"></span><br><span class="line">브라우저는 병렬 처리를 할 수 없다</span><br><span class="line">따라서 JS는 Body 하단부에 위치해야 함 (화면에 HTML을 그려주는 것이 더 급하므로)</span><br><span class="line"></span><br><span class="line">단어의 의미를 파악하려고 하는 것에 너무 집착하지는 말 것</span><br><span class="line"></span><br><span class="line">document부터가 DOM node의 시작</span><br><span class="line"></span><br><span class="line">window는 BOM의 객체</span><br><span class="line"></span><br><span class="line">&apos;질문을 던지는 것에 지쳐서, 명확한 답을 보여줄 수 있는 프로그래밍이 좋다&apos;</span><br><span class="line"></span><br><span class="line">HTML과 CSS는 대부분의 오류를 수용해버린다</span><br><span class="line"></span><br><span class="line">웹은 문서와 다르게 영역으로 표현하는 것들이 있다</span><br><span class="line"></span><br><span class="line">body 안에 header, section, article, footer 등이 존재</span><br><span class="line"></span><br><span class="line">placeholder 기본값</span><br><span class="line"></span><br><span class="line">클릭 또는 특정 이벤트시에 바뀌어야 하는 노드라면,</span><br><span class="line">노드를 두 개 만들어놓고, 클릭시에 다른 노드로 대체하도록 할 것</span><br><span class="line"></span><br><span class="line">태그는 기본적으로 가지고 있는 스타일 정보가 있다</span><br><span class="line">(display속성에 따라 inline / block 등)</span><br><span class="line"></span><br><span class="line">작업시에 css reset을 해서 브라우저의 기본 스타일을 날리고 시작한다</span><br><span class="line"></span><br><span class="line">구조를 어떻게 짜는지가 핵심이다</span><br><span class="line"></span><br><span class="line">li:nth-child(2) 는 자식인 li 중에 2번째인 요소를 뜻함</span><br><span class="line"></span><br><span class="line">특정 글자에 효과를 주고 싶을 때 span(Inline tag)</span><br><span class="line"></span><br><span class="line">document.querySelector(&quot;.fmenu dd:nth-child(7) span&quot;);</span><br><span class="line">네이버 페이지에서 영화 라는 글자 선택</span><br><span class="line"></span><br><span class="line">$ git config --global alias.logs &quot;log --oneline --decorate --graph --all&quot;</span><br><span class="line">$ git logs</span><br><span class="line"></span><br><span class="line">노드를 찾을 때 공백을 조심해야 한다 (Textnode로 인해서 기대한 것과 다른 것이 나올 수 있음)</span><br></pre></td></tr></table></figure><hr><h3 id="170112"><a href="#170112" class="headerlink" title="170112"></a>170112</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">지정된 타입으로만 사용할 함수라면, 굳이 타입체크를 하지 않는 것이 좋을 수 있다</span><br><span class="line"></span><br><span class="line">function createEle(element_name, text) &#123;</span><br><span class="line">var create_node = document.createElement(element_name);</span><br><span class="line">if ( typeof text === &apos;string&apos; ) &#123;</span><br><span class="line">var text_node = document.createTextNode(text);</span><br><span class="line">create_node.appendChild(text_node);</span><br><span class="line">&#125;</span><br><span class="line">return create_node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">위 함수에서 가장 중요한 것은 string 여부를 검사하는 것보다, 첫 번째 인자가 제대로 들어온 것인지 확인하는 것이 중요하다</span><br><span class="line"></span><br><span class="line">미리 element 리스트를 배열로 만들어서, 들어온 첫 번째 인자가 indexOf로 -1를 반환하지 않는지 검사할 것</span><br><span class="line"></span><br><span class="line">다만 배열을 하드코딩해야 하므로, element list가 너무 길 수 있고, 나중에 element가 추가되었을 때는 수정해줘야 하는 위험성이 존재한다</span><br><span class="line"></span><br><span class="line">백엔드 개발이 가능하다면 크롤링해서 DB에 보관해서 활용하고, 주기적으로 크롤링을 해주면 될 것</span><br><span class="line"></span><br><span class="line">querySelector를 주로 쓰세요</span><br><span class="line">(getElementsById 등에서 할 수 있는 것들은 querySelector로도 다 할 수 있어요)</span><br><span class="line"></span><br><span class="line">document.querySelector만 쓰는 것이 아니라, 필요하면 section.querySelector 와 같이 좁혀서 쓰는 것이 좋습니다</span><br><span class="line"></span><br><span class="line">수업자료에 있는 것들이 실무에서 주로 많이 쓰는 것들이에요!</span><br><span class="line"></span><br><span class="line">메소드 간의 성능 차이는 요새 미미합니다</span><br><span class="line"></span><br><span class="line">늘 이해하기 쉽고, 오래 쓸 수 있는 코드가 좋습니다</span><br><span class="line"></span><br><span class="line">원칙과 철학이 없다면, 라이브러리를 만들 수 없다</span><br><span class="line"></span><br><span class="line">변수 이름은 명사</span><br><span class="line">함수 이름은 동사 + 명사</span><br><span class="line">이름을 그것이 하는 역할 범위와 최대한 일치시킬 것</span><br><span class="line">이름이 잘 지어지면 주석이 필요없어진다</span><br><span class="line"></span><br><span class="line">CSS id와 class명도 중요성이 똑같다</span><br><span class="line"></span><br><span class="line">더 좋은 것을 추구하고, 공유하고, 배려하는 개발자가 되어야 한다 (늘 배우는 개발자)</span><br><span class="line"></span><br><span class="line">(회사 코드를 직접 올릴 수는 없으니) 회사에서 배운 내용들을 블로깅할 것</span><br><span class="line"></span><br><span class="line">https://brunch.co.kr/@imagineer/194</span><br><span class="line">꼭 읽으면 좋지만 여전히 권장하는 걸 잘 하지 않는 여러분들을 위해서 요약하면</span><br><span class="line">- 3개월 개발자 과정을 공부해서 200번 이력서 낸 끝에 10만불 연봉으로 실리콘 밸리 스타트업에 취업 성공</span><br><span class="line">- 진짜 사람에게 연락할 것</span><br><span class="line">- 작게 시작하고, 천천히 점진적으로 발전할 것</span><br><span class="line">- 미래에 그것이 필요하다는 생각으로 공부할 것</span><br><span class="line">- 좋은 인상을 남길 것</span><br><span class="line">- 단거리가 아니라 마라톤임을 명심할 것</span><br><span class="line">- 자신의 취약점을 스스로 깨닫고 미친 듯이 공부할 것</span><br><span class="line">- 글에서 추천한 사이트</span><br><span class="line">- https://www.interviewcake.com/</span><br><span class="line">- https://www.hiredintech.com/classrooms/system-design/lesson/60</span><br><span class="line">- https://www.educative.io/collection/5642554087309312/5679846214598656</span><br><span class="line">- https://www.reddit.com/r/cscareerquestions/comments/1jov24/heres_how_to_prepare_for_tech_interviews/</span><br><span class="line">- https://github.com/h5bp/Front-end-Developer-Interview-Questions</span><br><span class="line">- https://leetcode.com/</span><br><span class="line"></span><br><span class="line">위와 관련해서 내가 떠올렸던 페이지</span><br><span class="line">- http://stevehanov.ca/blog/index.php?id=56</span><br><span class="line"></span><br><span class="line">코드는 로직을 담고 있어야지, 데이터가 있어선 안 된다</span><br><span class="line"></span><br><span class="line">함수의 변동은 최소화되어야 한다</span><br><span class="line">한 번 만들고 안 고치고 계속 쓸 수 있다면 얼마나 편할 것인가</span><br><span class="line"></span><br><span class="line">document로 접근하게 되면 성능이 매우 안 좋으므로 내가 찾는 지점을 한 번 찾고 변수에 담아서 반복 사용할 것</span><br><span class="line"></span><br><span class="line">머리속으로 상상하지 말고, 직접 과정을 적어보고, 코딩으로 옮기세요</span><br><span class="line">코딩 전 시간이 7~9할이 되도록 하세요</span><br><span class="line"></span><br><span class="line">연차가 쌓일수록 같이 하기 좋은 사람인지를 중요하게 본다 (어차피 모여서 일을 하는 것)</span><br><span class="line"></span><br><span class="line">CSS는 복잡해서 코드로 대체하기 어렵다</span><br><span class="line">디자인적 배경지식이 조금 필요하기 마련이다</span><br><span class="line">학습의 초점은 CSS의 특징, 개념에 대한 이해</span><br><span class="line"></span><br><span class="line">,이 아닌 ;로 구분함</span><br><span class="line"></span><br><span class="line">건축과 소프트웨어는 유사점이 많다</span><br><span class="line"></span><br><span class="line">em을 쓴다는 것은 반응형 웹을 하는 것이기 때문에, 정확한 값보다는 비율이 중요하다</span><br><span class="line"></span><br><span class="line">크롬 개발자 도구에서 칼라피커, 투명도 조절, color: 옆의 칼라 종류 자동완성 등 제공</span><br><span class="line">(칼라피커는 단위를 위아래 화살표를 눌러서 바꿔서 쓸 수 있다)</span><br><span class="line"></span><br><span class="line">pixel : 그 자체로서의 크기</span><br><span class="line">em : 부모 노드의 해당 요소에 대한 상대적 비율</span><br><span class="line">rem : html 문서 해당 요소의 default에 대한 상대적 비율</span><br><span class="line">% : 화면 전체 비율</span><br><span class="line"></span><br><span class="line">비전공자라고 먼저 얘기하고 다니지 마세요</span><br><span class="line"></span><br><span class="line">font-size는 상속받지만, margin 등은 그렇지 않음</span><br><span class="line"></span><br><span class="line">CSS의 폴리필로서 JS를 선택하는 것은 성능상으로 불이익이 클 수 있음</span><br><span class="line"></span><br><span class="line">P인데 자식 중에 두 번째 자식인 노드</span><br><span class="line">p:nth-child(2) &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">두 번째 p</span><br><span class="line">p:nth-of-type(2)</span><br><span class="line"></span><br><span class="line">sans-serif : 고딕체</span><br><span class="line">serif : 명조체</span><br><span class="line"></span><br><span class="line">우선은 이쁜 것보다는 가지런하고 통일된 디자인을 구현하려 노력해보세요</span><br><span class="line"></span><br><span class="line">다른 사람들이 만들어놓은 것중에 이쁜 것을 보고 이해하고, 내 것으로 만들어보세요</span><br><span class="line"></span><br><span class="line">CSS에서 정렬은 매우 어려운 작업이에요</span><br><span class="line"></span><br><span class="line">반응형 넓이 320 모바일 기준, 800 태블릿 기준</span><br><span class="line"></span><br><span class="line">event, dom, ajax, template</span><br></pre></td></tr></table></figure><hr><h3 id="170116"><a href="#170116" class="headerlink" title="170116"></a>170116</h3><h4 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">내가 바뀌지 않으면 바뀌는 것은 아무 것도 없다</span><br><span class="line">작은 성취가 모여서 크게 되는 것이니 꾸준히 하자</span><br><span class="line"></span><br><span class="line">금고 = 하드웨어, 은행 = 운영체제, 고객 = 프로그램</span><br><span class="line">프로그램은 메모리와 파일을 조작함</span><br><span class="line"></span><br><span class="line">파일 오픈 -&gt; 데이터 쓰기 -&gt; 파일 종료 의 개념이 네트워크로 이어짐</span><br><span class="line"></span><br><span class="line">소켓은 따로 공부해보세요</span><br><span class="line"></span><br><span class="line">클라이언트는 소켓을 통해 서버에 연결해서 메시지를 보냄</span><br><span class="line">서버는 소켓을 통해 listen하고 있다가 메시지를 받고 처리하여 클라이언트에게 메시지를 보냄</span><br><span class="line">누군가는 연결, 누군가는 대기</span><br><span class="line">메시지를 주고 받는 관계</span><br><span class="line"></span><br><span class="line">클라이언트는 무작위 포트가 생성되어 사용</span><br><span class="line">포트는 논리적으로 구분하기 위해 쓰임, 포트별로 다른 것은 없다</span><br><span class="line"></span><br><span class="line">소켓 통신 -&gt; TCP/IP -&gt; HTTP</span><br><span class="line">한글로 암호를 쓸 수 있듯, 프로토콜 위에 프로토콜을 얹을 수 있음</span><br><span class="line"></span><br><span class="line">Request에서 제일 중요한 것은 URL</span><br><span class="line">서버는 URL에 따라 Response를 결정함</span><br><span class="line"></span><br><span class="line">HTTP는 커넥션을 유지하지 않는다 (문서를 주고 받기 위했기 때문)</span><br><span class="line">덕분에 네트워크 오버헤드를 줄일 수 있음</span><br><span class="line">MMORPG는 연결을 유지한 상태로 Request, Response를 주고 받음</span><br><span class="line">네트워크 오버헤드가 많음</span><br><span class="line"></span><br><span class="line">HTTP/1은 한 번에 한 작업만 가능</span><br><span class="line"></span><br><span class="line">HTTP/1.1</span><br><span class="line">파이프라이닝 : 세탁기 예제(세탁, 건조, 탈수)</span><br><span class="line">한 세탁기에서 모든 기능을 다 하면 한 번에 하나만 할 수 있으므로,</span><br><span class="line">세탁기 건조기 탈수기를 나눠서 역할이 끝나면 다른 기기로 넘겨서 다음 작업을 처리할 수 있도록 함</span><br><span class="line">가장 오래 걸리는 작업이 완료되면 총작업이 완료됨</span><br><span class="line">쓰레드도 위와 비슷하다</span><br><span class="line"></span><br><span class="line">HTTP/2는 동시 요청 가능 (검색해보세요)</span><br><span class="line"></span><br><span class="line">주변에 있는 잘 하는 사람들을 모방하라</span><br><span class="line">내 주변 사람에게 도움이 줄 수 있는 사람이 될 수 있도록 노력하자</span><br><span class="line"></span><br><span class="line">어려운 책 살 필요 없고, 쉬운 책으로 기초를 쌓는게 중요합니다</span><br><span class="line"></span><br><span class="line">$ curl : 웹 브라우저와 같은 역할이되, 터미널에 출력</span><br><span class="line"></span><br><span class="line">telnet 127.0.0.1 8000</span><br><span class="line">GET / HTTP/1.0</span><br><span class="line">Host: localhost:8000</span><br><span class="line"></span><br><span class="line">telnet : 터미널에서 서버에 접속해서 평문텍스트를 주고 받을 수 있는 프로토콜</span><br><span class="line"></span><br><span class="line">서버는 클라이언트의 종류를 신경쓰지 않는다</span><br><span class="line"></span><br><span class="line">브라우저는 렌더링한 결과물을 보여준다</span><br><span class="line">다른 클라이언트들은 렌더링하지 않는다</span><br><span class="line"></span><br><span class="line">DNS : 우리가 입력한 URL을 IP로 바꾸어 인식해서 연결해주는 역할</span><br><span class="line"></span><br><span class="line">$ nslookup : 도메인 네임을 IP로 찾아줌</span><br><span class="line"></span><br><span class="line">Response의 body는 늘 우리가 요청한 것에 대한 데이터</span><br><span class="line"></span><br><span class="line">서버는 논리적 구분, 호스트가 물리적 구분</span><br><span class="line"></span><br><span class="line">프로토콜별로 포트번호가 정해져있다</span><br><span class="line"></span><br><span class="line">표준은 없지만, 표준삼아 쓰는 것을 디팩터스탠다드라고 하고, URL의 쿼리가 그렇다</span><br><span class="line"></span><br><span class="line">프래그먼트 : 페이지의 중간 지점마다 책갈피처럼 이동할 수 있도록 해줌</span><br><span class="line"></span><br><span class="line">HTTP 응답 코드</span><br><span class="line"></span><br><span class="line">- 200 : 성공</span><br><span class="line">- 300대: 서버에서 200과 다른 용도로 회신</span><br><span class="line">- 400대 : 클라이언트 문제</span><br><span class="line">- 500대 : 서버 또는 미들웨어 문제</span><br><span class="line"></span><br><span class="line">페이스북은 로딩시에 페이스북 로고가 돌아가도록 했었지만, 항의가 빗발치자 일반적인 로딩 아이콘으로 바꿔서 책임을 아이폰 등으로 전가시켜 항의가 확 적어진 효과를 누림</span><br><span class="line"></span><br><span class="line">네트워크는 늘 계층을 이루고 있다</span><br><span class="line"></span><br><span class="line">TCP가 UDP보다 안정적</span><br><span class="line"></span><br><span class="line">웹은 Response로 HTML(데이터 + 디자인 요소 포함)이 오지만, 앱에게는 JSON(오로지 데이터, 디자인 요소 X)을 보내서 뿌려주는 것은 앱이 알아서 함 (이때 앱의 소통방식이 RESTful API, JSON으로 받음)</span><br><span class="line"></span><br><span class="line">과도기로 XML RPC가 있었음, XML이 불필요하게 무겁고 해서 JSON으로 대체됨</span><br></pre></td></tr></table></figure><hr><h4 id="170116-Algorithm"><a href="#170116-Algorithm" class="headerlink" title="170116 Algorithm"></a>170116 Algorithm</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">알고리즘 : 시간의 순서대로 명령어를 정확하게 정의한 문제 해결 방법</span><br><span class="line"></span><br><span class="line">알고리즘의 조건</span><br><span class="line"></span><br><span class="line">- 입력 : 하나 이상의 입력</span><br><span class="line">- 출력 : 최소 하나 이상의 결과 (행동은 하지만 결과가 없으면 메소드)</span><br><span class="line">- 명확성 : 수행 과정이 모호하지 않은 명령어로 구성</span><br><span class="line">- 유한성 : 유한한 시간 안에 종료되야 한다</span><br><span class="line"></span><br><span class="line">알고리즘의 서술</span><br><span class="line"></span><br><span class="line">- 순차</span><br><span class="line">- 반복</span><br><span class="line">- 조건</span><br><span class="line"></span><br><span class="line">일반적으로는 수도코드로 작성하는 것을 권장한다(언어가 사고를 제한할 수 있으므로)</span><br><span class="line"></span><br><span class="line">알고리즘을 배워야 하는 이유</span><br><span class="line"></span><br><span class="line">- 주어진 문제를 더 쉽게 풀기 위해서</span><br><span class="line">- 생각하는 방식의 변화</span><br><span class="line">- 면접대비</span><br><span class="line"></span><br><span class="line">천재가 아니면, 꼭 해야 하고, 천재면 빨리 할 수 있으니까 역시 하면 된다</span><br><span class="line"></span><br><span class="line">자료구조 공부하기</span><br><span class="line"></span><br><span class="line">- 자료구조별 특성</span><br><span class="line">- 자료구조별 API</span><br><span class="line">- 문제를 잘 해결하려면 좋은 자료구조의 선택이 매우 중요</span><br><span class="line">- 내가 Array.Splice를 구현한다면?</span><br><span class="line"></span><br><span class="line">추천도서</span><br><span class="line"></span><br><span class="line">- [누워서 읽는 알고리즘](http://www.yes24.com/24/goods/22380570)</span><br><span class="line">- [코딩 인터뷰 완전분석](http://www.yes24.com/24/Goods/7434347)</span><br><span class="line">- [Introduction to algorithms](http://www.yes24.com/24/goods/13776831)</span><br><span class="line">- [Art Of Programming](http://www.yes24.com/24/goods/2149593)</span><br><span class="line"></span><br><span class="line">실행을 거듭 반복해보는 습관은 아주 최악이다</span><br><span class="line"></span><br><span class="line">내가 컴퓨터가 되는 과정을 한 번 이상 해보고 실행을 해봐야 한다</span><br><span class="line"></span><br><span class="line">종이에 샤프로 손코딩해보세요, 옮기면 바로 실행이 될 수 있는 완성도까지</span><br><span class="line"></span><br><span class="line">결과가 정확한 것은 당연, 시간과 메모리를 적게 쓰는 것이 주요 튜닝포인트</span><br><span class="line"></span><br><span class="line">요새는 시간복잡도가 보다 중요한 추세</span><br><span class="line"></span><br><span class="line">점근 표기법 : 알고리즘 복잡도를 단순히 하기 위해 사용됨</span><br><span class="line"></span><br><span class="line">함수의 시각화 = 그래프 (x : 인풋, y : 걸린 시간)</span><br><span class="line"></span><br><span class="line">N보다 큰 x에 대해 f(x)는 g(x)에 비해 항상 빠르게 실행된다</span><br><span class="line"></span><br><span class="line">여기서의 N은 임의의 큰 숫자</span><br><span class="line"></span><br><span class="line">데이터가 작을 때는 어떤 알고리즘이든 상관없다</span><br><span class="line"></span><br><span class="line">알고리즘의 필요성을 모르는 것은 데이터가 많은 프로그램을 다루지 않았기 때문</span><br><span class="line"></span><br><span class="line">Big O는 성능 최악의 경우를 알기 위함</span><br><span class="line"></span><br><span class="line">사람들은 서비스를 매번 잘 쓰다가도 한 번 잘 안 되면 버린다</span><br><span class="line"></span><br><span class="line">다항식 시간까지는 풀 수 있는 문제, 지수함수는 난제</span><br><span class="line"></span><br><span class="line">일주일에 한 챕터만이라도 보면 됨, 끝까지 보는게 중요하고, 같은 책을 여러 번 봐라</span><br><span class="line"></span><br><span class="line">인풋 사이즈와 상관이 없다면 O(1)</span><br><span class="line"></span><br><span class="line">대부분의 O(logN)은 Binary Search와 관계가 있다</span><br><span class="line"></span><br><span class="line">O(N) : 전체를 한 번 찾는 것, 몇 승이냐에 따라 몇 번 찾는지 여부</span><br><span class="line"></span><br><span class="line">O(2^n) : 암호화 알고리즘 등</span><br><span class="line"></span><br><span class="line">P란? : 폴리노미악, 어떤 문제가 N차 다항식 복잡도 안에 풀림, 풀 수 있는 문제</span><br><span class="line"></span><br><span class="line">NP란? : 다항식인지 결정할 수 없다 Non Determine, 다항식으로 풀 수 있는지 모른다</span><br><span class="line"></span><br><span class="line">NP안에는 P인 것도 아닌 것도 있다</span><br><span class="line"></span><br><span class="line">NP는 Yes or No로 대답할 수 있는 문제중 P인지 결정되지 않은 문제</span><br><span class="line"></span><br><span class="line">P=NP? : NP중에 하나가 P로 치환될 수 있다, 반대로 할 수 있다, 그것을 증명할 수 있는 방법이 없음(세상의 모든 문제는 풀 수 있으니 풀 수 있다, 반대면 풀 수 없으니 포기하자 여야 하는데 지금은 알지 못 해서 삽질)</span><br><span class="line"></span><br><span class="line">NP complete : Instance 하나에 대해 Yes or No를 다항식의 시간 안에 증명할 수 있는가?</span><br><span class="line"></span><br><span class="line">NP hard : 무지 어려운 것</span><br></pre></td></tr></table></figure><hr><h4 id="170116-프로세스-스레드-메모리"><a href="#170116-프로세스-스레드-메모리" class="headerlink" title="170116 프로세스, 스레드, 메모리"></a>170116 프로세스, 스레드, 메모리</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">프로세스 : 실행중인 프로그램</span><br><span class="line">CPU -&gt; 레지스터 -&gt; 메모리 -&gt; 디스크(secondary storage)</span><br><span class="line"></span><br><span class="line">운영체제는 무엇인가?</span><br><span class="line">- 커널</span><br><span class="line">- 시스템콜 : 프로그램이 OS에게 하드웨어 제어를 요청하는 API</span><br><span class="line"></span><br><span class="line">프로세스가 가지는  상태 : 실행중, 대기, 생성, 종료</span><br><span class="line"></span><br><span class="line">프로그램 요소</span><br><span class="line">- 코드 : 읽기 전용</span><br><span class="line">- 데이터 : 전역 변수</span><br><span class="line">- 스택 : 함수 호출시마다 한 단계씩 쌓임, 함수의 지역변수 매개변수</span><br><span class="line">- 힙 : 동적 메모리, 객체</span><br><span class="line"></span><br><span class="line">프로그램 카운터 : 내 프로그램이 어디까지 실행되었는가?</span><br><span class="line"></span><br><span class="line">쓰레드 : 실, 프로그램 실행을 스케줄링하는 가장 작은 단위</span><br><span class="line">프로세스에는 항상 하나 이상의 쓰레드가 있고, 보통 한 프로세스 안에 여러 스레드를 가질 수 있다</span><br><span class="line">멀티 스레드 프로그래밍 : 병렬 프로그래밍</span><br><span class="line">멀티 스레드여도 코드, 데이터는 공유함</span><br><span class="line">스레드마다 레지스터(연산)와 스택, 프로그램 카운터를 각자 가짐</span><br><span class="line"></span><br><span class="line">GUI는 멀티 스레드로 동작함(병목현상을 막기 위해서)</span><br><span class="line">GUI에서 thread를 관장하는 것이 main thread(프로세스에는 항상 메인 스레드가 하나 있어요)</span><br><span class="line">IO와 같은 작업이 발생하면 git branch처럼 thread를 하나 생성해서 처리하도록 함</span><br><span class="line">(메모리는 연산시에 오래 걸리는데, IO작업은 오래 걸리지 않음)</span><br><span class="line">비동기 프로그래밍</span><br><span class="line"></span><br><span class="line">스레드 : 프로그램의 흐름, 한 프로세스는 여러 개의 스레드를 가질 수 있고 그것들은 한 CPU에서 돌아갈 수 있다, CPU 코어 하나에서는 스레드 하나만 실행 가능</span><br><span class="line">다운로드는 멀티 스레드를 만들거나 비동기로 처리해야만 병목현상을 막을 수 있다</span><br><span class="line">메인 스레드에 IO 절대 넣지 마세요! (IO는 비동기와 멀티 스레드!)</span><br></pre></td></tr></table></figure><hr><h3 id="170117"><a href="#170117" class="headerlink" title="170117"></a>170117</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Virtual DOM : DOM과 동기화된 자료구조를 만들고 변경점만 실제 DOM에 반영, 느린 DOM 조작을 극복</span><br><span class="line"></span><br><span class="line">Node를 잘 다루려면 비동기를 잘 알아야 함</span><br><span class="line"></span><br><span class="line">기획 -&gt; 손코딩 -&gt; Functional Test -&gt; Unit Test</span><br><span class="line"></span><br><span class="line">코드가 의도를 표현할 수 있어야 한다</span><br><span class="line"></span><br><span class="line">소프트웨어의 특징</span><br><span class="line"></span><br><span class="line">- 변경이 가장 중요한 특징이다</span><br><span class="line">- 출시가 시작이다</span><br><span class="line">- 항상 수정을 염두해두고 코딩을 해야 한다</span><br><span class="line">- 변경에 기민하게 대응할 수 있는 코드여야 한다</span><br><span class="line">- 항상 사람이 좋아할만한 코드를 짜야 한다, 그 다음이 성능 (일반적으로)</span><br><span class="line">- 가로 스크롤이 에디터에 생기면 안 좋은 코드</span><br><span class="line"></span><br><span class="line">전역변수는 왜 안 좋은가?</span><br><span class="line">- 나도 모르는 영향을 미칠 수 있기 때문</span><br><span class="line"></span><br><span class="line">JS로 CSS를 조절하고 싶다면, style 객체에 접근해서 조정할 수 있다</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">비동기 : 스레드내에서 인터프리터가 읽는 시점에 호출되지 않는 것</span><br><span class="line"></span><br><span class="line">모든 명령의 실행을 마친 후에 넘겨받은 함수객체를 실행시킬 수도 있는데 이것을 바로 Callback</span><br><span class="line">프로그래밍에서 콜백(callback)은 다른 코드의 인수로서 넘겨주는 실행 가능한 코드를 말한다</span><br><span class="line">Callback function은, 특정 함수에 매개변수로서 전달된 함수를 지칭합니다.</span><br><span class="line">그리고 그 Callback function은 그 함수를 전달받은 함수 안에서 호출되게 됩니다.</span><br><span class="line"></span><br><span class="line">콜백함수 : 나중에 실행될 비동기 함수</span><br><span class="line"></span><br><span class="line">콜백함수의 실행순위는 최후순위</span><br><span class="line"></span><br><span class="line">이벤트 큐 : 콜백함수들이 쌓이는 공간</span><br><span class="line"></span><br><span class="line">이벤트들은 이벤트 큐에 담기고, 브라우저에서 어떤 변화가 있을 때, 그 변화에 해당하는 이벤트가 있는지 큐에서 찾아본다</span><br><span class="line">(이벤트 큐에 담기는 것이 비동기 함수? 콜백 함수? 이벤트리스너?)</span><br><span class="line"></span><br><span class="line">비동기내 콜백함수 실행 순서는 우리가 알 수 없다</span><br></pre></td></tr></table></figure><hr><h3 id="170118"><a href="#170118" class="headerlink" title="170118"></a>170118</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">함수는 늘 반환하며, 반환하는 순간 종료</span><br><span class="line"></span><br><span class="line">return을 통해 반환값을 정하지 않으면 undefined 반환</span><br><span class="line"></span><br><span class="line">CSS를 좋아하지 않으면 좋은 프론트엔드 개발자가 되기 어렵다</span><br><span class="line"></span><br><span class="line">CSS와 JS의 경계에 해당하는 것들이 있다 (애니메이션 등)</span><br><span class="line"></span><br><span class="line">CSS가 생각보다 강력해지고 강화되고 있다</span><br><span class="line"></span><br><span class="line">CSS Preprocessor가 나와서 진화하고 있다</span><br><span class="line"></span><br><span class="line">차지하는 비중이 점점 커질 것이므로, CSS로 할 수 있는 것들이 무엇인지 알아야 시너지를 낼 수 있다</span><br><span class="line"></span><br><span class="line">프론트엔드 개발자가 될 것이라면, CSS는 친구다</span><br><span class="line"></span><br><span class="line">원래 CSS는 힘들고 장벽이 있다, 욕심이 있다면 많이 해보라, 이쁜 사이트를 흉내내라</span><br><span class="line"></span><br><span class="line">관심이 없다면, 백엔드를 심각하게 고민하라, 그런데 점차 시장이 확 줄어들 수 있다</span><br><span class="line"></span><br><span class="line">시스템 엔지니어가 줄었듯이, 비즈니스 구현에 필요한 많은 부분들이 클라우드로 제공될 것</span><br><span class="line"></span><br><span class="line">서버는 데이터(JSON) 제공 및 저장만 하고, 클라이언트가 라우팅이나 뿌려주는 것들을 하는 과정으로 바뀌어가고 있다</span><br><span class="line"></span><br><span class="line">백엔드 -&gt; 클라이언트 || 데이터 관련으로 가는 트렌드</span><br><span class="line"></span><br><span class="line">구글은 발표하는 것과 달리 실제로 스스로 도입을 하지 않는 경우가 많더라</span><br><span class="line">(앵귤러 내놓고 자기들이 사용하지 않음)</span><br><span class="line"></span><br><span class="line">반면 페이스북은 필요에 의해서 만들어서 쓰기에 더 좋다고 볼 수 있다</span><br><span class="line"></span><br><span class="line">애플은 사용자를 위한다는 명목 하에 기술 도입을 판단한다고 하지만, 실제로는 iOS가 아닌 웹에서 이런저런 것들을 하는 것이 본인들의 사업에 도움이 되지 않기 때문</span><br><span class="line"></span><br><span class="line">CSS는 피할 수 없다</span><br><span class="line"></span><br><span class="line">열정을 가지고 꾸준한 트레이닝이 결국은 이긴다</span><br><span class="line"></span><br><span class="line">DOM을 변수에 캐시해두는 지점에서 문제가 자주 발생한다 (Call By Value)</span><br><span class="line"></span><br><span class="line">이벤트 객체를 써보세요 (저번 과제 3번 콜백함수에 evt로 넘어오는 parameter가 이벤트 객체)</span><br><span class="line"></span><br><span class="line">이벤트 타겟은 이벤트 등록과 상관없이 발생한 마지막 노드를 알려준다</span><br><span class="line"></span><br><span class="line">HTML은 변동될 수 있다는 점을 감안해야 한다, 정확히 무엇을 바꿀 것인지 의도를 명시화하라</span><br><span class="line">(nextSibling 등은 위험할 수 있고, 나만 아는 의도이다)</span><br><span class="line"></span><br><span class="line">변수값으로 dot notation을 하면 오류가 난다, 그래서 아래와 같이 할 것</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCSS</span>(<span class="params">ele, styleName, value</span>) </span>&#123;</span><br><span class="line">  ele.style[styleName] = value;</span><br><span class="line">  <span class="comment">// ele.style.backgroundColor = "red";</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setCSS(ele, <span class="string">"opacity"</span>: <span class="number">0.5</span>, <span class="string">"display"</span>: <span class="string">"none"</span>) 를 쓰기 위해선,</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCSS</span>(<span class="params">ele, styleObj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    ele.style[key] = obj[key];</span><br><span class="line">    <span class="comment">// javascript object loop</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setCSS(ele, &#123;</span><br><span class="line">  <span class="string">"opacity"</span>: <span class="number">0.5</span>,</span><br><span class="line">  <span class="string">"display"</span>: <span class="string">"none"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">함수에 매개변수를 아끼지 마세요, 늘려야 범용성이 증가할 수 있는 경우가 많아요</span><br><span class="line"></span><br><span class="line">캐시없애기, 이벤트 타겟, CSS 설정을 위한 함수</span><br><span class="line"></span><br><span class="line">내가 써야 하는 프레임워크가 있는데 할 줄 모른다면, react best practice 와 같이 검색</span><br><span class="line"></span><br><span class="line">object 마지막 요소 뒤에 , 를 붙이면 에러가 나는 것이 맞다</span><br><span class="line"></span><br><span class="line">dot notation이 더 보기 편하다</span><br><span class="line"></span><br><span class="line">이벤트 델리게이션</span><br><span class="line"></span><br><span class="line">html의 style객체로 정보를 얻어오려고 할 때, inline으로 되어있지 않으면 가져올 수 없다</span><br><span class="line"></span><br><span class="line">보여졌다 안 보여졌다를 하기 위해선 inline으로 지정하는게 편하다</span><br><span class="line"></span><br><span class="line">페어 프로그래밍은 위험도를 줄이기 위한 것</span><br><span class="line"></span><br><span class="line">혼자 할 때는 몰입이라는 장점, 같이 할 때는 넓은 시야</span><br><span class="line"></span><br><span class="line">마크업 변경되면, JS도 변경되기 마련이에요</span><br><span class="line"></span><br><span class="line">이벤트 델리게이션을 쓰게 되면, HTML이 복잡해질 때, 이벤트가 점점 커지는 단점이 있어요</span><br><span class="line"></span><br><span class="line">(필터링도 복잡해져요, 그것을 해결하기 위한 것이 closest, match 등)</span><br><span class="line"></span><br><span class="line">이벤트가 여러 개인 것보다 이벤트 자체 사이즈가 조금 더 큰 것이 브라우저 성능에 더 효과적이라고 합니다 (필터링을 미리 할 수 있도록 하세요, li를 눌렀을 때 버튼의 이벤트가 작동되지 않도록)</span><br><span class="line"></span><br><span class="line">되도록이면 호출자와 피호출자가 가까이 있도록 하세요</span><br><span class="line"></span><br><span class="line">이벤트 위임을 효과적으로 쓰세요</span><br><span class="line"></span><br><span class="line">시각화로 IF Tree를 그리는 것이 좋다</span><br></pre></td></tr></table></figure><hr><h3 id="170119-Ajax"><a href="#170119-Ajax" class="headerlink" title="170119 Ajax"></a>170119 Ajax</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">eventListener 마지막 parameter로 true를 주면 bubbling이 아닌 capturing을 할 수 있다</span><br><span class="line"></span><br><span class="line">Ajax 자체는 동기적으로 처리되나, 그것의 결과값이 비동기적으로 온다</span><br><span class="line"></span><br><span class="line">SI는 서비스를 위탁을 받아서 개발하는 의미로 많이 쓰여요</span><br><span class="line"></span><br><span class="line">한국에는 솔루션을 파는 회사들이 있어요, SI와는 달라서 기술력도 좋고 경쟁력이 있어요(프로덕트를 만든다면)</span><br><span class="line"></span><br><span class="line">게임회사도 일종의 솔루션 회사이지요</span><br><span class="line"></span><br><span class="line">좋은 회사인지 여부는 우선 코스닥 상장여부를 보셔요</span><br><span class="line"></span><br><span class="line">기술과 도메인으로 구성되어요, 주니어에게는 도메인을 요구하지는 않아요 (기술은 회사 가기 전, 도메인은 회사 가서)</span><br><span class="line"></span><br><span class="line">자기 제품이 있는 회사가 좋은 회사일 수 있어요</span><br><span class="line"></span><br><span class="line">나중에 실행될 녀석이 콜백 함수에요, 함수에서 인자로 전달되는 함수, 당장 실행되진 않지만 나중에 필요할 때 실행될-</span><br><span class="line"></span><br><span class="line">Ajax는 특정 기술을 설명하는 개념이에요, 원래 웹사이트는 전체 새로고침되는데 부분적으로만 고치고 싶을 때 많이 쓰여요</span><br><span class="line"></span><br><span class="line">xmlHttpRequest를 통해서 부분적으로만 데이터를 가져오도록 하자</span><br><span class="line"></span><br><span class="line">JSON : 데이터를 주고 받기 위한 포맷, 처음엔 자바스크립트 객체 형태에서 따왔고, 이제는 APP과의 통신이나 NoSQL에서도 쓰여요</span><br><span class="line"></span><br><span class="line">NoSQL을 쓰게 되면 전환비용이 없겠죠?</span><br><span class="line"></span><br><span class="line">JSON을 받으면, 문자열 형태니까 그것을 json.parse를 통해 객체형태로 변환하는 과정이 필요해요</span><br><span class="line"></span><br><span class="line">서버에서 JSON을 통 HTML 형태로 만들어서 넘겨주면 innerHTML로 넣기만 하면 끝이에요 (서버에서 처리하는게 더 빨라요)</span><br><span class="line"></span><br><span class="line">요새 트렌드는 서버를 가볍게 하자이기도 하고, 클라이언트 사이드에서 뷰를 관할하게 하도록 해서, JSON으로 넘겨주는게 일반적이에요</span><br><span class="line"></span><br><span class="line">Ajax가 아니라 처음 데이터를 다 받아오면, 눌렀을 때 바로 뜨는 장점이 있겠죠 (UX, UI의 목적성에 따라 달라요)</span><br><span class="line"></span><br><span class="line">하나의 DOM을 만들어놓고 데이터를 바꾸는 것과, 이미 만들어놓은 DOM들 중 특정 하나만 보여주도록 하는 것은 그때 그때 비교해서 선택해야 해요</span><br><span class="line"></span><br><span class="line">Dynamic하게 변하는 사이트일수록 DOM을 어떻게 보여줄까? JSON을 언제 가져올까? lazy loading을 얼마나 적용할까? 고민</span><br><span class="line"></span><br><span class="line">lazy loading : 화면에 보이는 만큼을 최대한 빨리 보여주는게 좋은 사이트라는 개념</span><br><span class="line"></span><br><span class="line">DOM이 아니라 XMLHttpRequest에도 addEventListener를 쓸 수 있어요</span><br><span class="line">방식은 동일하지만 하는 역할은 달라요 (open, send도 쓸 수 있어요)</span><br><span class="line"></span><br><span class="line">브라우저에서 Ajax의 구현한 것이 XMLHttpRequest이에요 (줄이면 XHR)</span><br><span class="line"></span><br><span class="line">new를 쓰면 함수가 객체를 반환하도록 할 수 있어요</span><br><span class="line">new = 객체를 새로 만든당, 함수 안에서 만들어서 준당</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oReq = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">oReq.addEventListener(<span class="string">"load"</span>, reqListener(evt) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(evt.target.responseText);</span><br><span class="line">&#125;);</span><br><span class="line">oReq.open(<span class="string">"GET"</span>, <span class="string">"https://api.github.com/repos/code-squad/web-white-common"</span>); <span class="comment">// 요청 설정</span></span><br><span class="line">oReq.send(); <span class="comment">// 서버에게 요청하는 순간</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// oReq = evt.target, Ajax를 통해서 받아온 데이터를 oReq에 넣어줘요</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> oReq = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  oReq.addEventListener(<span class="string">"load"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(evt.target.responseText);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">  oReq.open(<span class="string">"GET"</span>, <span class="string">"https://api.zigbang.com/v1/items?detail=true&amp;item_ids=7156351"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">  oReq.send();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ajaxButton = $(<span class="string">".ajax"</span>);</span><br><span class="line"></span><br><span class="line">ajaxButton.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">  $(<span class="string">".ajax"</span>).remove();</span><br><span class="line">  oReq.open(<span class="string">"GET"</span>, <span class="string">"../json.txt"</span>);</span><br><span class="line">  oReq.send();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oReq = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="keyword">var</span> redirec = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">oReq.addEventListener(<span class="string">"load"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">  redirec.open(<span class="string">"GET"</span>, <span class="built_in">JSON</span>.parse(evt.target.responseText).owner.repos_url);</span><br><span class="line">  redirec.send();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">redirec.addEventListener(<span class="string">"load"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data = <span class="built_in">JSON</span>.parse(evt.target.responseText)[<span class="number">0</span>];</span><br><span class="line">  $(<span class="string">".github-list"</span>).insertAdjacentHTML(<span class="string">"beforeend"</span>, <span class="string">"&lt;dt&gt;"</span> + data.html_url + <span class="string">"&lt;/dt&gt;"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">eventTarget, url, func</span>) </span>&#123;</span><br><span class="line">  eventTarget.open(<span class="string">"GET"</span>, url);</span><br><span class="line">  eventTarget.send();</span><br><span class="line"></span><br><span class="line">  eventTarger.addEventListener(<span class="string">"load"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="built_in">JSON</span>.parse(evt.target.responseText);</span><br><span class="line">    func();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">  $(<span class="string">".github-list"</span>).insertAdjacentHTML(<span class="string">"beforeend"</span>, <span class="string">"&lt;dt&gt;"</span> + key + <span class="string">"&lt;/dt&gt;"</span> + <span class="string">"&lt;dd&gt;"</span> + data[key] + <span class="string">"&lt;/dd&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btn.setAttribute(<span class="string">"style"</span>, <span class="string">"display: none"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">XHR 객체에선 readyState라는 것을 통해 진행 상황 정보를 알 수 있어요</span><br><span class="line"></span><br><span class="line">비동기는 모든 사전 과정이 끝난 뒤에 이루어지기 때문에 비동기 작업 이후에 무엇을 하고 싶다면 그 이벤트 안에 그 비동기 작업 이후에 호출하도록 해야 해요</span><br><span class="line"></span><br><span class="line">비동기에 대해 설명하라는 질문은 프론트엔드 개발자에게 꼭 물어본다</span><br><span class="line"></span><br><span class="line">HTML에서 로직을 분리해내야 최대한 수정을 줄일 수 있다, HTML 수정은 곧 DOM 수정에 이어진다</span><br><span class="line"></span><br><span class="line">JS, HTML, CSS, DOM, EVENT, AJAX, TEMPLATE</span><br><span class="line"></span><br><span class="line">CORS : 다른 도메인에서도 데이터를 가져갈 수 있도록 하는 설정</span><br><span class="line"></span><br><span class="line">*지역번수는 함수내에서 전역번수보다 높은 우선순위를 가집니다.* =&gt; Shadowing</span><br><span class="line"></span><br><span class="line">만약, 같은 이름의 전역변수와 지역변수가 존재할 경우 이 변수를 함수내에서 사용한다면, 지역변수가 우선권을 갖게 됩니다.</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"아이디"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"비밀번호"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"로그인"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="170124-Database"><a href="#170124-Database" class="headerlink" title="170124 Database"></a>170124 Database</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line">목표 달성을 위해선 생각보다 많은 노력이 필요해요, 그러나 열심히 하시면서도 멘탈관리해서 천천히 오래갈 수 있어야 해요</span><br><span class="line"></span><br><span class="line">타인과 경쟁하려고 하지 마시고, 매일 조금씩만 좋아지면 됩니다</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Data, Database, DBMS</span><br><span class="line"></span><br><span class="line">데이터는 저장할 수 있는 값의 집합이에요, 이 정의는 시대에 따라 바뀌어요, 저장할 수 있어야 다룰 수 있어요</span><br><span class="line"></span><br><span class="line">데이터베이스는 이러한 데이터를 저장해놓은 곳이에요</span><br><span class="line"></span><br><span class="line">DBMS는 이러한 데이터베이스를 관리하는 프로그램이에요</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Data만으로는 의미가 없고, 그것으로부터 의미를 추출해야 Information이 되어요</span><br><span class="line"></span><br><span class="line">Data가 무조건 많다고 좋은 것이 아니에요, 하지만 이제는 처리하기 어려울만큼 큰 데이터의 시대가 되었어요</span><br><span class="line"></span><br><span class="line">예술과 공학의 중간지점이 프로그래밍이에요, 건축도 그래요, 짓는 것은 공학이지만 아름답게 하는 것은 예술이에요</span><br><span class="line"></span><br><span class="line">이론에 의해서 생겨난 것이 아니라, 관습에 의해서 생겨난 것이 많아요</span><br><span class="line"></span><br><span class="line">컨벤셔널, 프랙티컬, 예전에 해보니 괜찮았던 것을 지금 쓰고 있어요</span><br><span class="line"></span><br><span class="line">이해가 아니라 반복적으로 익히는 것이 우선이에요</span><br><span class="line"></span><br><span class="line">Data -&gt; Information 과정은 기계적으로 패턴을 파악하는 것으로 대부분 가능하지만,</span><br><span class="line"></span><br><span class="line">Knowledge는 Information에서 기계적으로 추출해내기 어려워요 (이것을 기계적으로 극복하기 위한 것이 머신러닝과 같은 분야에요)</span><br><span class="line"></span><br><span class="line">SE -&gt; Devops / DBA -&gt; DB Consultant</span><br><span class="line"></span><br><span class="line">자꾸 답이 있는 문제를 푸는 것에 매몰되시면 안 되어요</span><br><span class="line"></span><br><span class="line">로그는 천문학에서 큰 수를 작은 수로 표현하고 연산하기 위해 만들어졌어요</span><br><span class="line"></span><br><span class="line">Binary Search에서 원소의 개수와 검색에 걸리는 시간은 LogN이에요 (인덱스로 바로 접근해서 검색해요)</span><br><span class="line"></span><br><span class="line">주소록에서 이름으로 Binary Search를 하기 위해선 이름으로 인덱싱이 되어있어야 해요</span><br><span class="line"></span><br><span class="line">원래 검색용으로는 Tree, Hash와 같은 자료구조로 해야 해요</span><br><span class="line"></span><br><span class="line">내가 개발하려는 기능의 일부가 이미 상용되어있다면, 우리가 직접 개발하는 비용보다 훨씬 싸요</span><br><span class="line"></span><br><span class="line">주소록 만들어보세요, 배열에 객체들을 저장하고 검색하는 기능, 동명이인이 있을 수 있으니 배열의 모든 요소를 찾아야 해요</span><br><span class="line"></span><br><span class="line">배열은 특정 인덱스로 바로 접근할 수 있어요</span><br><span class="line"></span><br><span class="line">시퀄과 에스큐엘 모두 SQL을 지칭하는 발음이에요, 처음에 IBM에서 시퀄이라고 불렀어요 (표준은 SQL이에요)</span><br><span class="line"></span><br><span class="line">돈만 있으면 Oracle이 제일 좋아요, 2등인 MySQL도 오라클이 샀어요, 요새는 NoSQL도 많이 사용해요</span><br><span class="line"></span><br><span class="line">CAP</span><br><span class="line">- Consistency 일관성 : 모든 사용자가 데이터에 접근했을 때 같은 결과를 돌려주는 것, 삽입 변경 삭제가 즉시 반영되어야 함</span><br><span class="line">- Availability 가용성 : 장애 발생 시간이 적다</span><br><span class="line">- 위의 두 가지를 확보하기 위해 필연적으로 최소 3대 이상 홀수 대의 서버가 필요하다</span><br><span class="line">  1대 서비스 + 2대 백업, 1대가 죽으면 백업 중 하나로 서비스하고 나머지 백업에서 복사해서 살린다</span><br><span class="line">- Partition Tolerence</span><br><span class="line">- CAP 이론을 모두 만족시키는 서버는 수학적으로 절대 존재할 수 없다, 위의 세 가지 중 최소 하나는 희생해야 한다, 클라우드 서비스의 대부분은 일관성을 포기한다(Eventual Consistency), 5초 정도 늦게 반영</span><br><span class="line"></span><br><span class="line">ACID (대표적인 관계형 데이터베이스의 특징)</span><br><span class="line"></span><br><span class="line">- Atomicity 원자성 : 은행에서 50만원을 빼는 것과 50만원을 보내는 것은 트랜잭션으로 묶여서 처리되어요</span><br><span class="line">  - All or Nothing, 아예 실패하던지 성공하던지 둘 중 하나에요</span><br><span class="line">- Consistency 일관성</span><br><span class="line">- Isolation 고립성 : 실제로는 여러 명이 사용하지만, API 상에서는 혼자 사용하는 것처럼 보여줘라</span><br><span class="line">  - serialize, 동시에 요청하더라도 나는 직렬화해서 처리해주겠다, 멀티 유저 시스템 중 제일 쉽지만 성능이 나빠요, 그래서 다른 방법을 보통 사용해요</span><br><span class="line">- Durability 내구성 : 영구적 저장 장치에 저장해두어야 해요</span><br><span class="line"></span><br><span class="line">서버 대수를 늘려서 견디는 시스템이 수평 확장, 더 좋은 서버로 바꾸는 것은 수직 확장</span><br><span class="line"></span><br><span class="line">관계형 데이터베이스는 수평 확장이 안 되어요, NoSQL은 수평 확장이 잘 되어요</span><br><span class="line"></span><br><span class="line">리스트는 배열에 비해 추가가 매우 쉬워요, 트리에서 서로 간의 연결 관계가 확장되면 그래프에요, SNS가 전형적인 그래프에요</span><br><span class="line"></span><br><span class="line">JSON은 사람과 컴퓨터 모두 쉽게 읽을 수 있어서 대중화되었어요</span><br><span class="line"></span><br><span class="line">Locality가 있기 때문에 작은 cache만 사용해도 할 수 있다</span><br><span class="line"></span><br><span class="line">- 시간 지역성 : 가장 최근에 사용된 데이터가 사용될 가능성이 높다</span><br><span class="line">- 공간 지역성 : 방금 사용한 데이터 주변이 사용될 가능성이 높다</span><br><span class="line"></span><br><span class="line">Nginx, Apach가 User와 서버 사이에 프록시</span><br><span class="line"></span><br><span class="line">Django 같은 것은 WAS, 비즈니스 로직을 처리해줘요, 이것은 데이터를 데이터베이스에 저장해요</span><br><span class="line"></span><br><span class="line">DB가 제일 느리고 서버에 부하가 걸리는 것은 보통 DB 때문이에요</span><br><span class="line"></span><br><span class="line">DB와 WAS 사이에 cache를 두어서 처리해줘요, cache에서 찾아서 없을 때만 DB에서 찾아요</span><br><span class="line"></span><br><span class="line">Client - Nginx - WAS - Cache - DB</span><br><span class="line"></span><br><span class="line">클라우드 DB가 대단히 싸요, 인건비가 원래 더 비싸지만 한국은 인건비가 더 싼 상황이어서 서버를 잘 안 사요, 하지만 곧 클라우드로 바뀔거에요</span><br><span class="line"></span><br><span class="line">- Google File System : 저장, 파일을 서버 세 곳에 나눠서 저장해요, 또한 물리적으로 지역분산을 시켜요, 서버가 고장나면 알아서 복구해요, 새로운 서버가 오면 알아서 복사해요, Hadoop로 이어짐</span><br><span class="line">- Google Map Reduce : 연산, 노는 CPU로 병렬처리해요, Hadoop Map Reduce로 이어짐</span><br><span class="line">- Google Big Table : HBase, Spark로 이어짐</span><br><span class="line"></span><br><span class="line">Hadoop이 어려워서 잘 쓰기 위해 잘 활용하기 위한 소프트웨어들이 많아져서 하둡 에코시스템이 형성되었어요</span><br><span class="line"></span><br><span class="line">Elastic Search : 자연어 처리, 비주얼라이제이션 기능</span><br><span class="line"></span><br><span class="line">Docker : 가상화 컴퓨터</span><br><span class="line"></span><br><span class="line">프로그래밍에서 d라고 붙으면 daemon, 백그라운드에서 돌아가는 프로그램이다</span><br><span class="line"></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">db에서 %는 모두를 뜻해요</span><br><span class="line"></span><br><span class="line">명령어를 대문자로 쓰는 것이 컨벤션이에요</span><br><span class="line"></span><br><span class="line">DB에서의 NULL값은 무엇인지 모르겠다라는 의미에요(코딩언어에서는 없다에요)</span><br><span class="line"></span><br><span class="line">AWS에서는 password가 설정되지 않아요</span><br><span class="line"></span><br><span class="line">리눅스는 레지스트리가 없고 모두 파일로 관리해서, 명령어는 파일을 수정해주는 역할을 하는 것이에요</span><br><span class="line"></span><br><span class="line">DB의 PRIMARY KEY는 자료구조상으로 B-Tree</span><br><span class="line"></span><br><span class="line">검색 알고리즘에서 N보다 좋아보이면 대체로 Log N에요</span><br><span class="line"></span><br><span class="line">돈은 DOUBLE로 절대 저장해선 안 된다, DEC를 써야 한다</span><br><span class="line"></span><br><span class="line">TIMESTAMP는 알아서 현재 시간을 채워넣는다</span><br><span class="line"></span><br><span class="line">인풋값을 바꾸지 않는 상태에서 거듭 실행해볼 필요없어요</span><br><span class="line"></span><br><span class="line">아무것도 바꾸지 않고 결과가 바뀌길 기대하지 마세요</span><br><span class="line"></span><br><span class="line">습관이 바뀌면 삶이 조금씩 바뀌고, 습관을 바꾸지 않으면 안 바뀝니다</span><br><span class="line"></span><br><span class="line">하기로 한 것을 하루에 1분만이라도 하세요</span><br><span class="line"></span><br><span class="line">의도적으로 바꾸지 않으면 알아서 바뀌지 않습니다</span><br><span class="line"></span><br><span class="line">똑같은 행위인데, 보기 좋게 하는 것을 신택틱 슈가라고 해요</span><br><span class="line">a[0] = \*(a+0) 라는 C언어의 잔재로 index가 0부터 시작해요</span><br><span class="line"></span><br><span class="line">관계형 데이터베이스는 JOIN을 할 수 있어서 사용해요</span><br><span class="line">JOIN은 둘이 관계가 있을 때만 사용할 수 있어요</span><br><span class="line"></span><br><span class="line">JOIN을 적을 때 왼쪽에 있는 것을 LEFT TABLE이라고 해요</span><br><span class="line"></span><br><span class="line">MySQL은 Full Outer Join이 안 되어서 조인한 결과물들을 합쳐서 보여주는 방식으로만 볼 수 있어요 (UNION)</span><br><span class="line"></span><br><span class="line">JOIN을 할 때는 B-Tree Index를 활용해서 빠르게 할 수 있어요</span><br><span class="line"></span><br><span class="line">관계형 데이터베이스는 multi value를 허용하지 않아요</span><br><span class="line"></span><br><span class="line">1:N일 때는 Foreign key를 무조건 N에 붙여야 해요</span><br><span class="line"></span><br><span class="line">M:N일 때는 복합키 또는 합성키를 사용해서 Primary Key를 나타내요</span><br><span class="line"></span><br><span class="line">JOIN해서 써야 하는 경우가 많다면, 반정규화의 대상?!</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">SHOW DATABASES;</span></span><br><span class="line"><span class="comment">SHOW TABLES;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">DROP TABLE IF EXISTS USER;</span></span><br><span class="line"><span class="comment">DROP TABLE IF EXISTS BOARD;</span></span><br><span class="line"><span class="comment">DROP TABLE IF EXISTS POST;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">CREATE TABLE USER (</span></span><br><span class="line"><span class="comment">ID INT PRIMARY KEY AUTO_INCREMENT,</span></span><br><span class="line"><span class="comment">NAME VARCHAR(64),</span></span><br><span class="line"><span class="comment">EMAIL VARCHAR(64),</span></span><br><span class="line"><span class="comment">PW VARCHAR(64),</span></span><br><span class="line"><span class="comment">MONEY INT(100)</span></span><br><span class="line"><span class="comment">);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">CREATE TABLE BOARD (</span></span><br><span class="line"><span class="comment">ID INT PRIMARY KEY AUTO_INCREMENT,</span></span><br><span class="line"><span class="comment">USER_ID VARCHAR(64),</span></span><br><span class="line"><span class="comment">TITLE VARCHAR(64),</span></span><br><span class="line"><span class="comment">BODY VARCHAR(64),</span></span><br><span class="line"><span class="comment">POST_DATE DATETIME</span></span><br><span class="line"><span class="comment">);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">CREATE TABLE POST (</span></span><br><span class="line"><span class="comment">ID INT PRIMARY KEY AUTO_INCREMENT,</span></span><br><span class="line"><span class="comment">TITLE VARCHAR(64),</span></span><br><span class="line"><span class="comment">COMMENT VARCHAR(64)</span></span><br><span class="line"><span class="comment">);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># INSERT INTO USER VALUES (NULL);</span></span><br><span class="line"><span class="comment">INSERT INTO USER (ID, NAME, EMAIL, PW) VALUES (null, "jeewhan", "test@gmail.com", "db1004");</span></span><br><span class="line"><span class="comment">INSERT INTO USER (NAME, PW) VALUES ("JEEWHAN", "HONUX1004");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">SELECT * FROM USER;</span></span><br><span class="line"><span class="comment">SELECT ID, NAME FROM USER;</span></span><br><span class="line"><span class="comment">SELECT ID, NAME FROM USER WHERE ID=1;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># DELETE FROM USER;</span></span><br><span class="line"><span class="comment"># DELETE FROM USER WHERE ID = 4;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">UPDATE USER SET MONEY = 10000;</span></span><br><span class="line"><span class="comment"># UPDATE USER SET NAME = "HONUX" WHERE ID=2;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">DESC USER;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="keyword">USER</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span> (</span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>),</span><br><span class="line"><span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> BOARD;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> BOARD (</span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line"><span class="built_in">DATE</span> <span class="built_in">DATE</span>,</span><br><span class="line">UID <span class="built_in">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">TITLE <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span>(<span class="keyword">ID</span>),</span><br><span class="line">FOREIGN <span class="keyword">KEY</span>(UID) <span class="keyword">REFERENCES</span> <span class="keyword">USER</span>(<span class="keyword">ID</span>)</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">USER</span>(<span class="keyword">ID</span>, <span class="keyword">NAME</span>) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">"apple"</span>, <span class="string">"Honux"</span>),</span><br><span class="line">(<span class="string">"banana"</span>, <span class="string">"Crong"</span>),</span><br><span class="line">(<span class="string">"carrot"</span>, <span class="string">"Pobi"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> BOARD (<span class="built_in">DATE</span>, UID, TITLE) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'2015-1-1'</span>, <span class="string">"apple"</span>, <span class="string">"hello"</span>),</span><br><span class="line">(<span class="string">'2015-1-2'</span>, <span class="string">"banana"</span>, <span class="string">"hi"</span>),</span><br><span class="line">(<span class="string">'2015-1-3'</span>, <span class="string">"apple"</span>, <span class="string">"good"</span>),</span><br><span class="line">(<span class="string">'2015-1-4'</span>, <span class="string">"banana"</span>, <span class="string">"morning"</span>),</span><br><span class="line">(<span class="string">'2015-1-7'</span>, <span class="literal">NULL</span>, <span class="string">"I'm hacker"</span>);</span><br><span class="line"></span><br><span class="line">DESC USER;</span><br><span class="line">DESC BOARD;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">USER</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> BOARD;</span><br><span class="line"></span><br><span class="line"># SELECT * FROM USER U CROSS JOIN BOARD B WHERE U.ID = B.UID;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">USER</span> U <span class="keyword">JOIN</span> BOARD B <span class="keyword">ON</span> U.ID = B.UID;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">USER</span> U <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> BOARD B <span class="keyword">ON</span> U.ID = B.UID;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">USER</span> U <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> BOARD B <span class="keyword">ON</span> U.ID = B.UID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">USER</span> <span class="keyword">SET</span> <span class="keyword">ID</span> = <span class="string">"mango"</span> <span class="keyword">WHERE</span> <span class="keyword">ID</span>=<span class="string">"apple"</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="170125"><a href="#170125" class="headerlink" title="170125"></a>170125</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">공부하는 방식을 안 바꾸면 계속 힘들거에요</span><br><span class="line"></span><br><span class="line">CSS3로 할 수 있는 일이면 CSS3로 하는 것이 성능상 최고시다!</span><br><span class="line"></span><br><span class="line">최선을 고민하기 전에, 일단 되도록 만들 것</span><br><span class="line"></span><br><span class="line">CSS3</span><br><span class="line">- Overflow: hidden // 요소의 크기를 넘어서는 부분을 통제</span><br><span class="line">- Transform // 좌표 공간을 변형</span><br><span class="line">  - Translate3d() // 위치조작 애니메이션</span><br><span class="line">- Position: absolute // 부모를 기준으로 절대적으로 움직인다</span><br><span class="line">- transition: all 3s // 애니메이션 속도</span><br><span class="line"></span><br><span class="line">Position: relative =&gt; 자식의 기준점이 되고, 기준이 자기 자신</span><br><span class="line">Position: absolute =&gt; 부모를 기준으로 절대적으로 움직이도록 한다, 자식끼리는 상관없음</span><br><span class="line"></span><br><span class="line">기능이 많아졌을 때 그것을 정리하는 것이 매우 어렵다</span><br></pre></td></tr></table></figure><hr><h3 id="170126"><a href="#170126" class="headerlink" title="170126"></a>170126</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Javascript로 CSS를 변경하고 싶다면, HTML에 입력해주는 수 밖에 없습니다</span><br><span class="line">보안 때문에, Javascript는 file에 IO를 할 수가 없다</span><br><span class="line"></span><br><span class="line">정규표현식을 어떻게 짜냐에 따라서 성능에 영향이 있어요</span><br><span class="line"></span><br><span class="line">기본 제공해주는 애니메이션 외에는 자바스크립트로 구현해주어야 해요</span><br><span class="line"></span><br><span class="line">설계(일반화)를 안 해서 힘든거에요</span><br><span class="line">공통된 패턴과 규칙을 찾아야 해요</span><br><span class="line"></span><br><span class="line">적어도 두 세 곳에서는 불러야 함수를 정의하는 의미가 있어요</span><br></pre></td></tr></table></figure><hr><h3 id="170206"><a href="#170206" class="headerlink" title="170206"></a>170206</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">Math.floor(Math.random * n) : 랜덤한 숫자 도출</span><br><span class="line"></span><br><span class="line">parseInt는 문자열을 숫자로 바꿀 때 사용하는 함수이므로 Math.floor에 비해 성능이 좋지 않다</span><br><span class="line"></span><br><span class="line">프로그램은 늘 일정 이상의 퍼포먼스를 담보해주는 것이 중요하기에 Big O notation을 기준으로 판단한다</span><br><span class="line"></span><br><span class="line">echo $RANDOM % N</span><br><span class="line"></span><br><span class="line">%는 모둘라 라고 읽어요</span><br><span class="line"></span><br><span class="line">var a = 3; 에서 3은 literal, 딱 정해져있는 값</span><br><span class="line"></span><br><span class="line">derived type은 primitive type(초석이 되는 자료형)을 조합해서 만드는 자료형이에요</span><br><span class="line"></span><br><span class="line">자료구조는 derived type을 공부하는 것이에요</span><br><span class="line"></span><br><span class="line">적절한 자료구조를 선택하는 것이 문제 해결의 시작입니다</span><br><span class="line"></span><br><span class="line">sequence store : Array</span><br><span class="line"></span><br><span class="line">key-value store : Hash</span><br><span class="line"></span><br><span class="line">복합적인 자료구조의 사용도 가능하다, ArrayList + HashMap</span><br><span class="line"></span><br><span class="line">하나의 데이터를 Array와 Hash로 참조할 경우, 데이터가 중복으로 잡히는 것이 아니라,</span><br><span class="line"></span><br><span class="line">참조하는 만큼의 Overhead가 늘어날 뿐이다</span><br><span class="line"></span><br><span class="line">프로그래밍을 할 때는 논리적인지, 자연스러운지, 합리적인지가 매우 중요합니다</span><br><span class="line"></span><br><span class="line">primitive type은 재할당할 때 override합니다</span><br><span class="line"></span><br><span class="line">derived type은 실제 값이 아닌 다른 곳에 있는 값을 참조한다(primitive type의 묶음)</span><br><span class="line"></span><br><span class="line">const를 사용하면 reference를 잠군다, primitive type은 수정이 불가능(immutable)</span><br><span class="line"></span><br><span class="line">a2 = a1을 할 경우 a1과 동일한 참조값을 할당해준다(값이 아닌 주소값)</span><br><span class="line"></span><br><span class="line">리터럴은 변수가 아니므로 코드 영역에 담겨있다</span><br><span class="line"></span><br><span class="line">const는 주소값을 바꿀 수 없도록 하는 것</span><br><span class="line"></span><br><span class="line">참조는 포인터의 부분집합, 제한적 기능만 제공(다른 변수를 참조하는 의미로만 사용가능)</span><br><span class="line"></span><br><span class="line">C#은 Java의 아류에요, 자료구조를 학습하기 좋아요</span><br><span class="line"></span><br><span class="line">메모리의 4대 영역: code, data, stack, heap</span><br><span class="line"></span><br><span class="line">함수를 만들면 가장 먼저 parameter를 stack에 담는다,</span><br><span class="line"></span><br><span class="line">함수 호출이 끝나면 해당 stack이 사라지면서 stack에 있던 것은 heap에 담겨요</span><br><span class="line"></span><br><span class="line">JS가 아닌 경우에는 블록마다도 stack을 만드는 과정을 거치는가? =&gt; 언어마다 달라요</span><br><span class="line"></span><br><span class="line">참조를 호출하는 것을 call by reference라고 합니다</span><br><span class="line"></span><br><span class="line">함수 밖 변수를 함수 안에서 호출해서 사용하고 난 뒤에 함수 밖에서 변화가 없는 것은 call by value이기 때문이에요(primitive type는 변수에 address가 아닌 value로 할당됩니다)</span><br><span class="line"></span><br><span class="line">vim에서 파일 전체의 인덴트를 맞추는 방법은? =&gt; gg = G</span><br><span class="line"></span><br><span class="line">생각만 하는 것이 아니라 그림으로 그리면 확실해져요</span><br><span class="line"></span><br><span class="line">? C언어가 학습 대상에서 높은 우선순위를 차지하는 시점은 언제인가요?</span><br></pre></td></tr></table></figure><hr><h3 id="170208"><a href="#170208" class="headerlink" title="170208"></a>170208</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">면접 때 리눅스 명령어를 물어보는 곳이 많아요</span><br><span class="line"></span><br><span class="line">Function(기능(문과), 함수(이과))는 Input &gt;= 0, Output &gt;= 0</span><br><span class="line"></span><br><span class="line">얕은 복사(참조 값만 복사), 깊은 복사(객체 자체를 복사)</span><br><span class="line"></span><br><span class="line">코드는 쓰는 것보다 읽는 것이 훨씬 많이 이루어지므로 가독성을 확보하기 위해 여러 제약이 생겨났다</span><br><span class="line"></span><br><span class="line">정렬은 면접에서 정말 많이 물어봐서, 암기 대상이에요</span><br><span class="line"></span><br><span class="line">프로그래밍할 때 괴롭고, 읽기 쉬운 편이 훨씬 좋아요</span><br><span class="line"></span><br><span class="line">컴퓨터 공학과에서는 돌을 밀기 이전에 돌을 동그랗게 바꾸는 과정을 거쳐요,</span><br><span class="line">하지만 우리는 네모를 밀면서 동그라미로 동시에 깎고 있어서 어려운거에요</span><br><span class="line"></span><br><span class="line">우리가 상상할 수 없다고 해서 존재하지 않는 것은 아니에요</span><br><span class="line"></span><br><span class="line">배열</span><br><span class="line"></span><br><span class="line">- 전체를 순차적으로 출력한다면</span><br><span class="line">- 내부적으로 트리 구조로 생겨있을 수 있어서 인덱스를 통해 값에 빠르게 접근할 수 있어요( O(logn) )</span><br><span class="line">- 정렬</span><br><span class="line">- binary search</span><br><span class="line">- 어느 것을 사용하는 것이 좋을지 모를 때</span><br><span class="line"></span><br><span class="line">배열이라는 추상화된 자료구조를 배워요, function이 아니라 operation이라고 배우는 까닭이 그것이에요</span><br><span class="line"></span><br><span class="line">배열이라면 이런 기능들이 있어야 해~ 라는 것의 집합(Array같은 것들)</span><br><span class="line"></span><br><span class="line">Introduction to Algorithm, Clacking the code interview</span><br><span class="line"></span><br><span class="line">아마존은 에러 발생률이 0.01%이 될 때까지 제품에 코드를 탑재시키지 않아요</span><br><span class="line"></span><br><span class="line">알고리즘을 공부하는 것은 문제를 해결하는 패턴을 익히는 것이에요</span><br></pre></td></tr></table></figure><hr><h3 id="170214"><a href="#170214" class="headerlink" title="170214"></a>170214</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">모든 재귀는 안재귀로 풀 수 있다는 것이 수학적으로 증명되어있다고 해요...!</span><br><span class="line"></span><br><span class="line">피보나치 수열을 구할 때, 반복되는 부분이 많죠?</span><br><span class="line">이런 부분을 메모이제이션을 통해 한 번 연산한 것을 다시 불러와서 사용하도록 할 수 있어요!</span><br><span class="line"></span><br><span class="line">다이나믹 프로그래밍이라는 키워드를 잘 기억해두세요!</span><br><span class="line"></span><br><span class="line">분할정복법이란, 혼자 풀 수 없을만큼의 큰 문제를 풀 수 있는 정도의 작은 크기의 문제로 나누어서 각개격파하는 것</span><br><span class="line"></span><br><span class="line">Binary Search, Quick Sort는 무조건 외우세요</span><br><span class="line"></span><br><span class="line">Binary Search를 재귀적으로 구현하는 것은 좋은 방법이에요</span><br><span class="line"></span><br><span class="line">알고리즘 책을 다 외우면 20억 정도의 가치를 분할해서 지급받는 셈이니 꼭 공부해보세요!</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">facto</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (number === <span class="number">0</span>) &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">  <span class="keyword">return</span> n * facto(n<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> memo = &#123;<span class="number">0</span>: <span class="number">0</span>, <span class="number">1</span>: <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">String</span>(number) <span class="keyword">in</span> <span class="built_in">Object</span>.keys(memo)) &#123;</span><br><span class="line">    <span class="keyword">return</span> memo[number];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    memo[number] = fibonacci(number<span class="number">-2</span>) + fibonacci(number<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> memo[number];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binary</span>(<span class="params">array, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> low = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> high = array.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">    <span class="keyword">let</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (array[mid] &gt; value) &#123;</span><br><span class="line">      high = mid - <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[mid] &lt; value) &#123;</span><br><span class="line">      low = mid + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="keyword">return</span> mid; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="170215"><a href="#170215" class="headerlink" title="170215"></a>170215</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">테스팅을 할 때는 정상적이지 않은 경우들도 모두 검증해야 하기 때문에, 하나의 함수에 대해서도 여러 가지로 테스팅을 해야 함</span><br><span class="line"></span><br><span class="line">node_modules 은 gitignore에 등록해야 해요</span><br><span class="line"></span><br><span class="line">테스트코드는 given, when, then으로 짜는 것이 좋아요!</span><br><span class="line"></span><br><span class="line">js file 하나에 대응하는 test file 하나를 만드는 것이 관리에 용이함</span><br><span class="line"></span><br><span class="line">테스트가 어려우면 리팩토링을 해야 해요! 쉽게 반환값을 알 수 있는 함수가 좋은 함수에욧!</span><br><span class="line"></span><br><span class="line">디자인 -&gt; 테스트 코드 -&gt; 코딩</span><br><span class="line"></span><br><span class="line">alert을 테스트하고 싶으면, override해서 문자열을 return하도록 하는 등 UI 테스트에서는 우회적인 방법이 많이 동원되어요</span><br><span class="line"></span><br><span class="line">main.html + main.js를 테스팅할 때는 main.test.html, main.test.js를 만들어서 작업해야 해요 (테스트를 위해 서비스 코드를 건들여서는 안 되어요!)</span><br><span class="line"></span><br><span class="line">지속 가능하기 힘든 방법론은 동기부여가 없이는 도입하지 않는 것도 방법이에요!</span><br><span class="line"></span><br><span class="line">유지보수를 해보면 필요성을 확 느끼게 될거에요</span><br></pre></td></tr></table></figure><hr><h3 id="170221"><a href="#170221" class="headerlink" title="170221"></a>170221</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Callback함수들은 context를 가지고 있어요</span><br><span class="line"></span><br><span class="line">Callback함수가 어디서 실행되는지 보면 context를 알 수 있어요</span><br><span class="line"></span><br><span class="line">btn.addEventListener는 btn이라는 실행영역을 가져요</span><br><span class="line"></span><br><span class="line">보통 개발자들이 객체 안에서 함수를 만들 때는 btn이 아니라 객체를 가리키길 원하는 경우가 대부분이에요</span><br><span class="line"></span><br><span class="line">그렇게 하려면 함수 뒤에 .bind(this)를 해줘야 해요, 여기서의 this는 객체를 가리켜요</span><br><span class="line"></span><br><span class="line">bind는 context를 변경해주는 함수에요, bind를 한다고 해서 함수를 호출하는 것은 아니에요</span><br><span class="line"></span><br><span class="line">function이면 부모 영역공간으로 타고 올라가서 거기에 있는 bind를 사용하는 것이에요</span><br><span class="line"></span><br><span class="line">함수도 객체이기 때문에 메소드를 사용할 수 있어요</span><br><span class="line"></span><br><span class="line">bind는 함수를 재정의한 함수를 반환해요, 함수를 재정의해서 context를 바꾼 새로운 함수를 반환해줘요</span><br><span class="line"></span><br><span class="line">이때 기존에 있던 this를 쓰고 싶다면, 변수에 저장해놓고 쓰곤 해요</span><br><span class="line"></span><br><span class="line">반대로 다른 변수를 담아놓고 가져다 this를 쓸 수도 있어요</span><br><span class="line"></span><br><span class="line">ES6 arrow를 사용하면 bind를 쓰지 않고도 가리키게 할 수 있어요</span><br><span class="line"></span><br><span class="line">전역변수로 놓지 말고 객체 안에 담아서 사용하세요</span><br><span class="line"></span><br><span class="line">계속 코딩을 하다보면, 어디에서 bind를 해야 하는지 체득하게 될거에요</span><br><span class="line"></span><br><span class="line">이해가 안 가면 우선은 디버깅을 하면서 해보세요</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> blog = &#123;</span><br><span class="line"></span><br><span class="line">  init : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.registerEvents();</span><br><span class="line">    <span class="keyword">this</span>.view = <span class="built_in">document</span>.querySelector(<span class="string">".view"</span>);</span><br><span class="line">    <span class="keyword">this</span>.url = <span class="string">"http://jsonplaceholder.typicode.com/posts/1"</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  registerEvents : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">"button"</span>);</span><br><span class="line">    btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.sendAjax();</span><br><span class="line">    &#125;.bind(<span class="keyword">this</span>));</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  sendAjax : <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> httpRequest = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    httpRequest.addEventListener(<span class="string">"load"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      self.appendData(<span class="built_in">JSON</span>.parse(httpRequest.responseText).title);</span><br><span class="line">    &#125;);</span><br><span class="line">    httpRequest.open(<span class="string">'GET'</span>, <span class="keyword">this</span>.url);</span><br><span class="line">    httpRequest.send();</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  appendData : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">".view"</span>).innerHTML = data;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">blog.init();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 클래스는 유사한 단위의 변수와 함수를 묶은 것이에요</span></span><br><span class="line"><span class="comment">// new로 불리면 자동적으로 return this가 발생해요</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Name</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.registerEvents = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.sendAjax();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.sendAjax = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"sendAjax"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// return this; =&gt; 생성자 함수를 통해 생성했을 때 암묵적으로 실행되는 코드</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Name(<span class="string">"Youn"</span>); <span class="comment">// new =&gt; 객체를 만들어주세요!</span></span><br><span class="line"><span class="comment">// new를 안 쓰면 함수 안 this는 window에요</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(obj.registerEvents());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------</span></span><br><span class="line"><span class="comment">// 위와 다르게 프로토타입을 통해 만들면, 객체를 여러 개 만들어도 메모리에 function이 늘어나지 않아요!</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Card</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Card.prototype.registerEvents = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.sendAjax();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Card.prototype.sendAjax = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"sendAjax"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// var todo = new Card("Youn");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 위의 코드들은 입력하기 불편하죠? 그러면 아래와 같이 해요</span></span><br><span class="line"><span class="comment">// 입력도 쉬워지고, 메모리상 이득도 대단하다능!!!</span></span><br><span class="line"><span class="comment">// 아래와 같이 쓰면 constructor 관련해서 차이점이 발생하긴 해요</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Chart</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Chart.prototype = &#123;</span><br><span class="line">  registerEvents : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.sendAjax();</span><br><span class="line">  &#125;,</span><br><span class="line">  sendAjax : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"sendAjax"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> action = <span class="keyword">new</span> Chart(<span class="string">"Youn"</span>);</span><br><span class="line">action.registerEvents();</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">프로토타입은 공통으로 사용할 수 있도록 상속받는 것이라고 생각해보아요</span><br><span class="line">어떤 것을 클래스로 만들어야 할 것인가? 무엇은 포함시키고, 무엇은 넣지 말아야 할까?</span><br><span class="line">어떻게 하면 재사용할 수 있는 클래스를 만들 것인가?</span><br><span class="line">프로젝트의 규모가 커질수록 위의 프로토타입을 사용하는 상황들이 더욱 이해가 될거에요</span><br><span class="line">늘 학습을 프로젝트와 병행해야 왜 필요한지 이해하게 되어요</span><br><span class="line">ES6의 클래스도 내부구현은 위와 같아요</span><br><span class="line"></span><br><span class="line">ES5 이후 수많은 개선 시도들이 ES6를 통해 표준화되는 추세에요</span><br><span class="line"></span><br><span class="line">책보다는 MDN을 우선 보셔요! 그래도 추천한다면</span><br><span class="line">http://www.yes24.com/24/Goods/5871083 : 패턴 학습하기에 좋은 책</span><br><span class="line">https://addyosmani.com/resources/essentialjsdesignpatterns/book/ : 패턴 총집합</span><br><span class="line">자바스크립트를 깨우치다 : 타입 관련해 좋은 책</span><br><span class="line">자바스크립트를 말하다</span><br><span class="line"></span><br><span class="line">리액트 등 SPA와 관련한 좋은 디자인을 담은, Best Practice가 담긴, React의 철학과 관련한 책이 없어서 아쉬워요(단순 사용법이 아닌)</span><br><span class="line"></span><br><span class="line">번역서는 자바스크립트를 아는 사람이 번역해야만 해요</span><br><span class="line"></span><br><span class="line">Pure Javascript를 알아야 라이브러리를 만들 수 있어요</span><br><span class="line">라이브버리를 만들 수 있으면 당연히 취업 가능!</span><br></pre></td></tr></table></figure><h4 id="DB-모델링"><a href="#DB-모델링" class="headerlink" title="DB 모델링"></a>DB 모델링</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Object : A thing</span><br><span class="line"></span><br><span class="line">Class : 분류, 공통적인 Object의 모음</span><br><span class="line"></span><br><span class="line">Class가 Memory에 올라가면 Object가 되어요</span><br><span class="line"></span><br><span class="line">데이터 모델링이라는 것은 Class를 만드는 과정이에요</span><br><span class="line"></span><br><span class="line">요구사항 분석 -&gt; 개념적 설계 -&gt; 논리적 설계 -&gt; 물리적 설계</span><br><span class="line"></span><br><span class="line">App을 만들 때는 제일 먼저 사용자를 정의하는 것부터 시작해야 해요</span><br><span class="line"></span><br><span class="line">App에 필요한 객체를 분석</span><br><span class="line"></span><br><span class="line">각 객체를 대상으로 사용자 시나리오, 페르소나 분석 등을 통해 세밀하게 요구사항을 도출한다.</span><br><span class="line"></span><br><span class="line">관계와 요구사항을 중심으로 ERD를 그린다.</span><br><span class="line"></span><br><span class="line">ERD 를 기반으로 Relational Model 로 변환</span><br><span class="line"></span><br><span class="line">관계형 모델을 기반으로 SQL 을 작성한다.</span><br><span class="line"></span><br><span class="line">1:M</span><br><span class="line"></span><br><span class="line">- M쪽에 1쪽의 key 추가</span><br><span class="line">- 속성은 M쪽 테이블에 추가</span><br><span class="line">- 1 테이블의 pk를 fk로 추가</span><br><span class="line">- User JOIN Board</span><br><span class="line"></span><br><span class="line">N:M</span><br><span class="line"></span><br><span class="line">- 별도의 테이블로 분리</span><br><span class="line">- 두 테이블의 pk를 fk로 추가</span><br><span class="line">- 속성을 추가</span><br><span class="line">- User JOIN</span><br><span class="line">    Board_User</span><br><span class="line">    JOIN</span><br><span class="line">    Board</span><br><span class="line"></span><br><span class="line">무엇이든 해봐야 코딩이 됩니다, 수업 들어봐야 익혀지지 않아요, 만들어보세요</span><br><span class="line"></span><br><span class="line">링크드리스트는 공부하기 참 좋은 소재에요, 참조를 잘 이해할 수 있게 된다는 것</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="CodeSquad" scheme="https://eclatant.io/categories/CodeSquad/"/>
    
    
  </entry>
  
</feed>
